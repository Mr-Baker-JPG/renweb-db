/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/Subscriptions/{subscriptionId}": {
    /**
     * Gets Subscription information from cosmos
     * @description Gets Subscription information from cosmos
     */
    get: operations["Subscriptions_GetSubscription"];
  };
  "/people/Address": {
    /**
     * Gets a list of addresses
     * @description Gets a list of addresses
     */
    get: operations["Address_GetAddresses"];
    /**
     * Creates a new address
     * @description Creates a new address
     */
    post: operations["Address_CreateAddress"];
  };
  "/people/Address/{addressId}": {
    /**
     * Gets a single address
     * @description Gets a single address
     */
    get: operations["Address_GetAddressById"];
    /**
     * Replaces an address
     * @description Replaces an address
     */
    put: operations["Address_ReplaceAddress"];
    /**
     * Update an address based on the json patch document
     * @description Update an address based on the json patch document
     */
    patch: operations["Address_UpdateAddress"];
  };
  "/people/Demographic": {
    /**
     * Gets a list of people demographic information
     * @description Gets a list of people demographic information
     */
    get: operations["Demographic_GetPersonDemographics"];
  };
  "/people/{personId}/Demographic": {
    /**
     * Get a person's demographic information record
     * @description Get a person's demographic information record
     */
    get: operations["Demographic_GetPersonDemographic"];
    /**
     * Updates a person's demographic information
     * @description Updates a person's demographic information
     */
    put: operations["Demographic_UpdatePersonDemographic"];
    /**
     * Updates a person's demographic information based on the json patch document
     * @description Updates a person's demographic information based on the json patch document
     */
    patch: operations["Demographic_JsonPatchPersonDemographic"];
  };
  "/people/DirectoryPreferences": {
    /**
     * Gets a list of people's directory preferences
     * @description Gets a list of people's directory preferences
     */
    get: operations["DirectoryPreferences_GetDirectoryPreferences"];
  };
  "/people/{personId}/DirectoryPreferences": {
    /**
     * Gets a single person's directory preferences information
     * @description Gets a single person's directory preferences information
     */
    get: operations["DirectoryPreferences_GetDirectoryPreferencesById"];
    /**
     * Replaces a person's directory preferences information
     * @description Replaces a person's directory preferences information
     */
    put: operations["DirectoryPreferences_ReplaceDirectoryPreferences"];
    /**
     * Update a person's directory preferences information based on the json patch document
     * @description Update a person's directory preferences information based on the json patch document
     */
    patch: operations["DirectoryPreferences_UpdateDirectoryPreferences"];
  };
  "/Education": {
    /**
     * Gets a list of people education information
     * @description Gets a list of people education information
     */
    get: operations["Education_GetPersonEducation"];
  };
  "/Education/{educationId}": {
    /**
     * Get a person's education record
     * @description Get a person's education record
     */
    get: operations["Education_GetPersonEducationById"];
    /**
     * Updates a person's education information
     * @description Updates a person's education information
     */
    put: operations["Education_ReplacePersonEducation"];
    /**
     * Updates a person's education information based on the json patch document
     * @description Updates a person's education information based on the json patch document
     */
    patch: operations["Education_UpdatePersonEducation"];
  };
  "/people/EmergencyContact": {
    /**
     * Gets a list of emergencyContacts
     * @description Gets a list of emergencyContacts
     */
    get: operations["EmergencyContact_GetEmergencyContacts"];
    /**
     * Creates a new emergencyContact
     * @description Creates a new emergencyContact
     */
    post: operations["EmergencyContact_CreateEmergencyContact"];
  };
  "/people/EmergencyContact/{emergencyContactId}": {
    /**
     * Gets a single emergencyContact
     * @description Gets a single emergencyContact
     */
    get: operations["EmergencyContact_GetEmergencyContactById"];
    /**
     * Replaces an emergencyContact
     * @description Replaces an emergencyContact
     */
    put: operations["EmergencyContact_ReplaceEmergencyContact"];
    /**
     * Update an emergencyContact based on the json patch document
     * @description Update an emergencyContact based on the json patch document
     */
    patch: operations["EmergencyContact_UpdateEmergencyContact"];
  };
  "/people/ParentAlert": {
    /**
     * Gets a list of people parent alert information
     * @description Gets a list of people parent alert information
     */
    get: operations["ParentAlert_GetParentAlert"];
  };
  "/people/{personId}/ParentAlert": {
    /**
     * Get a person's parent alert record
     * @description Get a person's parent alert record
     */
    get: operations["ParentAlert_GetParentAlertById"];
    /**
     * Updates a person's parent alert information
     * @description Updates a person's parent alert information
     */
    put: operations["ParentAlert_UpdateParentAlert"];
    /**
     * Updates a person's parent alert information based on the json patch document
     * @description Updates a person's parent alert information based on the json patch document
     */
    patch: operations["ParentAlert_JsonPatchParentAlert"];
  };
  "/people/ParentStudent": {
    /**
     * Gets a list of parents
     * @description Gets a list of parents
     */
    get: operations["ParentStudent_GetParents"];
    /**
     * Creates a new parent student
     * @description Creates a new parent student
     */
    post: operations["ParentStudent_CreateParentStudent"];
  };
  "/people/ParentStudent/parent/{parentId}/student/{studentId}": {
    /**
     * Gets a single parent student
     * @description Gets a single parent student
     */
    get: operations["ParentStudent_GetParentStudentById"];
    /**
     * Replaces a parent student
     * @description Replaces a parent student
     */
    put: operations["ParentStudent_ReplaceParentStudent"];
    /**
     * Update a parent student based on the json patch document
     * @description Update a parent student based on the json patch document
     */
    patch: operations["ParentStudent_UpdateParentStudent"];
  };
  "/People": {
    /**
     * Gets a list of people
     * @description Gets a list of people
     */
    get: operations["People_GetPeopleBase"];
  };
  "/People/{personId}": {
    /**
     * Get a person record
     * @description Get a person record
     */
    get: operations["People_GetPersonBase"];
    /**
     * Updates a person
     * @description Updates a person
     */
    put: operations["People_UpdatePersonBase"];
    /**
     * Updates a person based on the json patch document
     * @description Updates a person based on the json patch document
     */
    patch: operations["People_JsonPatchPersonBase"];
  };
  "/people/PublicSchools": {
    /**
     * Gets a list of people public school
     * @description Gets a list of people public school
     */
    get: operations["PublicSchools_GetPersonPublicSchools"];
  };
  "/people/{personId}/PublicSchools": {
    /**
     * Get a person's public schools record
     * @description Get a person's public schools record
     */
    get: operations["PublicSchools_GetPersonPublicSchoolsById"];
    /**
     * Update a person's public schools record
     * @description Update a person's public schools record
     */
    put: operations["PublicSchools_UpdatePublicSchools"];
    /**
     * Updates a person based on the json patch document
     * @description Updates a person based on the json patch document
     */
    patch: operations["PublicSchools_JsonPatchPublicSchools"];
  };
  "/people/PersonFamily": {
    /**
     * Gets a list of people families
     * @description Gets a list of people families
     */
    get: operations["PersonFamily_GetPeopleFamilies"];
    /**
     * Creates a new person family
     * @description Creates a new person family
     */
    post: operations["PersonFamily_CreatePersonFamily"];
  };
  "/people/PersonFamily/family/{familyId}/person/{personId}": {
    /**
     * Gets a single person Family
     * @description Gets a single person Family
     */
    get: operations["PersonFamily_GetPersonFamilyById"];
    /**
     * Replaces a person family
     * @description Replaces a person family
     */
    put: operations["PersonFamily_ReplacePersonFamily"];
    /**
     * Update a person family based on the json patch document
     * @description Update a person family based on the json patch document
     */
    patch: operations["PersonFamily_UpdatePersonFamily"];
  };
  "/people/Religion": {
    /**
     * Gets a list of people religion information
     * @description Gets a list of people religion information
     */
    get: operations["Religion_GetReligion"];
  };
  "/people/{personId}/Religion": {
    /**
     * Gets a single person's religion information
     * @description Gets a single person's religion information
     */
    get: operations["Religion_GetReligionById"];
    /**
     * Replaces a person's religion information
     * @description Replaces a person's religion information
     */
    put: operations["Religion_ReplaceReligion"];
    /**
     * Update a person's religion information based on the json patch document
     * @description Update a person's religion information based on the json patch document
     */
    patch: operations["Religion_UpdateReligion"];
  };
  "/people/ReligiousEvents": {
    /**
     * Gets a list of people religious events
     * @description Gets a list of people religious events
     */
    get: operations["ReligiousEvents_GetReligiousEvents"];
    /**
     * Creates a new religious event
     * @description Creates a new religious event
     */
    post: operations["ReligiousEvents_CreateReligiousEvent"];
  };
  "/people/ReligiousEvents/{religiousEventId}": {
    /**
     * Gets a single religious event
     * @description Gets a single religious event
     */
    get: operations["ReligiousEvents_GetReligiousEventsById"];
    /**
     * Replaces a religious event
     * @description Replaces a religious event
     */
    put: operations["ReligiousEvents_ReplaceReligiousEvents"];
    /**
     * Update a religious event based on the json patch document
     * @description Update a religious event based on the json patch document
     */
    patch: operations["ReligiousEvents_UpdateReligiousEvents"];
  };
  "/people/Vehicles": {
    /**
     * Gets a list of people vehicle information
     * @description Gets a list of people vehicle information
     */
    get: operations["Vehicles_GetVehicle"];
  };
  "/people/{personId}/Vehicles": {
    /**
     * Gets a single person's vehicle information
     * @description Gets a single person's vehicle information
     */
    get: operations["Vehicles_GetVehicleById"];
    /**
     * Replaces a person's Vehicle information
     * @description Replaces a person's Vehicle information
     */
    put: operations["Vehicles_ReplaceVehicle"];
    /**
     * Update a person's vehicle information based on the json patch document
     * @description Update a person's vehicle information based on the json patch document
     */
    patch: operations["Vehicles_UpdateVehicle"];
  };
  "/people/Work": {
    /**
     * Gets a list of people work information
     * @description Gets a list of people work information
     */
    get: operations["Work_GetWork"];
  };
  "/people/{personId}/Work": {
    /**
     * Get a person work record
     * @description Get a person work record
     */
    get: operations["Work_GetWorkById"];
    /**
     * Updates person work information
     * @description Updates person work information
     */
    put: operations["Work_UpdateWork"];
    /**
     * Updates a person based on the json patch document
     * @description Updates a person based on the json patch document
     */
    patch: operations["Work_PatchWork"];
  };
  "/students/Honors": {
    /**
     * Gets a list of honors.
     * @description Gets a list of honors.
     */
    get: operations["Honors_GetHonors"];
  };
  "/students/Honors/{honorId}": {
    /**
     * Gets a honor.
     * @description Gets a honor.
     */
    get: operations["Honors_GetAHonor"];
    /**
     * Replaces the honors.
     * @description Replaces the honors.
     */
    put: operations["Honors_ReplaceHonors"];
    /**
     * Updates the honors.
     * @description Updates the honors.
     */
    patch: operations["Honors_UpdateHonors"];
  };
  "/Students": {
    /**
     * Gets a list of student information
     * @description Gets a list of student information
     */
    get: operations["Student_GetStudentV1"];
    /**
     * Create student
     * @description Create student
     */
    post: operations["Student_PostStudentV1"];
  };
  "/Students/{personStudentId}": {
    /**
     * Gets student information by id
     * @description Gets student information by id
     */
    get: operations["Student_GetStudentByIdV1"];
    /**
     * Update student. This updates everything on student. Be careful to use it!!!
     * @description Update student. This updates everything on student. Be careful to use it!!!
     */
    put: operations["Student_PutStudentV1"];
    /**
     * Partial Update student.
     * @description Partial Update student.
     */
    patch: operations["Student_PatchStudentV1"];
  };
  "/Students/LockerConfiguration": {
    /**
     * Gets a list of student locker
     * @description Gets a list of student locker
     */
    get: operations["StudentLocker_GetStudentLockerListV1"];
    /**
     * Creates locker
     * @description Creates locker
     */
    post: operations["StudentLocker_PostStudentLocker"];
  };
  "/Students/LockerConfiguration/{lockerConfigurationId}": {
    /**
     * Gets locker by id
     * @description Gets locker by id
     */
    get: operations["StudentLocker_GetStudentLockerByIdV1"];
    /**
     * Updates locker by id
     * @description Updates locker by id
     */
    put: operations["StudentLocker_PutStudentLockerByIdV1"];
    /**
     * Partial Updates locker by id
     * @description Partial Updates locker by id
     */
    patch: operations["StudentLocker_PatchStudentLockerByIdV1"];
  };
  "/Students/{personStudentId}/School": {
    /**
     * Gets student school information by id
     * @description Gets student school information by id
     */
    get: operations["StudentSchool_GetStudentSchoolV1"];
    /**
     * Update student school information
     * @description Update student school information
     */
    put: operations["StudentSchool_PutStudentSchoolV1"];
    /**
     * Partial Update student school information
     * @description Partial Update student school information
     */
    patch: operations["StudentSchool_PatchStudentSchoolV1"];
  };
  "/Students/Status": {
    /**
     * Gets a list of student status
     * @description Gets a list of student status
     */
    get: operations["StudentStatus_GetStudentStatusV1"];
  };
  "/Students/Status/{status}": {
    /**
     * Gets a student status with substatus
     * @description Gets a student status with substatus
     */
    get: operations["StudentStatus_GetStudentStatusByIdV1"];
  };
  "/Students/Status/{status}/Substatus/{subStatusId}": {
    /**
     * Gets a student substatus by id
     * @description Gets a student substatus by id
     */
    get: operations["StudentStatus_GetStudentSubStatusByIdV1"];
    /**
     * Update a student substatus by id
     * @description Update a student substatus by id
     */
    put: operations["StudentStatus_PutStudentSubStatusByIdV1"];
  };
  "/Students/Status/{status}/Substatus": {
    /**
     * Update student substatus list
     * @description Update student substatus list
     */
    put: operations["StudentStatus_PutStudentSubstatusV1"];
    /**
     * Creates a student substatus
     * @description Creates a student substatus
     */
    post: operations["StudentStatus_PostStudentSubStatusByIdV1"];
  };
  "/Congregations": {
    /**
     * Gets a list of congregations
     * @description Gets a list of congregations
     */
    get: operations["Congregations_GetCongregations"];
    /**
     * Creates the congregation.
     * @description Creates the congregation.
     */
    post: operations["Congregations_CreateCongregation"];
  };
  "/Congregations/{congregationId}": {
    /**
     * Gets the congregation by identifier.
     * @description Gets the congregation by identifier.
     */
    get: operations["Congregations_GetCongregationById"];
    /**
     * Replaces the congregation.
     * @description Replaces the congregation.
     */
    put: operations["Congregations_ReplaceCongregation"];
    /**
     * Updates the congregation.
     * @description Updates the congregation.
     */
    patch: operations["Congregations_UpdateCongregation"];
  };
  "/people/Interests": {
    /**
     * Gets a list of people interests
     * @description Gets a list of people interests
     */
    get: operations["Interests_GetpeopleInterests"];
    /**
     * Creates a new person interest
     * @description Creates a new person interest
     */
    post: operations["Interests_CreatePersonInterest"];
  };
  "/students/Alerts": {
    /**
     * Gets a list of student alerts.
     * @description Gets a list of student alerts.
     */
    get: operations["Alerts_GetStudentAlerts"];
    /**
     * Creates a student alert.
     * @description Creates a student alert.
     */
    post: operations["Alerts_CreateStudentAlert"];
  };
  "/students/Alerts/{alertId}": {
    /**
     * Gets a single student alert.
     * @description Gets a single student alert.
     */
    get: operations["Alerts_GetAStudentAlert"];
    /**
     * Replaces a student alert.
     * @description Replaces a student alert.
     */
    put: operations["Alerts_ReplaceStudentAlert"];
    /**
     * Updates tha student alert.
     * @description Updates tha student alert.
     */
    patch: operations["Alerts_UpdateStudentAlert"];
  };
  "/students/PickupContacts": {
    /**
     * Gets a list of pickup contacts.
     * @description Gets a list of pickup contacts.
     */
    get: operations["PickupContacts_GetPickupContacts"];
  };
  "/students/PickupContacts/{pickupContactId}": {
    /**
     * Gets a single pickup contact.
     * @description Gets a single pickup contact.
     */
    get: operations["PickupContacts_GetAPickupContact"];
    /**
     * Replaces a pickup contact.
     * @description Replaces a pickup contact.
     */
    put: operations["PickupContacts_ReplacePickupContact"];
    /**
     * Updates tha pickup contact.
     * @description Updates tha pickup contact.
     */
    patch: operations["PickupContacts_UpdatePickupContact"];
  };
  "/DefinedLists": {
    /**
     * Gets a list of DefinedLists. Support filter/sort by name.
     * @description Gets a list of DefinedLists. Support filter/sort by name.
     */
    get: operations["DefinedLists_GetDefinedListsV1"];
    /**
     * Create DefinedList
     * @description Create DefinedList
     */
    post: operations["DefinedLists_PostDefinedListsV1"];
  };
  "/DefinedLists/{DefinedListsId}": {
    /**
     * Gets DefinedList by id
     * @description Gets DefinedList by id
     */
    get: operations["DefinedLists_GetDefinedListsByIdV1"];
    /**
     * Update DefinedLists by id
     * @description Update DefinedLists by id
     */
    put: operations["DefinedLists_PutDefinedListsByIdV1"];
  };
  "/DefinedLists/{DefinedListId}": {
    /**
     * Partial Update DefinedList by id
     * @description Partial Update DefinedList by id
     */
    patch: operations["DefinedLists_PatchDefinedListsByIdV1"];
  };
  "/students/EnrollmentHistories": {
    /**
     * Lists the enrollment histories.
     * @description Lists the enrollment histories.
     */
    get: operations["EnrollmentHistories_GetEnrollmentHistories"];
    /**
     * Creates the enrollment history.
     * @description Creates the enrollment history.
     */
    post: operations["EnrollmentHistories_CreateEnrollmentHistory"];
  };
  "/students/EnrollmentHistories/{enrollmentHistoryId}": {
    /**
     * Gets the enrollment history.
     * @description Gets the enrollment history.
     */
    get: operations["EnrollmentHistories_GetEnrollmentHistory"];
    /**
     * Replaces the enrollment history.
     * @description Replaces the enrollment history.
     */
    put: operations["EnrollmentHistories_ReplaceEnrollmentHistory"];
    /**
     * Updates the enrollment history.
     * @description Updates the enrollment history.
     */
    patch: operations["EnrollmentHistories_UpdateEnrollmentHistory"];
  };
  "/UserDefinedData": {
    /**
     * Gets a list of userDefinedData. Support filter/sort by GroupId, DataTyp, DataOrder.
     * @description Gets a list of userDefinedData. Support filter/sort by GroupId, DataTyp, DataOrder.
     */
    get: operations["UserDefinedData_GetUserDefinedDataV1"];
    /**
     * Create userDefinedData
     * @description Create userDefinedData
     */
    post: operations["UserDefinedData_PostUserDefinedDataV1"];
  };
  "/UserDefinedData/{userDefinedDataId}": {
    /**
     * Gets userDefinedData by id
     * @description Gets userDefinedData by id
     */
    get: operations["UserDefinedData_GetUserDefinedDataByIdV1"];
    /**
     * Update userDefinedData by id
     * @description Update userDefinedData by id
     */
    put: operations["UserDefinedData_PutUserDefinedDataByIdV1"];
    /**
     * Partial Update userDefinedData by id
     * @description Partial Update userDefinedData by id
     */
    patch: operations["UserDefinedData_PatchUserDefinedDataByIdV1"];
  };
  "/UserDefinedFields": {
    /**
     * Gets a list of userDefinedField. Support filter/sort by GroupId, FieldTyp, FieldOrder.
     * @description Gets a list of userDefinedField. Support filter/sort by GroupId, FieldTyp, FieldOrder.
     */
    get: operations["UserDefinedField_GetUserDefinedFieldV1"];
    /**
     * Create userDefinedField
     * @description Create userDefinedField
     */
    post: operations["UserDefinedField_PostUserDefinedFieldV1"];
  };
  "/UserDefinedFields/{userDefinedFieldId}": {
    /**
     * Gets userDefinedField by id
     * @description Gets userDefinedField by id
     */
    get: operations["UserDefinedField_GetUserDefinedFieldByIdV1"];
    /**
     * Update userDefinedField by id
     * @description Update userDefinedField by id
     */
    put: operations["UserDefinedField_PutUserDefinedFieldByIdV1"];
    /**
     * Partial Update userDefinedField by id
     * @description Partial Update userDefinedField by id
     */
    patch: operations["UserDefinedField_PatchUserDefinedFieldByIdV1"];
  };
  "/UserDefinedGroups": {
    /**
     * Gets a list of userDefinedGroup. Support filter/sort by groupOrder, districtWide.
     * @description Gets a list of userDefinedGroup. Support filter/sort by groupOrder, districtWide.
     */
    get: operations["UserDefinedGroup_GetUserDefinedGroupV1"];
    /**
     * Create userDefinedGroup
     * @description Create userDefinedGroup
     */
    post: operations["UserDefinedGroup_PostUserDefinedGroupV1"];
  };
  "/UserDefinedGroups/{userDefinedGroupId}": {
    /**
     * Gets userDefinedGroup by id
     * @description Gets userDefinedGroup by id
     */
    get: operations["UserDefinedGroup_GetUserDefinedGroupByIdV1"];
    /**
     * Update userDefinedGroup by id
     * @description Update userDefinedGroup by id
     */
    put: operations["UserDefinedGroup_PutUserDefinedGroupByIdV1"];
    /**
     * Partial Update userDefinedGroup by id
     * @description Partial Update userDefinedGroup by id
     */
    patch: operations["UserDefinedGroup_PatchUserDefinedGroupByIdV1"];
  };
  "/UserDefinedGroupSecurity/UserDefinedGroups/{userDefinedGroupId}": {
    /**
     * Gets userDefinedGroupSecurity
     * @description Gets userDefinedGroupSecurity
     */
    get: operations["UserDefinedGroupSecurity_GetUserDefinedGroupSecurityV1"];
    /**
     * Update userDefinedGroupSecurity
     * @description Update userDefinedGroupSecurity
     */
    put: operations["UserDefinedGroupSecurity_PutUserDefinedGroupSecurityV1"];
    /**
     * Partial Update userDefinedGroupSecurity
     * @description Partial Update userDefinedGroupSecurity
     */
    patch: operations["UserDefinedGroupSecurity_PatchUserDefinedGroupSecurityV1"];
  };
  "/UserDefinedGroupSecurity/UserDefinedGroups/{userDefinedGroupId}/SecurityGroups/{securityGroupId}": {
    /**
     * Gets userDefinedGroupSecurity on securityGroup
     * @description Gets userDefinedGroupSecurity on securityGroup
     */
    get: operations["UserDefinedGroupSecurity_GetUserDefinedGroup_SecurityGroupV1"];
    /**
     * Update userDefinedGroupSecurity on securityGroup
     * @description Update userDefinedGroupSecurity on securityGroup
     */
    put: operations["UserDefinedGroupSecurity_PutUserDefinedGroup_SecurityGroupV1"];
  };
  "/students/AdvisingNotes": {
    /**
     * Gets a list of all Advising Notes.
     * @description Gets a list of all Advising Notes.
     */
    get: operations["AdvisingNotes_GetAdvisingNotes"];
    /**
     * Creates the advising note.
     * @description Creates the advising note.
     */
    post: operations["AdvisingNotes_CreateAdvisingNote"];
  };
  "/students/AdvisingNotes/{noteId}": {
    /**
     * Gets an advising note.
     * @description Gets an advising note.
     */
    get: operations["AdvisingNotes_GetAnAdvisingNote"];
    /**
     * Replaces the advising note.
     * @description Replaces the advising note.
     */
    put: operations["AdvisingNotes_ReplaceAdvisingNote"];
    /**
     * Updates the advising note.
     * @description Updates the advising note.
     */
    patch: operations["AdvisingNotes_UpdateAdvisingNote"];
  };
  "/students/Conference": {
    /**
     * List all conferences.
     * @description List all conferences.
     */
    get: operations["Conference_GetConferences"];
    /**
     * Creates the conference.
     * @description Creates the conference.
     */
    post: operations["Conference_CreateConference"];
  };
  "/students/Conference/{conferenceId}": {
    /**
     * Gets a conference.
     * @description Gets a conference.
     */
    get: operations["Conference_GetAConference"];
    /**
     * Replaces the conference.
     * @description Replaces the conference.
     */
    put: operations["Conference_ReplaceConference"];
    /**
     * Updates the conference.
     * @description Updates the conference.
     */
    patch: operations["Conference_UpdateConference"];
  };
  "/Students/Recognition": {
    /**
     * Gets a list of student recognition. Support filter/sort by studentId, yearId.
     * @description Gets a list of student recognition. Support filter/sort by studentId, yearId.
     */
    get: operations["StudentRecognition_GetStudentRecognitionV1"];
    /**
     * Create student recognition
     * @description Create student recognition
     */
    post: operations["StudentRecognition_PostStudentRecognitionV1"];
  };
  "/Students/Recognition/{recognitionId}": {
    /**
     * Gets student recognition by id
     * @description Gets student recognition by id
     */
    get: operations["StudentRecognition_GetStudentRecognitionByIdV1"];
    /**
     * Update student recognition
     * @description Update student recognition
     */
    put: operations["StudentRecognition_PutStudentRecognitionByIdV1"];
    /**
     * Partial Update student recognition
     * @description Partial Update student recognition
     */
    patch: operations["StudentRecognition_PatchStudentRecognitionByIdV1"];
  };
  "/Students/ServiceHours": {
    /**
     * Gets a list of student ServiceHours. Support filter by personId, date.
     * @description Gets a list of student ServiceHours. Support filter by personId, date.
     */
    get: operations["StudentServiceHours_GetStudentServiceHoursV1"];
    /**
     * Create student serviceHours
     * @description Create student serviceHours
     */
    post: operations["StudentServiceHours_PostStudentServiceHoursV1"];
  };
  "/Students/ServiceHours/{serviceHoursId}": {
    /**
     * Gets student serviceHours by id
     * @description Gets student serviceHours by id
     */
    get: operations["StudentServiceHours_GetStudentServiceHoursByIdV1"];
    /**
     * Update student serviceHours
     * @description Update student serviceHours
     */
    put: operations["StudentServiceHours_PutStudentServiceHoursByIdV1"];
    /**
     * Partial Update student serviceHours
     * @description Partial Update student serviceHours
     */
    patch: operations["StudentServiceHours_PatchStudentServiceHoursByIdV1"];
  };
  "/people/BehaviorEvents": {
    /**
     * Gets a list of behavior event records.
     * @description Gets a list of behavior event records.
     */
    get: operations["BehaviorEvents_GetBehaviorEvents"];
    /**
     * Creates a behavior event.
     * @description Creates a behavior event.
     */
    post: operations["BehaviorEvents_CreateBehaviorEvents"];
  };
  "/people/BehaviorEvents/{disciplineId}": {
    /**
     * Gets a behavior event.
     * @description Gets a behavior event.
     */
    get: operations["BehaviorEvents_GetABehaviorEvent"];
    /**
     * Replaces a behavior event.
     * @description Replaces a behavior event.
     */
    put: operations["BehaviorEvents_ReplaceBehaviorEvents"];
    /**
     * Updates the behavior event.
     * @description Updates the behavior event.
     */
    patch: operations["BehaviorEvents_UpdateBehaviorEvents"];
  };
  "/people/Notes": {
    /**
     * List all the notes.
     * @description List all the notes.
     */
    get: operations["Notes_GetNotes"];
  };
  "/people/Notes/{noteId}": {
    /**
     * Gets a note.
     * @description Gets a note.
     */
    get: operations["Notes_GetANote"];
    /**
     * Replaces a note.
     * @description Replaces a note.
     */
    put: operations["Notes_ReplaceANote"];
    /**
     * Updates a note.
     * @description Updates a note.
     */
    patch: operations["Notes_UpdateANote"];
  };
  "/Parents/ServiceHours": {
    /**
     * Gets a list of parent ServiceHours. Support filter by personId, date.
     * @description Gets a list of parent ServiceHours. Support filter by personId, date.
     */
    get: operations["ParentServiceHours_GetParentServiceHoursV1"];
    /**
     * Create parent serviceHours
     * @description Create parent serviceHours
     */
    post: operations["ParentServiceHours_PostParentServiceHoursV1"];
  };
  "/Parents/ServiceHours/{serviceHoursId}": {
    /**
     * Gets parent serviceHours by id
     * @description Gets parent serviceHours by id
     */
    get: operations["ParentServiceHours_GetParentServiceHoursByIdV1"];
    /**
     * Update parent serviceHours
     * @description Update parent serviceHours
     */
    put: operations["ParentServiceHours_PutParentServiceHoursByIdV1"];
    /**
     * Partial Update parent serviceHours
     * @description Partial Update parent serviceHours
     */
    patch: operations["ParentServiceHours_PatchParentServiceHoursByIdV1"];
  };
  "/staff/StaffObservations": {
    /**
     * Gets a list of the observations.
     * @description Gets a list of the observations.
     */
    get: operations["StaffObservations_GetStaffObservations"];
    /**
     * Creates the staff observation.
     * @description Creates the staff observation.
     */
    post: operations["StaffObservations_CreateStaffObservation"];
  };
  "/staff/StaffObservations/{observationId}": {
    /**
     * Gets a staff observation.
     * @description Gets a staff observation.
     */
    get: operations["StaffObservations_GetAStaffObservation"];
    /**
     * Replaces the staff observation.
     * @description Replaces the staff observation.
     */
    put: operations["StaffObservations_ReplaceStaffObservation"];
    /**
     * Updates the staff observation.
     * @description Updates the staff observation.
     */
    patch: operations["StaffObservations_UpdateStaffObservation"];
  };
  "/students/AlertApplication": {
    /**
     * Gets a list of student alerts.
     * @description Gets a list of student alerts.
     */
    get: operations["AlertApplication_GetStudentAlertApplications"];
    /**
     * Creates a student alert application.
     * @description Creates a student alert application.
     */
    post: operations["AlertApplication_CreateStudentAlertApplication"];
  };
  "/students/AlertApplication/alert/{alertId}/application/{applicationId}": {
    /**
     * Gets a student alert application.
     * @description Gets a student alert application.
     */
    get: operations["AlertApplication_GetAStudentAlertApplication"];
    /**
     * Replaces a student alert application.
     * @description Replaces a student alert application.
     */
    put: operations["AlertApplication_ReplaceStudentAlertApplication"];
    /**
     * Updates tha student alert application.
     * @description Updates tha student alert application.
     */
    patch: operations["AlertApplication_UpdateStudentAlertApplication"];
  };
  "/interests/Categories": {
    /**
     * Gets a list of interest categories.
     * @description Gets a list of interest categories.
     */
    get: operations["Categories_GetAllInterestCategories"];
    /**
     * Creates a interest category.
     * @description Creates a interest category.
     */
    post: operations["Categories_CreateInterestCategory"];
  };
  "/interests/Categories/{interestCategoryId}": {
    /**
     * Gets a single interest category.
     * @description Gets a single interest category.
     */
    get: operations["Categories_GetInterestCategory"];
    /**
     * Replaces a interest category.
     * @description Replaces a interest category.
     */
    put: operations["Categories_ReplaceInterestCategory"];
    /**
     * Updates tha interest category.
     * @description Updates tha interest category.
     */
    patch: operations["Categories_UpdateInterestCategory"];
  };
  "/interests/Items": {
    /**
     * Gets a list of interest items.
     * @description Gets a list of interest items.
     */
    get: operations["Items_GetAllInterestItems"];
    /**
     * Creates a interest items.
     * @description Creates a interest items.
     */
    post: operations["Items_CreateInterestItems"];
  };
  "/interests/Items/{interestItemsId}": {
    /**
     * Gets a single interest items.
     * @description Gets a single interest items.
     */
    get: operations["Items_GetInterestItems"];
    /**
     * Replaces a interest items.
     * @description Replaces a interest items.
     */
    put: operations["Items_ReplaceInterestItems"];
    /**
     * Updates tha interest items.
     * @description Updates tha interest items.
     */
    patch: operations["Items_UpdateInterestItems"];
  };
  "/families": {
    /**
     * Gets all families.
     * @description Gets all families.
     */
    get: operations["Family_GetAllFamilies"];
    /**
     * Creates the family.
     * @description Creates the family.
     */
    post: operations["Family_CreateFamily"];
  };
  "/families/{familyId}": {
    /**
     * Gets the family.
     * @description Gets the family.
     */
    get: operations["Family_GetFamily"];
    /**
     * Replaces the family.
     * @description Replaces the family.
     */
    put: operations["Family_ReplaceFamily"];
    /**
     * Updates the family.
     * @description Updates the family.
     */
    patch: operations["Family_UpdateFamily"];
  };
  "/Students/PreProgression": {
    /**
     * Gets a list of student progression
     * @description Gets a list of student progression
     */
    get: operations["StudentPreProgression_GetStudentProgressionListV1"];
  };
  "/Students/{personStudentId}/PreProgression": {
    /**
     * Gets student progression by id
     * @description Gets student progression by id
     */
    get: operations["StudentPreProgression_GetStudentProgressionV1"];
  };
  "/SchoolYears": {
    /**
     * Gets a list of SchoolYears. Support filter/sort by yearId, yearName, firstDay, lastDay.
     * @description Gets a list of SchoolYears. Support filter/sort by yearId, yearName, firstDay, lastDay.
     */
    get: operations["SchoolYear_GetSchoolYearV1"];
    /**
     * Create SchoolYear
     * @description Create SchoolYear
     */
    post: operations["SchoolYear_PostSchoolYearV1"];
  };
  "/SchoolYears/{schoolYearId}": {
    /**
     * Gets SchoolYear by id
     * @description Gets SchoolYear by id
     */
    get: operations["SchoolYear_GetSchoolYearByIdV1"];
    /**
     * Update SchoolYear by id
     * @description Update SchoolYear by id
     */
    put: operations["SchoolYear_PutSchoolYearByIdV1"];
    /**
     * Partial Update SchoolYear by id
     * @description Partial Update SchoolYear by id
     */
    patch: operations["SchoolYear_PatchSchoolYearByIdV1"];
  };
  "/Classes": {
    /**
     * List all classes.
     * @description List all classes.
     */
    get: operations["Classes_GetAllClasses"];
    /**
     * Creates a class.
     * @description Creates a class.
     */
    post: operations["Classes_CreateAClass"];
  };
  "/Classes/{classId}": {
    /**
     * Gets a class.
     * @description Gets a class.
     */
    get: operations["Classes_GetAClass"];
    /**
     * Replaces a class.
     * @description Replaces a class.
     */
    put: operations["Classes_ReplaceAClass"];
    /**
     * Updates a class.
     * @description Updates a class.
     */
    patch: operations["Classes_UpdateAClass"];
  };
  "/Classes/schoolYears/{yearId}": {
    /**
     * Lists the classes by year.
     * @description Lists the classes by year.
     */
    get: operations["Classes_GetClassesByYear"];
  };
  "/Classes/students/{studentId}": {
    /**
     * Lists the classes by student.
     * @description Lists the classes by student.
     */
    get: operations["Classes_GetClassesByStudent"];
  };
  "/Courses": {
    /**
     * List all the courses.
     * @description List all the courses.
     */
    get: operations["Courses_GetCourses"];
    /**
     * Creates a course.
     * @description Creates a course.
     */
    post: operations["Courses_CreateCourse"];
  };
  "/Courses/{courseId}": {
    /**
     * Gets a course.
     * @description Gets a course.
     */
    get: operations["Courses_GetACourse"];
    /**
     * Replaces a course.
     * @description Replaces a course.
     */
    put: operations["Courses_ReplaceACourse"];
    /**
     * Updates a Course.
     * @description Updates a Course.
     */
    patch: operations["Courses_UpdateACourse"];
  };
  "/academics/Enrollments": {
    /**
     * Lists all the enrollments.
     * @description Lists all the enrollments.
     */
    get: operations["Enrollments_GetEnrollments"];
    /**
     * Creates an enrollment.
     * @description Creates an enrollment.
     */
    post: operations["Enrollments_CreateAnEnrollment"];
  };
  "/academics/Enrollments/students/{studentId}/classes/{classId}": {
    /**
     * Gets an enrollment.
     * @description Gets an enrollment.
     */
    get: operations["Enrollments_GetAnEnrollment"];
    /**
     * Replaces an enrollment.
     * @description Replaces an enrollment.
     */
    put: operations["Enrollments_ReplaceAnEnrollment"];
    /**
     * Updates an enrollment.
     * @description Updates an enrollment.
     */
    patch: operations["Enrollments_UpdateAnEnrollment"];
  };
  "/SchoolConfigurations": {
    /**
     * List all the school configs.
     * @description List all the school configs.
     */
    get: operations["SchoolConfigurations_GetSchoolConfigs"];
  };
  "/SchoolConfigurations/{schoolId}": {
    /**
     * Gets a school configuration.
     * @description Gets a school configuration.
     */
    get: operations["SchoolConfigurations_GetASchoolConfig"];
    /**
     * Replaces a school configuration.
     * @description Replaces a school configuration.
     */
    put: operations["SchoolConfigurations_ReplaceASchoolConfig"];
    /**
     * Updates a school configuration.
     * @description Updates a school configuration.
     */
    patch: operations["SchoolConfigurations_UpdateASchoolConfig"];
  };
  "/schools/{schoolId}/SchoolTerms": {
    /**
     * Gets the school terms.
     * @description Gets the school terms.
     */
    get: operations["SchoolTerms_GetSchoolTerms"];
  };
  "/SchoolTerms/{schoolTermId}": {
    /**
     * Gets a school term.
     * @description Gets a school term.
     */
    get: operations["SchoolTerms_GetASchoolTerm"];
    /**
     * Replaces the school term.
     * @description Replaces the school term.
     */
    put: operations["SchoolTerms_ReplaceSchoolTerm"];
    /**
     * Updates the school term.
     * @description Updates the school term.
     */
    patch: operations["SchoolTerms_UpdateSchoolTerm"];
  };
  "/SchoolTerms": {
    /**
     * Creates the school term.
     * @description Creates the school term.
     */
    post: operations["SchoolTerms_CreateSchoolTerm"];
  };
  "/people/Staff": {
    /**
     * Lists all staff.
     * @description Lists all staff.
     */
    get: operations["Staff_GetStaff"];
    /**
     * Creates a staff member.
     * @description Creates a staff member.
     */
    post: operations["Staff_CreateAStaffMember"];
  };
  "/people/Staff/{staffId}": {
    /**
     * Gets a staff member.
     * @description Gets a staff member.
     */
    get: operations["Staff_GetAStaffMember"];
    /**
     * Replaces a staff member.
     * @description Replaces a staff member.
     */
    put: operations["Staff_ReplaceAStaffMember"];
    /**
     * Updates a staff member.
     * @description Updates a staff member.
     */
    patch: operations["Staff_UpdateAStaffMember"];
  };
  "/assignments/classes/{classId}/terms/{termId}": {
    /**
     * Gets a list of Assignments by Class. Support filter/sort by yearId, yearName, firstDay, lastDay.
     * @description Gets a list of Assignments by Class. Support filter/sort by yearId, yearName, firstDay, lastDay.
     */
    get: operations["Assignment_GetAssignmentByClassV1"];
  };
  "/assignments/{sisAssignmentId}": {
    /**
     * Gets Assignment by id
     * @description Gets Assignment by id
     */
    get: operations["Assignment_GetAssignmentByIdV1"];
    /**
     * Patches an assignment by id
     * @description Patches an assignment by id
     */
    patch: operations["Assignment_PatchAssignment"];
  };
  "/assignment/categories/classes/{classId}": {
    /**
     * Gets a list of Categories by Class. Support filter/sort by yearId, yearName, firstDay, lastDay.
     * @description Gets a list of Categories by Class. Support filter/sort by yearId, yearName, firstDay, lastDay.
     */
    get: operations["Categories_GetCategoriesByClassV1"];
  };
  "/assignment/categories/{sisCategoryId}": {
    /**
     * Gets Category by id
     * @description Gets Category by id
     */
    get: operations["Categories_GetCategoryByIdV1"];
    /**
     * Patches an assignment category by id
     * @description Patches an assignment category by id
     */
    patch: operations["Categories_PatchCategory"];
  };
  "/assignment/grades/classes/{classId}": {
    /**
     * Gets a list of Grades by Class. Support filter/sort by yearId, yearName, firstDay, lastDay.
     * @description Gets a list of Grades by Class. Support filter/sort by yearId, yearName, firstDay, lastDay.
     */
    get: operations["Grades_GetGradesByClassV1"];
  };
  "/assignment/grades/{sisGradeId}": {
    /**
     * Gets Grades by id
     * @description Gets Grades by id
     */
    get: operations["Grades_GetGradesByIdV1"];
    /**
     * Patches an assignment grade by id
     * @description Patches an assignment grade by id
     */
    patch: operations["Grades_PatchGrade"];
  };
  "/Classes/v2": {
    /**
     * List all classes.
     * @description List all classes.
     */
    get: operations["ClassesNew_GetAllClassesV2"];
    /**
     * Creates a class.
     * @description Creates a class.
     */
    post: operations["ClassesNew_CreateAClassV2"];
  };
  "/Classes/v2/{classId}": {
    /**
     * Gets a class.
     * @description Gets a class.
     */
    get: operations["ClassesNew_GetAClassV2"];
    /**
     * Replaces a class.
     * @description Replaces a class.
     */
    put: operations["ClassesNew_ReplaceAClassV2"];
    /**
     * Updates a class.
     * @description Updates a class.
     */
    patch: operations["ClassesNew_UpdateAClassV2"];
  };
  "/Classes/v2/schoolYears/{yearId}": {
    /**
     * Lists the classes by year.
     * @description Lists the classes by year.
     */
    get: operations["ClassesNew_GetClassesByYearV2"];
  };
  "/Classes/v2/students/{studentId}": {
    /**
     * Lists the classes by student.
     * @description Lists the classes by student.
     */
    get: operations["ClassesNew_GetClassesByStudentV2"];
  };
  "/SchoolTerms/v2/schools/{schoolId}": {
    /**
     * Gets the school terms.
     * @description Gets the school terms.
     */
    get: operations["SchoolTermsNew_GetSchoolTermsV2"];
  };
  "/SchoolTerms/v2/{schoolTermId}": {
    /**
     * Gets a school term.
     * @description Gets a school term.
     */
    get: operations["SchoolTermsNew_GetASchoolTermV2"];
    /**
     * Replaces the school term.
     * @description Replaces the school term.
     */
    put: operations["SchoolTermsNew_ReplaceSchoolTermV2"];
    /**
     * Updates the school term.
     * @description Updates the school term.
     */
    patch: operations["SchoolTermsNew_UpdateSchoolTermV2"];
  };
  "/SchoolTerms/v2": {
    /**
     * Creates the school term.
     * @description Creates the school term.
     */
    post: operations["SchoolTermsNew_CreateSchoolTermV2"];
  };
  "/assignments": {
    /**
     * Creates an assignment
     * @description Creates an assignment
     */
    post: operations["Assignment_CreateAssignment"];
  };
  "/assignment/categories": {
    /**
     * Creates an assignment category
     * @description Creates an assignment category
     */
    post: operations["Categories_CreateCategory"];
  };
  "/assignment/codeTranslations/classes/{classId}": {
    /**
     * Gets a list of Class Assignment Grade Code Translations by Class. Support filter/sort by letterCode, percent, statusCode.
     * @description Gets a list of Class Assignment Grade Code Translations by Class. Support filter/sort by letterCode, percent, statusCode.
     */
    get: operations["CodeTranslation_GetCodeTranslationsByClassId"];
  };
  "/assignment/codeTranslations/{id}": {
    /**
     * Gets Class Assignment Grade Code Translation by id
     * @description Gets Class Assignment Grade Code Translation by id
     */
    get: operations["CodeTranslation_GetCodeTranslationByIdV1"];
    /**
     * Patches a class assignment grade code translation by id
     * @description Patches a class assignment grade code translation by id
     */
    patch: operations["CodeTranslation_PatchCodeTranslation"];
  };
  "/assignment/codeTranslations": {
    /**
     * Creates a class assignment grade code translation.
     * @description Creates a class assignment grade code translation.
     */
    post: operations["CodeTranslation_CreateCodeTranslation"];
  };
  "/assignment/grades": {
    /**
     * Creates an assignment grade
     * @description Creates an assignment grade
     */
    post: operations["Grades_CreateGrade"];
  };
  "/People/{personId}/ProfilePicture": {
    /**
     * Get a person's picture
     * @description Get a person's picture
     */
    get: operations["People_GetProfilePicture"];
  };
  "/Admissions/InquiryForm/requests/{requestId}": {
    /**
     * Gets an inquiry form by request ID.
     * @description Gets an inquiry form by request ID.
     */
    get: operations["InquiryForm_GetInquiryFormByRequestIdV1"];
  };
  "/Admissions/InquiryForm/members/{memberId}": {
    /**
     * Creates an inquiry form.
     * @description Creates an inquiry form.
     */
    post: operations["InquiryForm_CreateInquiryFormV1"];
  };
  "/Admissions/InquiryForm/students/{studentId}": {
    /**
     * Updates an inquiry form.
     * @description Updates an inquiry form.
     */
    put: operations["InquiryForm_UpdateInquiryFormV1"];
  };
  "/Admissions/InquiryForm/requests": {
    /**
     * Lists all inquiry forms.
     * @description Lists all inquiry forms.
     */
    get: operations["InquiryForm_GetInquiryFormsV1"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfInquiryFormModel: {
      results?: components["schemas"]["InquiryFormModel"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    /**
     * @example {
     *   "requestId": 1,
     *   "studentId": 1,
     *   "schoolCode": "String",
     *   "schoolOptions": [],
     *   "standard": [],
     *   "custom": [],
     *   "interestCategories": []
     * }
     */
    InquiryFormModel: {
      /** Format: int32 */
      requestId?: number;
      /** Format: int32 */
      studentId?: number;
      schoolCode?: string;
      schoolOptions?: string[];
      standard?: components["schemas"]["StandardQuestionAnswerModel"][];
      custom?: components["schemas"]["CustomQuestionAnswerModel"][];
      interestCategories?: components["schemas"]["InterestCategoryModel"][];
    };
    /**
     * @example {
     *   "question": {},
     *   "answer": {}
     * }
     */
    StandardQuestionAnswerModel: {
      question?: components["schemas"]["StandardQuestionModel"];
      answer?: components["schemas"]["StandardAnswerModel"];
    };
    StandardQuestionModel: components["schemas"]["QuestionBaseModel"] & {
      id: components["schemas"]["QuestionType"];
    };
    /** @enum {integer} */
    QuestionType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37;
    /**
     * @example {
     *   "label": "String",
     *   "columns": 1,
     *   "questionAnswerType": {},
     *   "requirementType": {},
     *   "options": []
     * }
     */
    QuestionBaseModel: {
      label?: string;
      /** Format: int32 */
      columns?: number;
      questionAnswerType: components["schemas"]["QuestionAnswerType"];
      requirementType: components["schemas"]["FieldRequirementType"];
      options?: components["schemas"]["ListOptionModel"][];
    };
    /** @enum {integer} */
    QuestionAnswerType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
    /** @enum {integer} */
    FieldRequirementType: 0 | 1 | 2 | 3;
    /**
     * @example {
     *   "display": "String",
     *   "keyValue": 1,
     *   "textValue": "String",
     *   "sortOrder": 1,
     *   "filter": "String"
     * }
     */
    ListOptionModel: {
      display?: string;
      /** Format: int32 */
      keyValue?: number;
      textValue?: string;
      /** Format: int32 */
      sortOrder?: number;
      filter?: string;
    };
    StandardAnswerModel: components["schemas"]["AnswerBaseModel"] & {
      id: components["schemas"]["QuestionType"];
    };
    /**
     * @example {
     *   "boolValue": false,
     *   "textValue": "String",
     *   "dateValue": "2020-01-01T00:00:00.0000000+00:00",
     *   "intValue": 1,
     *   "listValues": []
     * }
     */
    AnswerBaseModel: {
      boolValue?: boolean;
      textValue?: string;
      /** Format: date-time */
      dateValue?: string;
      /** Format: int32 */
      intValue?: number;
      listValues?: components["schemas"]["ListValueModel"][];
    };
    /**
     * @example {
     *   "keyValue": 1,
     *   "textValue": "String"
     * }
     */
    ListValueModel: {
      /** Format: int32 */
      keyValue?: number;
      textValue?: string;
    };
    /**
     * @example {
     *   "question": {},
     *   "answer": {}
     * }
     */
    CustomQuestionAnswerModel: {
      question?: components["schemas"]["CustomQuestionModel"];
      answer?: components["schemas"]["CustomAnswerModel"];
    };
    CustomQuestionModel: components["schemas"]["QuestionBaseModel"] & {
      /** Format: int32 */
      id: number;
      fullText?: string;
      requestLevel: components["schemas"]["RequestLevelType"];
      /** Format: int32 */
      sortOrder: number;
      /** Format: int32 */
      eventId?: number;
      isConditional: boolean;
      conditionalRequirement?: components["schemas"]["ConditionalRequirementModel"];
    };
    /** @enum {integer} */
    RequestLevelType: 0 | 1 | 2;
    /**
     * @example {
     *   "triggerQuestionId": 1,
     *   "options": []
     * }
     */
    ConditionalRequirementModel: {
      /** Format: int32 */
      triggerQuestionId?: number;
      options?: number[];
    };
    CustomAnswerModel: components["schemas"]["AnswerBaseModel"] & {
      /** Format: int32 */
      questionId: number;
      originalAnswerLabel?: string;
    };
    /**
     * @example {
     *   "id": 1,
     *   "description": "String",
     *   "sortOrder": 1,
     *   "interestIds": []
     * }
     */
    InterestCategoryModel: {
      /** Format: int32 */
      id: number;
      description?: string;
      /** Format: int32 */
      sortOrder: number;
      interestIds?: number[];
    };
    /**
     * @example {
     *   "type": "String",
     *   "title": "String",
     *   "status": 1,
     *   "detail": "String",
     *   "instance": "String",
     *   "extensions": {}
     * }
     */
    ProblemDetails: {
      type?: string;
      title?: string;
      /** Format: int32 */
      status?: number;
      detail?: string;
      instance?: string;
      extensions: {
        [key: string]: unknown;
      };
      [key: string]: unknown;
    };
    /**
     * @example {
     *   "error": {
     *     "code": "String",
     *     "message": "String",
     *     "target": "String",
     *     "details": [],
     *     "innererror": {}
     *   }
     * }
     */
    ErrorResponse: {
      error: components["schemas"]["Error"];
    };
    /**
     * @example {
     *   "code": "String",
     *   "message": "String",
     *   "target": "String",
     *   "details": [],
     *   "innererror": {}
     * }
     */
    Error: {
      code: string;
      message: string;
      target?: string;
      details?: components["schemas"]["Error"][];
      innererror?: components["schemas"]["Error"];
    };
    /**
     * @example {
     *   "requestId": 1,
     *   "studentId": 1
     * }
     */
    CreateInquiryFormCommandOut: {
      /**
       * Format: int32
       * @description The request identifier.
       */
      requestId: number;
      /**
       * Format: int32
       * @description The student identifier.
       */
      studentId: number;
    };
    /**
     * @example {
     *   "standardAnswers": [],
     *   "customAnswers": []
     * }
     */
    InquiryFormEditModel: {
      standardAnswers?: components["schemas"]["StandardAnswerModel"][];
      customAnswers?: components["schemas"]["CustomAnswerModel"][];
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfDefinedListsModel: {
      results?: components["schemas"]["DefinedListsModel"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    DefinedListsModel: components["schemas"]["DefinedListsRequest"] & {
      /**
       * Format: int32
       * @description Gets or sets the definedList identifier.
       */
      definedListId: number;
      /** @description Gets or sets the school code. */
      schoolCode?: string;
    };
    /**
     * @description DefinedLists Request.
     * @example {
     *   "type": "String",
     *   "name": "String"
     * }
     */
    DefinedListsRequest: {
      /** @description Gets or sets the type of the definedList. */
      type?: string;
      /** @description Gets or sets the name of the definedList. */
      name?: string;
    };
    /** @enum {integer} */
    UserDefinedListType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | -1;
    /**
     * @example {
     *   "path": "String",
     *   "op": "String",
     *   "from": "String",
     *   "value": {}
     * }
     */
    Operation: {
      path?: string;
      op?: string;
      from?: string;
      value?: unknown;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfEnrollmentHistoryVmOut: {
      results?: components["schemas"]["EnrollmentHistoryVmOut"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    EnrollmentHistoryVmOut: components["schemas"]["EnrollmentHistoryVmIn"] & {
      /**
       * Format: int32
       * @description Gets or sets the enrollment history identifier.
       */
      enrollmentHistoryId: number;
    };
    /**
     * @example {
     *   "beginDate": "2020-01-01T00:00:00.0000000+00:00",
     *   "endDate": "2020-01-01T00:00:00.0000000+00:00",
     *   "gradeLevel": "String",
     *   "note": "String",
     *   "schoolCode": "String",
     *   "status": "String",
     *   "studentId": 1,
     *   "yearId": 1
     * }
     */
    EnrollmentHistoryVmIn: {
      /**
       * Format: date-time
       * @description Gets or sets the begin enrollment date.
       */
      beginDate?: string;
      /**
       * Format: date-time
       * @description Gets or sets the end enrollment date.
       */
      endDate?: string;
      /** @description Gets or sets the grade level. */
      gradeLevel?: string;
      /** @description Gets or sets the note. */
      note?: string;
      /** @description Gets or sets the school code. */
      schoolCode?: string;
      /** @description Gets or sets the status. */
      status?: string;
      /**
       * Format: int32
       * @description Gets or sets the student identifier.
       */
      studentId: number;
      /**
       * Format: int32
       * @description Gets or sets the year identifier.
       */
      yearId?: number;
    };
    /**
     * @example {
     *   "id": "String",
     *   "name": "String",
     *   "apiHash": "String",
     *   "subscriptionId": "String",
     *   "districtId": 1,
     *   "schoolId": 1,
     *   "scopes": "String",
     *   "schoolName": "String",
     *   "districtName": "String"
     * }
     */
    ExternalApiApimDocumentDto: {
      id?: string;
      name?: string;
      apiHash?: string;
      subscriptionId?: string;
      /** Format: int32 */
      districtId: number;
      /** Format: int32 */
      schoolId: number;
      scopes?: string;
      schoolName?: string;
      districtName?: string;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfUserDefinedDataModel: {
      results?: components["schemas"]["UserDefinedDataModel"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    UserDefinedDataModel: components["schemas"]["UserDefinedDataRequest"] & {
      /**
       * Format: int32
       * @description Gets or sets the data identifier.
       */
      dataId: number;
    };
    /**
     * @description UserDefined Data Request.
     * @example {
     *   "fieldId": 1,
     *   "linkedId": 1,
     *   "data": "String"
     * }
     */
    UserDefinedDataRequest: {
      /**
       * Format: int32
       * @description Gets or sets the field identifier.
       */
      fieldId: number;
      /**
       * Format: int32
       * @description Gets or sets the linked entity identifier.
       *                eg: personId / familyId / classId / courseId / configSchoolId / InquiryId
       *                Exact usage will depend on the group type.
       */
      linkedId: number;
      /** @description Gets or sets the data. */
      data?: string;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfUserDefinedFieldModel: {
      results?: components["schemas"]["UserDefinedFieldModel"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    UserDefinedFieldModel: components["schemas"]["UserDefinedFieldRequest"] & {
      /**
       * Format: int32
       * @description Gets or sets the field identifier.
       */
      fieldId: number;
    };
    /**
     * @description UserDefined Field Request.
     * @example {
     *   "groupId": 1,
     *   "fieldName": "String",
     *   "fieldType": 1,
     *   "fieldOrder": 1,
     *   "listItems": []
     * }
     */
    UserDefinedFieldRequest: {
      /**
       * Format: int32
       * @description Gets or sets the group identifier.
       */
      groupId?: number;
      /** @description Gets or sets the name of the field. */
      fieldName?: string;
      /**
       * Format: int32
       * @description Gets or sets the type of the field.
       */
      fieldType?: number;
      /**
       * Format: int32
       * @description Gets or sets the field order.
       */
      fieldOrder?: number;
      /** @description Gets or sets the list items, used with the Defined List data type. */
      listItems?: string[];
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfUserDefinedGroupModel: {
      results?: components["schemas"]["UserDefinedGroupModel"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    UserDefinedGroupModel: components["schemas"]["UserDefinedGroupRequest"] & {
      /**
       * Format: int32
       * @description Gets or sets the group identifier.
       */
      groupId: number;
      /** @description Gets or sets the school code. */
      schoolCode?: string;
      /** @description Gets or sets the field list. */
      fieldList?: components["schemas"]["UserDefinedFieldModel"][];
      /**
       * Format: int32
       * @description Gets or sets the security level. 2= modify, 1=view, 0/no record = none
       */
      securityLevel?: number;
    };
    /**
     * @description UserDefined Group Request.
     * @example {
     *   "groupType": "String",
     *   "groupName": "String",
     *   "groupOrder": 1,
     *   "districtWide": false
     * }
     */
    UserDefinedGroupRequest: {
      /**
       * @description Gets or sets the type of the group.
       *             Examples: 'CLASS', 'COURSE', 'FAMILY', 'MEDICAL', 'NSI' (New Student Inquiry),
       *             'PARENT', 'SCHOOL', 'STAFF', 'STUDENT'
       */
      groupType?: string;
      /** @description Gets or sets the name of the group. */
      groupName?: string;
      /**
       * Format: int32
       * @description Gets or sets the group order.
       */
      groupOrder?: number;
      /** @description Gets or sets a value indicating whether the UD group can be used from all schools in the district. [district wide]. */
      districtWide?: boolean;
    };
    /** @enum {integer} */
    UserDefinedGroupType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
    /**
     * @description UserDefined Group Security.
     * @example {
     *   "canEveryoneUse": false,
     *   "group": [],
     *   "person": []
     * }
     */
    UserDefinedGroupSecurityModel: {
      /**
       * @description Gets or sets a value indicating whether this instance can everyone use.
       *               If true, ignore the values from the Group and Person lists. (they don't matter in that case)
       */
      canEveryoneUse: boolean;
      /** @description Gets or sets the group. */
      group?: components["schemas"]["UserDefinedGroupSecurityItemModel"][];
      /** @description Gets or sets the person. */
      person?: components["schemas"]["UserDefinedGroupSecurityItemModel"][];
    };
    /**
     * @description UserDefined Group Security Item.
     * @example {
     *   "id": 1,
     *   "securityLevel": 1
     * }
     */
    UserDefinedGroupSecurityItemModel: {
      /**
       * Format: int32
       * @description Gets or sets the identifier, personId or securityGroupId
       */
      id: number;
      /**
       * Format: int32
       * @description Gets or sets the security level. 2= modify, 1=view, 0/no record = none
       */
      securityLevel: number;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfAdvisingNoteVmOut: {
      results?: components["schemas"]["AdvisingNoteVmOut"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    AdvisingNoteVmOut: components["schemas"]["AdvisingNoteVmIn"] & {
      /**
       * Format: int32
       * @description Gets or sets the note identifier.
       */
      noteId: number;
    };
    /**
     * @example {
     *   "note": "String",
     *   "date": "2020-01-01T00:00:00.0000000+00:00",
     *   "studentId": 1,
     *   "modifiedBy": 1,
     *   "modifiedDate": "2020-01-01T00:00:00.0000000+00:00"
     * }
     */
    AdvisingNoteVmIn: {
      note?: string;
      /**
       * Format: date-time
       * @description Gets or sets the date.
       */
      date?: string;
      /**
       * Format: int32
       * @description Gets or sets the student identifier.
       */
      studentId?: number;
      /**
       * Format: int32
       * @description Gets or sets the modified by.
       */
      modifiedBy?: number;
      /**
       * Format: date-time
       * @description Gets or sets the modified date.
       */
      modifiedDate?: string;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfConferenceVmOut: {
      results?: components["schemas"]["ConferenceVmOut"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    ConferenceVmOut: components["schemas"]["ConferenceVmIn"] & {
      /**
       * Format: int32
       * @description Gets or sets the conference identifier.
       */
      conferenceId: number;
    };
    /**
     * @example {
     *   "date": "2020-01-01T00:00:00.0000000+00:00",
     *   "studentId": 1,
     *   "reason": "String",
     *   "problem": "String",
     *   "staffID": 1,
     *   "subject": "String",
     *   "recommendation": "String",
     *   "parent": "String",
     *   "location": {},
     *   "modifiedBy": 1,
     *   "modifiedDate": "2020-01-01T00:00:00.0000000+00:00",
     *   "reason1": false,
     *   "reason2": false,
     *   "reason3": false,
     *   "problem1": false,
     *   "problem2": false,
     *   "problem3": false,
     *   "problem4": false,
     *   "problem5": false,
     *   "problem6": false,
     *   "problem7": false,
     *   "problem8": false,
     *   "problem9": false,
     *   "problem10": false
     * }
     */
    ConferenceVmIn: {
      /**
       * Format: date-time
       * @description Gets or sets the date.
       */
      date?: string;
      /**
       * Format: int32
       * @description Gets or sets the student identifier.
       */
      studentId?: number;
      /** @description Gets or sets the reason note. */
      reason?: string;
      /** @description Gets or sets the observation details note. */
      problem?: string;
      /**
       * Format: int32
       * @description Gets or sets the staff that reported the conference.
       */
      staffID?: number;
      /** @description Gets or sets the subject. */
      subject?: string;
      /** @description Gets or sets the recommendation. */
      recommendation?: string;
      /** @description Gets or sets the parent's reaction/comment. */
      parent?: string;
      /**
       * @description Gets or sets the location.
       * Null none
       * -1 None
       *  0 Phone Conversation
       *  1 In-Person Conference
       *  2 Email/Mail
       */
      location?: components["schemas"]["ConferenceLocationType"];
      /**
       * Format: int32
       * @description Gets or sets the modified by.
       */
      modifiedBy?: number;
      /**
       * Format: date-time
       * @description Gets or sets the modified date.
       */
      modifiedDate?: string;
      /** @description Gets or sets a value indicating whether reason1 (Academic) is true for the student. */
      reason1?: boolean;
      /** @description Gets or sets a value indicating whether reason2 (Conduct) is true for the student. */
      reason2?: boolean;
      /** @description Gets or sets a value indicating whether reason3 (Other - ReasonNote) is true for the student. */
      reason3?: boolean;
      /**
       * @description Gets or sets a value indicating whether problem1 is true for the student.
       * The reasons come from the defined list P/T Conference - Problems
       */
      problem1?: boolean;
      /**
       * @description Gets or sets a value indicating whether problem2 is true for the student.
       * The reasons come from the defined list P/T Conference - Problems
       */
      problem2?: boolean;
      /**
       * @description Gets or sets a value indicating whether problem3 is true for the student.
       * The reasons come from the defined list P/T Conference - Problems
       */
      problem3?: boolean;
      /**
       * @description Gets or sets a value indicating whether problem4 is true for the student.
       * The reasons come from the defined list P/T Conference - Problems
       */
      problem4?: boolean;
      /**
       * @description Gets or sets a value indicating whether problem5 is true for the student.
       * The reasons come from the defined list P/T Conference - Problems
       */
      problem5?: boolean;
      /**
       * @description Gets or sets a value indicating whether problem6 is true for the student.
       * The reasons come from the defined list P/T Conference - Problems
       */
      problem6?: boolean;
      /**
       * @description Gets or sets a value indicating whether problem7 is true for the student.
       * The reasons come from the defined list P/T Conference - Problems
       */
      problem7?: boolean;
      /**
       * @description Gets or sets a value indicating whether problem8 is true for the student.
       * The reasons come from the defined list P/T Conference - Problems
       */
      problem8?: boolean;
      /**
       * @description Gets or sets a value indicating whether problem9 is true for the student.
       * The reasons come from the defined list P/T Conference - Problems
       */
      problem9?: boolean;
      /**
       * @description Gets or sets a value indicating whether problem10 is true for the student.
       * The reasons come from the defined list P/T Conference - Problems
       */
      problem10?: boolean;
    };
    /** @enum {integer} */
    ConferenceLocationType: 0 | 1 | 2 | -1;
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfHonorsVmOut: {
      results?: components["schemas"]["HonorsVmOut"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    HonorsVmOut: components["schemas"]["HonorsVmIn"] & {
      /**
       * Format: int32
       * @description Gets or sets the automatic honor identifier.
       */
      honorId: number;
    };
    /**
     * @description ViewModel for Honors
     * @example {
     *   "calcMethod": "String",
     *   "gradeLevel": "String",
     *   "honorName": "String",
     *   "honorRollId": 1,
     *   "maxClass": 1,
     *   "minAvg": 1,
     *   "minClass": 1,
     *   "minCredits": 1,
     *   "modifiedBy": 1,
     *   "modifiedDate": "2020-01-01T00:00:00.0000000+00:00",
     *   "schoolCode": "String",
     *   "sequence": 1,
     *   "timeFrame": 1
     * }
     */
    HonorsVmIn: {
      /**
       * @description Gets or sets the calculate method.
       * Known Values:
       * "SUMMARYAVG" - Use the Credit Weighted overall average of the student for this Honor.
       * "SUMMARYGPA" - Use the Credit Weighted overall GPA of the student for this Honor.
       * "INDAVG" - Look at each individual class average. (no grades under specific value)
       * "INDGPA" - Look at each individual class GPA. (no grades under a specific value)
       * Note: the GPA options are also used for UPGA honors.
       */
      calcMethod?: string;
      /**
       * @description Gets or sets the grade level;
       * restricted by Gradelevel in Configschool
       */
      gradeLevel?: string;
      /** @description Gets or sets the name of the honor. */
      honorName?: string;
      /**
       * Format: int32
       * @description Gets or sets the honor roll identifier.
       * Restricted to HonorRollConfigId
       */
      honorRollId?: number;
      /**
       * Format: float
       * @description Used with the Individual Class Average/Gpa:
       * To earn this honor, the student needs at least one class that meets this grade threshold.
       */
      maxClass: number;
      /**
       * Format: float
       * @description To earn this honor, the student is not allowed to have a combined summary grade below this minimum value.
       */
      minAvg: number;
      /**
       * Format: float
       * @description To earn this honor, the student is not allowed to have an individual grade below this minimum value.
       */
      minClass: number;
      /**
       * Format: float
       * @description Gets or sets the minimum credits needed for Honor.
       */
      minCredits: number;
      /**
       * Format: int32
       * @description Gets or sets the modified by.
       */
      modifiedBy?: number;
      /**
       * Format: date-time
       * @description Gets or sets the modified date.
       */
      modifiedDate?: string;
      /** @description Gets or sets the school code. */
      schoolCode?: string;
      /**
       * @description Represents the order in which the Honor checks are processed when running the associated Honor Roll.
       * Students meeting the conditions for multiple honors within the same run configuration will keep the later entry.
       * Given this, the more strict Honors should be given a higher sequence number.
       * (eg AB honor is sequence 0, while A Honor is sequence 1)
       * Unique to 1 per grade per honor
       */
      sequence: number;
      /**
       * @description Gets or sets the time frame.
       * 0 if calculated at 'term', 1 if calculated cumulatively from transcript records.
       * May be redundant, (set at the Honor Roll Config level) but recommended to keep
       * maintained for historical compatibility with the 'run honor roll' processes.
       */
      timeFrame: number;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfStudentModel: {
      results?: components["schemas"]["StudentModel"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    StudentModel: components["schemas"]["StudentRequest"] & {
      /**
       * Format: int32
       * @description Gets or sets the person student identifier.
       */
      personStudentId: number;
      /**
       * Format: int32
       * @description Gets or sets the student identifier.
       */
      studentId: number;
      /**
       * Format: int32
       * @description Gets or sets the configuration school identifier.
       */
      configSchoolId: number;
      /** @description Gets or sets the school code. */
      schoolCode?: string;
    };
    /**
     * @description Request for new Student.
     * @example {
     *   "school": {},
     *   "locker": [],
     *   "configSchoolId": 1
     * }
     */
    StudentRequest: {
      /** @description Gets or sets the school. */
      school?: components["schemas"]["StudentSchoolModel"];
      /** @description Gets or sets the locker. */
      locker?: components["schemas"]["StudentLockerModel"][];
      /**
       * Format: int32
       * @description Gets or sets the configuration school identifier.
       * If x-configSchoolId header is set to anything other
       * than default the MS will default to that value.
       */
      configSchoolId: number;
    };
    /**
     * @description Student School Information.
     * @example {
     *   "status": "String",
     *   "substatus": "String",
     *   "enrollDate": "2020-01-01T00:00:00.0000000+00:00",
     *   "withdrawDate": "2020-01-01T00:00:00.0000000+00:00",
     *   "withdrawReason": "String",
     *   "graduationDate": "2020-01-01T00:00:00.0000000+00:00",
     *   "gradeLevel": "String",
     *   "nextStatus": "String",
     *   "nextSchoolCode": "String",
     *   "nextGradeLevel": "String"
     * }
     */
    StudentSchoolModel: {
      /** @description Gets or sets the status. */
      status?: string;
      /** @description Gets or sets the substatus. */
      substatus?: string;
      /**
       * Format: date-time
       * @description Gets or sets the enroll date.
       */
      enrollDate?: string;
      /**
       * Format: date-time
       * @description Gets or sets the withdraw date.
       */
      withdrawDate?: string;
      /** @description Gets or sets the withdraw reason. */
      withdrawReason?: string;
      /**
       * Format: date-time
       * @description Gets or sets the graduation date.
       */
      graduationDate?: string;
      /** @description Gets or sets the grade level. */
      gradeLevel?: string;
      /** @description Gets or sets the next status. */
      nextStatus?: string;
      /** @description Gets or sets the next school code. */
      nextSchoolCode?: string;
      /** @description Gets or sets the next grade level. */
      nextGradeLevel?: string;
    };
    /**
     * @description Student locker Information.
     * @example {
     *   "id": 1,
     *   "name": "String"
     * }
     */
    StudentLockerModel: {
      /**
       * Format: int32
       * @description Gets or sets the identifier. Valid value is 1 or 2, match to locker1 or locker2.
       */
      id: number;
      /** @description Gets or sets the name. */
      name?: string;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfLockerModel: {
      results?: components["schemas"]["LockerModel"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    LockerModel: components["schemas"]["LockerRequest"] & {
      /**
       * Format: int32
       * @description Gets or sets the locker identifier.
       */
      lockerId: number;
      /**
       * Format: int32
       * @description Gets or sets the configuration school identifier.
       */
      configSchoolId: number;
    };
    /**
     * @description Locker Request.
     * @example {
     *   "locker": "String",
     *   "lockerGroupId": 1,
     *   "schoolCode": "String",
     *   "combination1": "String",
     *   "combination2": "String",
     *   "combination3": "String",
     *   "combination4": "String",
     *   "combination5": "String",
     *   "note": "String",
     *   "outOfService": false,
     *   "currentCombination": 1
     * }
     */
    LockerRequest: {
      /** @description Gets or sets the locker. */
      locker?: string;
      /**
       * Format: int32
       * @description Gets or sets the locker group identifier.
       */
      lockerGroupId?: number;
      /** @description Gets or sets the school code. */
      schoolCode?: string;
      /** @description Gets or sets the combination1. */
      combination1?: string;
      /** @description Gets or sets the combination2. */
      combination2?: string;
      /** @description Gets or sets the combination3. */
      combination3?: string;
      /** @description Gets or sets the combination4. */
      combination4?: string;
      /** @description Gets or sets the combination5. */
      combination5?: string;
      /** @description Gets or sets the note. */
      note?: string;
      /** @description Gets or sets a value indicating whether [out of service]. */
      outOfService?: boolean;
      /**
       * Format: int32
       * @description Gets or sets which of the combinations is currently the active combination.
       * 1-5 indicate the corresponding Combination entry. 0 or null indicates no combination currently set.
       */
      currentCombination?: number;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfStudentPreProgressionModel: {
      results?: components["schemas"]["StudentPreProgressionModel"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    /**
     * @description Student Progression Information.
     * The current/next School/Status/Grade information for a student should be stored here as
     * part of the progression logic, allowing for a progression undo. (We have several schools
     * request a roll back each year, even with our checklist prior to progression)
     *
     * @example {
     *   "preProgressionStatus": "String",
     *   "preProgressionNextStatus": "String",
     *   "preProgressionGradeLevel": "String",
     *   "preProgressionNextGradeLevel": "String",
     *   "preProgressionSchoolCode": "String",
     *   "preProgressionNextSchoolCode": "String",
     *   "preProgressionProgressionDate": "2020-01-01T00:00:00.0000000+00:00",
     *   "progressionDate": "2020-01-01T00:00:00.0000000+00:00",
     *   "personStudentId": 1
     * }
     */
    StudentPreProgressionModel: {
      /** @description Gets or sets the pre progression status. */
      preProgressionStatus?: string;
      /** @description Gets or sets the pre progression next status. */
      preProgressionNextStatus?: string;
      /** @description Gets or sets the pre progression grade level. */
      preProgressionGradeLevel?: string;
      /** @description Gets or sets the pre progression next grade level. */
      preProgressionNextGradeLevel?: string;
      /** @description Gets or sets the pre progression school code. */
      preProgressionSchoolCode?: string;
      /** @description Gets or sets the pre progression next school code. */
      preProgressionNextSchoolCode?: string;
      /**
       * Format: date-time
       * @description Gets or sets the pre progression progression date.
       */
      preProgressionProgressionDate?: string;
      /**
       * Format: date-time
       * @description Gets or sets the progression date.
       */
      progressionDate?: string;
      /**
       * Format: int32
       * @description Gets or sets the person student identifier.
       */
      personStudentId: number;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfStudentRecognitionModel: {
      results?: components["schemas"]["StudentRecognitionModel"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    StudentRecognitionModel: components["schemas"]["StudentRecognitionRequest"] & {
      /**
       * Format: int32
       * @description Gets or sets the studentRecognition identifier.
       */
      recognitionId: number;
      /** @description Gets or sets the school code. */
      schoolCode?: string;
    };
    /**
     * @description StudentRecognition Request.
     * @example {
     *   "studentId": 1,
     *   "yearId": 1,
     *   "recognition": "String",
     *   "note": "String",
     *   "category": "String",
     *   "gradeLevel": "String"
     * }
     */
    StudentRecognitionRequest: {
      /**
       * Format: int32
       * @description Gets or sets the student identifier.
       */
      studentId?: number;
      /**
       * Format: int32
       * @description Gets or sets the year identifier.
       */
      yearId?: number;
      /** @description Gets or sets the recognition. */
      recognition?: string;
      /** @description Gets or sets the note. */
      note?: string;
      /**
       * @description Gets or sets the category.
       *                From list defined by school: DefinedLists.Type = 'Student Recognition Category'
       */
      category?: string;
      /** @description Gets or sets the grade level. */
      gradeLevel?: string;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfStudentServiceHoursModel: {
      results?: components["schemas"]["StudentServiceHoursModel"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    /**
     * @description Class StudentServiceHoursModel.
     * @example {
     *   "serviceHoursId": 1,
     *   "personId": 1,
     *   "description": "String",
     *   "hours": 1,
     *   "date": "2020-01-01T00:00:00.0000000+00:00",
     *   "note": "String",
     *   "verifiedBy": "String",
     *   "createdBy": 1
     * }
     */
    StudentServiceHoursModel: {
      /**
       * Format: int32
       * @description Gets or sets the service hours identifier.
       */
      serviceHoursId: number;
      /**
       * Format: int32
       * @description Gets or sets the person identifier.
       */
      personId?: number;
      /** @description Gets or sets the description. */
      description?: string;
      /**
       * Format: float
       * @description Gets or sets the hours.
       */
      hours?: number;
      /**
       * Format: date-time
       * @description Gets or sets the date.
       */
      date?: string;
      /** @description Gets or sets the note. */
      note?: string;
      /** @description Gets or sets the verified by. */
      verifiedBy?: string;
      /**
       * Format: int32
       * @description Gets or sets the created by.
       */
      createdBy?: number;
    };
    /**
     * @description Status Information.
     * @example {
     *   "status": "String",
     *   "displayName": "String",
     *   "subStatus": []
     * }
     */
    StatusModel: {
      /** @description Gets or sets the status. */
      status?: string;
      /** @description Gets or sets the display name. */
      displayName?: string;
      /** @description Gets or sets the sub status. */
      subStatus?: components["schemas"]["SubStatusModel"][];
    };
    SubStatusModel: components["schemas"]["SubStatusRequest"] & {
      /**
       * Format: int32
       * @description Gets or sets the identifier.
       */
      id: number;
    };
    /**
     * @description SubStatus Request.
     * @example {
     *   "status": "String",
     *   "schoolCode": "String"
     * }
     */
    SubStatusRequest: {
      /** @description Gets or sets the status. */
      status?: string;
      /** @description Gets or sets the school code. */
      schoolCode?: string;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfAddressVM: {
      results?: components["schemas"]["AddressVM"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    /**
     * @description Address information
     * @example {
     *   "addressID": 1,
     *   "address1": "String",
     *   "address2": "String",
     *   "city": "String",
     *   "state": "String",
     *   "zip": "String",
     *   "country": "String",
     *   "modifiedBy": 1,
     *   "modifiedDate": "2020-01-01T00:00:00.0000000+00:00",
     *   "greeting1": "String",
     *   "greeting2": "String",
     *   "greeting3": "String",
     *   "greeting4": "String",
     *   "greeting5": "String",
     *   "newStudentInquiryID": 1
     * }
     */
    AddressVM: {
      /**
       * Format: int32
       * @description Gets or sets the address identifier
       */
      addressID: number;
      /** @description Gets or sets the address1 */
      address1?: string;
      /** @description Gets or sets the address2 */
      address2?: string;
      /** @description Gets or sets the city */
      city?: string;
      /** @description Gets or sets the state */
      state?: string;
      /** @description Gets or sets the zipcode */
      zip?: string;
      /** @description Gets or sets the country */
      country?: string;
      /**
       * Format: int32
       * @description Gets or sets modified by
       */
      modifiedBy?: number;
      /**
       * Format: date-time
       * @description Gets or sets the modified date
       */
      modifiedDate?: string;
      /** @description Gets or sets greeting1 */
      greeting1?: string;
      /** @description Gets or sets greeting2 */
      greeting2?: string;
      /** @description Gets or sets greeting3 */
      greeting3?: string;
      /** @description Gets or sets greeting4 */
      greeting4?: string;
      /** @description Gets or sets greeting5 */
      greeting5?: string;
      /**
       * Format: int32
       * @description Gets or sets the new student inquiry identifier
       */
      newStudentInquiryID?: number;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfBehaviorEventsVmOut: {
      results?: components["schemas"]["BehaviorEventsVmOut"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    BehaviorEventsVmOut: components["schemas"]["BehaviorEventsVmIn"] & {
      /**
       * Format: int32
       * @description Gets or sets the behavior events identifier
       */
      disciplineID: number;
    };
    /**
     * @example {
     *   "dateOfIncident": "2020-01-01T00:00:00.0000000+00:00",
     *   "descriptionOfIncident": "String",
     *   "history": "String",
     *   "sanction1": "String",
     *   "sanction2": "String",
     *   "sanctionDate1": "2020-01-01T00:00:00.0000000+00:00",
     *   "sanctionDate2": "2020-01-01T00:00:00.0000000+00:00",
     *   "violation": "String",
     *   "reportedBy": "String",
     *   "reviewedBy": "String",
     *   "status": "String",
     *   "studentID": 1,
     *   "demerits": 1,
     *   "modifiedBy": 1,
     *   "modifiedDate": "2020-01-01T00:00:00.0000000+00:00",
     *   "staffID": 1,
     *   "level": 1,
     *   "type": 1,
     *   "notified": false
     * }
     */
    BehaviorEventsVmIn: {
      /**
       * Format: date-time
       * @description Gets or sets date of incident
       */
      dateOfIncident?: string;
      /** @description Gets or sets description of incident */
      descriptionOfIncident?: string;
      /** @description Gets or sets history */
      history?: string;
      /** @description Gets or sets the sanction1 */
      sanction1?: string;
      /** @description Gets or sets the sanction2 */
      sanction2?: string;
      /**
       * Format: date-time
       * @description Gets or sets sanction date1
       */
      sanctionDate1?: string;
      /**
       * Format: date-time
       * @description Gets or sets sanction date2
       */
      sanctionDate2?: string;
      /** @description Gets or sets the violation */
      violation?: string;
      /** @description Gets or sets the reported by */
      reportedBy?: string;
      /** @description Gets or sets the reviewed by */
      reviewedBy?: string;
      /** @description Gets or sets the status */
      status?: string;
      /**
       * Format: int32
       * @description Gets or sets student identifier
       */
      studentID?: number;
      /**
       * Format: float
       * @description Gets or sets demerits
       */
      demerits?: number;
      /**
       * Format: int32
       * @description Gets or sets modified by
       */
      modifiedBy?: number;
      /**
       * Format: date-time
       * @description Gets or sets modified date
       */
      modifiedDate?: string;
      /**
       * Format: int32
       * @description Gets or sets staff identifier
       */
      staffID?: number;
      /**
       * Format: int32
       * @description Gets or sets level
       */
      level?: number;
      /**
       * Format: int32
       * @description Gets or sets type
       */
      type?: number;
      /** @description Gets or sets the notified flag */
      notified?: boolean;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfCongregationVM: {
      results?: components["schemas"]["CongregationVM"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    /**
     * @description Class CongregationVM.
     * Building/people group of a religious affiliation.
     * @example {
     *   "congregationId": 1,
     *   "congregationName": "String",
     *   "congregationCity": "String",
     *   "congregationPhone": "String",
     *   "congregationState": "String",
     *   "congregationStreet": "String",
     *   "congregationZip": "String",
     *   "seniorPastor": "String",
     *   "youthPastor": "String"
     * }
     */
    CongregationVM: {
      /**
       * Format: int32
       * @description The congregation identifier.
       */
      congregationId: number;
      /** @description Gets or sets the name of the congregation. */
      congregationName?: string;
      /** @description Gets or sets the congregation city. */
      congregationCity?: string;
      /** @description Gets or sets the congregation phone number. */
      congregationPhone?: string;
      /** @description Gets or sets the state (address) of the congregation . */
      congregationState?: string;
      /** @description Gets or sets the congregation street address. */
      congregationStreet?: string;
      /** @description Gets or sets the congregation zip code. (address) */
      congregationZip?: string;
      /** @description Gets or sets the senior pastor. */
      seniorPastor?: string;
      /** @description Gets or sets the youth pastor. */
      youthPastor?: string;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfPersonDemographicVM: {
      results?: components["schemas"]["PersonDemographicVM"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    /**
     * @description A person's demographic information
     * @example {
     *   "personId": 1,
     *   "gender": "female",
     *   "birthdate": "2020-01-01T00:00:00.0000000+00:00",
     *   "ethnicity": "String",
     *   "citizenship": "USA",
     *   "maritalStatus": "Married",
     *   "primaryLanguage": "Welsh",
     *   "birthplace": "String",
     *   "birthCity": "Cardiff",
     *   "birthState": "Wales",
     *   "birthCountry": "UK"
     * }
     */
    PersonDemographicVM: {
      /**
       * Format: int32
       * @description The person's id
       * @example 1
       */
      personId: number;
      /**
       * @description The person's gender
       * @example female
       */
      gender?: string;
      /**
       * Format: date-time
       * @description The person's birthdate
       */
      birthdate?: string;
      /** @description The person's ethnicity */
      ethnicity?: string;
      /**
       * @description The person's country of citizenship
       * @example USA
       */
      citizenship?: string;
      /**
       * @description The person's marital status
       * @example Married
       */
      maritalStatus?: string;
      /**
       * @description The person's Primary Language
       * @example Welsh
       */
      primaryLanguage?: string;
      /** @description The person's birthplace */
      birthplace?: string;
      /**
       * @description The name of the city where the person was born
       * @example Cardiff
       */
      birthCity?: string;
      /**
       * @description The name of the state or province where the person was born
       * @example Wales
       */
      birthState?: string;
      /**
       * @description The name of the country where the person was born
       * @example UK
       */
      birthCountry?: string;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfDirectoryPreferencesVmOut: {
      results?: components["schemas"]["DirectoryPreferencesVmOut"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    DirectoryPreferencesVmOut: components["schemas"]["DirectoryPreferencesVmIn"] & {
      /**
       * Format: int32
       * @description Gets or sets the person identifier.
       */
      personId: number;
    };
    /**
     * @example {
     *   "blockName": false,
     *   "blockCellPhone": false,
     *   "blockHomePhone": false,
     *   "blockAddress": false,
     *   "blockEmail": false
     * }
     */
    DirectoryPreferencesVmIn: {
      /**
       * @description Gets or sets a value indicating whether we should block the name in
       * the directory.
       */
      blockName?: boolean;
      /**
       * @description Gets or sets a value indicating whether we should block the cellphone
       * in the directory.
       */
      blockCellPhone?: boolean;
      /**
       * @description Gets or sets a value indicating whether the home phone
       * in the directory.
       */
      blockHomePhone?: boolean;
      /**
       * @description Gets or sets a value indicating whether the Home address
       * in the directory.
       */
      blockAddress?: boolean;
      /**
       * @description Gets or sets a value indicating whether the email
       * in the directory.
       */
      blockEmail?: boolean;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfEducationVmOut: {
      results?: components["schemas"]["EducationVmOut"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    EducationVmOut: components["schemas"]["EducationVmIn"] & {
      /**
       * Format: int32
       * @description The education Id
       * @example 1
       */
      educationId: number;
    };
    /**
     * @description A person's education information
     * @example {
     *   "personId": 1,
     *   "degreeSchool": "Name",
     *   "degreeName": "String",
     *   "degreeYear": "2020",
     *   "educationLevel": 1,
     *   "degreeType": "Associates"
     * }
     */
    EducationVmIn: {
      /**
       * Format: int32
       * @description The person's Id
       */
      personId: number;
      /**
       * @description The school where the degree came from
       * @example Name
       */
      degreeSchool?: string;
      /** @description The degree name */
      degreeName?: string;
      /**
       * @description The year when the degree was aquired
       * @example 2020
       */
      degreeYear?: string;
      /**
       * Format: int32
       * @description The education level
       * @example 1
       */
      educationLevel?: number;
      /**
       * @description The degree type
       * @example Associates
       */
      degreeType?: string;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfEmergencyContactVM: {
      results?: components["schemas"]["EmergencyContactVM"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    /**
     * @description EmergencyContact information
     * @example {
     *   "emergencyContactID": 1,
     *   "firstName": "String",
     *   "lastName": "String",
     *   "middleName": "String",
     *   "salutation": "String",
     *   "suffix": "String",
     *   "homePhone": "String",
     *   "cellPhone": "String",
     *   "email": "String",
     *   "relationship": "String",
     *   "workPhone": "String",
     *   "studentID": 1,
     *   "sortOrder": 1,
     *   "refID": 1,
     *   "note": "String",
     *   "countryCode": "String",
     *   "portalSortOrder": 1
     * }
     */
    EmergencyContactVM: {
      /**
       * Format: int32
       * @description Gets or sets the emergency contact identifier
       */
      emergencyContactID: number;
      /** @description Gets or sets first name */
      firstName?: string;
      /** @description Gets or sets last name */
      lastName?: string;
      /** @description Gets or sets middle name */
      middleName?: string;
      /** @description Gets or sets salutation */
      salutation?: string;
      /** @description Gets or sets suffix */
      suffix?: string;
      /** @description Gets or sets home phone */
      homePhone?: string;
      /** @description Gets or sets cell phone */
      cellPhone?: string;
      /** @description Gets or sets email */
      email?: string;
      /** @description Gets or sets relationship */
      relationship?: string;
      /** @description Gets or sets work phone */
      workPhone?: string;
      /**
       * Format: int32
       * @description Gets or sets student identifier
       */
      studentID?: number;
      /**
       * Format: int32
       * @description Gets or sets sort order
       */
      sortOrder?: number;
      /**
       * Format: int32
       * @description Gets or sets ref identifier
       */
      refID?: number;
      /** @description Gets or sets note */
      note?: string;
      /** @description Gets or sets country code */
      countryCode?: string;
      /**
       * Format: int32
       * @description Gets or sets portal sort order
       */
      portalSortOrder: number;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfPersonInterestVM: {
      results?: components["schemas"]["PersonInterestVM"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    /**
     * @description A person's interest information
     * @example {
     *   "personID": 1,
     *   "interest": "String"
     * }
     */
    PersonInterestVM: {
      /**
       * Format: int32
       * @description Gets or sets the person identifier
       */
      personID: number;
      /** @description Gets or sets the interest */
      interest?: string;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfNoteVmOut: {
      results?: components["schemas"]["NoteVmOut"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    NoteVmOut: components["schemas"]["NoteVmIn"] & {
      /**
       * Format: int32
       * @description Gets or sets the note identifier.
       */
      noteId: number;
      /**
       * Format: int32
       * @description Gets or sets the modified by identifier.
       * We are unable to set this in the External Api
       */
      modifiedById: number;
    };
    /**
     * @example {
     *   "enteredById": 1,
     *   "noteDate": "2020-01-01T00:00:00.0000000+00:00",
     *   "noteType": {},
     *   "personId": 1,
     *   "note": "String",
     *   "yearId": 1
     * }
     */
    NoteVmIn: {
      /**
       * Format: int32
       * @description Gets or sets the entered by identifier.
       */
      enteredById: number;
      /**
       * Format: date-time
       * @description Gets or sets the note date.
       */
      noteDate?: string;
      /** @description Gets or sets the type of the note. */
      noteType: components["schemas"]["NoteTypeEnum"];
      /**
       * Format: int32
       * @description Gets or sets the person identifier that the note is about.
       */
      personId: number;
      /** @description Gets or sets the note. */
      note?: string;
      /**
       * Format: int32
       * @description Gets or sets the year identifier.
       */
      yearId?: number;
    };
    /** @enum {string} */
    NoteTypeEnum: "Admission" | "Inquiry" | "ReEnrollment";
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfParentAlertEntity: {
      results?: components["schemas"]["ParentAlertEntity"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    /**
     * @example {
     *   "id": "String",
     *   "personId": 1,
     *   "parentAlertPreference": "String",
     *   "parentAlertHomePhone": false,
     *   "parentAlertCellPhone": false,
     *   "parentAlertWorkPhone": false,
     *   "parentAlertNoText": false
     * }
     */
    ParentAlertEntity: {
      id?: string;
      /** Format: int32 */
      personId: number;
      parentAlertPreference?: string;
      parentAlertHomePhone?: boolean;
      parentAlertCellPhone?: boolean;
      parentAlertWorkPhone?: boolean;
      parentAlertNoText?: boolean;
    };
    ServiceHoursModel: components["schemas"]["StudentServiceHoursModel"] & {
      /**
       * Format: int32
       * @description Gets or sets the year identifier.
       */
      yearId?: number;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfParentStudentVM: {
      results?: components["schemas"]["ParentStudentVM"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    /**
     * @description A person's family information
     * @example {
     *   "parentID": 1,
     *   "studentID": 1,
     *   "custody": false,
     *   "correspondence": false,
     *   "relationship": "String",
     *   "grandparent": false,
     *   "emergencyContact": false,
     *   "reportCard": false,
     *   "pwBlock": false,
     *   "pickUp": false,
     *   "parentsWeb": false,
     *   "reEnroll": false
     * }
     */
    ParentStudentVM: {
      /**
       * Format: int32
       * @description Gets or sets the parent identifier
       */
      parentID: number;
      /**
       * Format: int32
       * @description Gets or sets the student identifier
       */
      studentID: number;
      /** @description Gets or sets the custody flag */
      custody?: boolean;
      /** @description Gets or sets the correspondence flag */
      correspondence?: boolean;
      /** @description Gets or sets the relationship */
      relationship?: string;
      /** @description Gets or sets the grandparent flag */
      grandparent?: boolean;
      /** @description Gets or sets the emergency contact flag */
      emergencyContact?: boolean;
      /** @description Gets or sets the report card flag */
      reportCard?: boolean;
      /** @description Gets or sets the pw block flag */
      pwBlock?: boolean;
      /** @description Gets or sets the pickup flag */
      pickUp?: boolean;
      /** @description Gets or sets the parents web flag */
      parentsWeb?: boolean;
      /** @description Gets or sets the reenrollment flag */
      reEnroll?: boolean;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfPersonVM: {
      results?: components["schemas"]["PersonVM"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    /**
     * @description Basic Person Information
     * @example {
     *   "personId": 1,
     *   "firstName": "String",
     *   "lastName": "String",
     *   "middleName": "String",
     *   "nickName": "String",
     *   "salutation": "Mrs",
     *   "suffix": "Jr.",
     *   "email": "String",
     *   "email2": "String",
     *   "username": "String",
     *   "homePhone": "555-555-5555",
     *   "cellPhone": "555-555-5555",
     *   "addressID": 1,
     *   "deceased": false,
     *   "modifiedDate": "2020-01-01T00:00:00.0000000+00:00"
     * }
     */
    PersonVM: {
      /**
       * Format: int32
       * @description The person's id
       */
      personId: number;
      /** @description The person's first name */
      firstName?: string;
      /** @description The person's last name */
      lastName?: string;
      /** @description The person's middle name */
      middleName?: string;
      /** @description The person's nick name */
      nickName?: string;
      /**
       * @description The person's salutation
       * @example Mrs
       */
      salutation?: string;
      /**
       * @description The person's suffix
       * @example Jr.
       */
      suffix?: string;
      /** @description The person's email address */
      email?: string;
      /** @description The person's alternate email address */
      email2?: string;
      /** @description The person's username */
      username?: string;
      /**
       * @description The person's home phone number
       * @example 555-555-5555
       */
      homePhone?: string;
      /**
       * @description The person's cell phone number
       * @example 555-555-5555
       */
      cellPhone?: string;
      /**
       * Format: int32
       * @description The person's address by id
       */
      addressID?: number;
      /** @description The person's living status */
      deceased: boolean;
      /**
       * Format: date-time
       * @description Last time Person was modified
       */
      modifiedDate?: string;
    };
    /**
     * @example {
     *   "value": "String"
     * }
     */
    ProfileImage: {
      value?: string;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfPublicSchoolVM: {
      results?: components["schemas"]["PublicSchoolVM"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    /**
     * @description ViewModel for PersonPublicSchoolEntity
     * @example {
     *   "personId": 12345,
     *   "publicSchoolDistrict": "District Name",
     *   "publicSchoolCounty": "County Name",
     *   "publicSchoolState": "NE",
     *   "publicSchoolLocalSchool": "School Name",
     *   "publicSchoolCode": "School Code"
     * }
     */
    PublicSchoolVM: {
      /**
       * Format: int32
       * @description Get or Set the PersonId
       * @example 12345
       */
      personId: number;
      /**
       * @description Gets or Sets the PublicSchoolDistrict
       * @example District Name
       */
      publicSchoolDistrict?: string;
      /**
       * @description Gets or Sets the Public School County
       * @example County Name
       */
      publicSchoolCounty?: string;
      /**
       * @description Gets or Sets the Public School State
       * @example NE
       */
      publicSchoolState?: string;
      /**
       * @description Gets or Sets the public school Local school
       * @example School Name
       */
      publicSchoolLocalSchool?: string;
      /**
       * @description Gets or Sets the public school Code
       * @example School Code
       */
      publicSchoolCode?: string;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfPersonFamilyVM: {
      results?: components["schemas"]["PersonFamilyVM"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    /**
     * @description A person's family information
     * @example {
     *   "personId": 1,
     *   "familyId": 1,
     *   "parent": false,
     *   "student": false,
     *   "financialResponsibility": false,
     *   "financialResponsibilityPercent": "String",
     *   "familyOrder": 1,
     *   "factsCustomer": false
     * }
     */
    PersonFamilyVM: {
      /**
       * Format: int32
       * @description Gets or sets the person identifier
       */
      personId: number;
      /**
       * Format: int32
       * @description Gets or sets the family identifier
       */
      familyId: number;
      /** @description Gets or sets the parent flag */
      parent?: boolean;
      /** @description Gets or sets the student flag */
      student?: boolean;
      /** @description Gets or sets the financial responsibility */
      financialResponsibility?: boolean;
      /** @description Gets or sets the financial responsibility percentage */
      financialResponsibilityPercent?: string;
      /**
       * Format: int32
       * @description Gets or sets the family order
       */
      familyOrder?: number;
      /** @description Gets or sets the facts customer flag */
      factsCustomer: boolean;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfPersonReligionEntity: {
      results?: components["schemas"]["PersonReligionEntity"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    /**
     * @example {
     *   "id": "String",
     *   "personId": 1,
     *   "denomination": "String",
     *   "congregationId": 1,
     *   "baptismCongregation": "String",
     *   "baptismCity": "String",
     *   "baptismState": "String",
     *   "baptismDate": "String",
     *   "communionCongregation": "String",
     *   "communionCity": "String",
     *   "communionState": "String",
     *   "communionDate": "String",
     *   "confirmationCongregation": "String",
     *   "confirmationCity": "String",
     *   "confirmationState": "String",
     *   "confirmationDate": "String",
     *   "reconciliationCongregation": "String",
     *   "reconciliationCity": "String",
     *   "reconciliationState": "String",
     *   "reconciliationDate": "String",
     *   "barMitzvahCongregation": "String",
     *   "barMitzvahCity": "String",
     *   "barMitzvahState": "String",
     *   "barMitzvahDate": "String",
     *   "localChurchMember": false
     * }
     */
    PersonReligionEntity: {
      id?: string;
      /** Format: int32 */
      personId: number;
      denomination?: string;
      /** Format: int32 */
      congregationId?: number;
      baptismCongregation?: string;
      baptismCity?: string;
      baptismState?: string;
      baptismDate?: string;
      communionCongregation?: string;
      communionCity?: string;
      communionState?: string;
      communionDate?: string;
      confirmationCongregation?: string;
      confirmationCity?: string;
      confirmationState?: string;
      confirmationDate?: string;
      reconciliationCongregation?: string;
      reconciliationCity?: string;
      reconciliationState?: string;
      reconciliationDate?: string;
      barMitzvahCongregation?: string;
      barMitzvahCity?: string;
      barMitzvahState?: string;
      barMitzvahDate?: string;
      localChurchMember?: boolean;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfReligiousEventVmOut: {
      results?: components["schemas"]["ReligiousEventVmOut"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    ReligiousEventVmOut: components["schemas"]["ReligiousEventVmIn"] & {
      /**
       * Format: int32
       * @description Gets or sets the religious event identifier.
       */
      religiousEventId: number;
    };
    /**
     * @example {
     *   "personId": 1,
     *   "religiousEventDate": "2020-01-01T00:00:00.0000000+00:00",
     *   "religiousEventType": "String",
     *   "location": "String",
     *   "city": "String",
     *   "state": "String",
     *   "note": "String"
     * }
     */
    ReligiousEventVmIn: {
      /**
       * Format: int32
       * @description Gets or sets the person identifier.
       */
      personId?: number;
      /**
       * Format: date-time
       * @description Gets or sets the religious event date.
       */
      religiousEventDate?: string;
      /**
       * @description Gets or sets the type of the religious event.
       * This must be unique per PersonId
       */
      religiousEventType?: string;
      /** @description Gets or sets the location. */
      location?: string;
      /** @description Gets or sets the city. */
      city?: string;
      /** @description Gets or sets the state. */
      state?: string;
      /** @description Gets or sets the note. */
      note?: string;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfStaffVmOut: {
      /** @description Gets or sets the results. */
      results?: components["schemas"]["StaffVmOut"][];
      /**
       * Format: int32
       * @description Gets or sets the current page.
       */
      currentPage: number;
      /**
       * Format: int32
       * @description Gets or sets the page count.
       */
      pageCount: number;
      /**
       * Format: int32
       * @description Gets or sets the size of the page.
       */
      pageSize: number;
      /**
       * Format: int64
       * @description Gets or sets the row count.
       */
      rowCount: number;
      /** @description Gets or sets the next page. */
      nextPage?: string;
    };
    StaffVmOut: components["schemas"]["StaffVmIn"] & {
      /**
       * Format: int32
       * @description Gets or sets the staff identifier.
       */
      staffId: number;
      /** @description Gets or sets the name. */
      name?: string;
    };
    /**
     * @description Class StaffVmIn.
     * @example {
     *   "active": false,
     *   "administrator": false,
     *   "blockSurvey": false,
     *   "districtUser": false,
     *   "districtWideUser": false,
     *   "dualEnrolledUser": false,
     *   "elementary": false,
     *   "faculty": false,
     *   "fullTime": false,
     *   "highSchool": false,
     *   "middleSchool": false,
     *   "preschool": false,
     *   "staffDirectoryBlock": false,
     *   "substitute": false,
     *   "unsubscribeRenWebEmail": false,
     *   "endDate": "2020-01-01T00:00:00.0000000+00:00",
     *   "startDate": "2020-01-01T00:00:00.0000000+00:00",
     *   "fte": 1,
     *   "financialFamilyId": 1,
     *   "pda": 1,
     *   "roomId": 1,
     *   "schools": [],
     *   "department": "String",
     *   "firstName": "String",
     *   "lastName": "String",
     *   "legacyStaffId": "String",
     *   "middleName": "String",
     *   "parentAlertPin": "String",
     *   "spouse": "String",
     *   "teacherSite": "String"
     * }
     */
    StaffVmIn: {
      /** @description Gets or sets a value indicating whether this StaffVmIn is active. */
      active?: boolean;
      /** @description Gets or sets a value indicating whether this StaffVmIn is administrator. */
      administrator?: boolean;
      /** @description Gets or sets a value indicating whether [block survey]. */
      blockSurvey?: boolean;
      /** @description Gets or sets a value indicating whether [district user]. */
      districtUser?: boolean;
      /** @description Gets or sets a value indicating whether [district wide user]. */
      districtWideUser?: boolean;
      /** @description Gets or sets a value indicating whether [dual enrolled user]. */
      dualEnrolledUser?: boolean;
      /** @description Gets or sets a value indicating whether this StaffVmIn is elementary. */
      elementary?: boolean;
      /** @description Gets or sets a value indicating whether this StaffVmIn is faculty. */
      faculty?: boolean;
      /** @description Gets or sets a value indicating whether [full time]. */
      fullTime?: boolean;
      /** @description Gets or sets a value indicating whether [high school]. */
      highSchool?: boolean;
      /** @description Gets or sets a value indicating whether [middle school]. */
      middleSchool?: boolean;
      /** @description Gets or sets a value indicating whether this StaffVmIn is preschool. */
      preschool?: boolean;
      /** @description Gets or sets a value indicating whether [staff directory block]. */
      staffDirectoryBlock?: boolean;
      /** @description Gets or sets a value indicating whether this StaffVmIn is substitute. */
      substitute?: boolean;
      /** @description Gets or sets a value indicating whether [unsubscribe ren web email]. */
      unsubscribeRenWebEmail?: boolean;
      /**
       * Format: date-time
       * @description Gets or sets the end date.
       */
      endDate?: string;
      /**
       * Format: date-time
       * @description Gets or sets the start date.
       */
      startDate?: string;
      /**
       * Format: float
       * @description Gets or sets the fte.
       */
      fte?: number;
      /**
       * Format: int32
       * @description Gets or sets the financial family identifier.
       */
      financialFamilyId?: number;
      /**
       * Format: int32
       * @description Gets or sets the pda.
       */
      pda?: number;
      /**
       * Format: int32
       * @description Gets or sets the room identifier.
       */
      roomId?: number;
      /** @description Gets or sets the schools. */
      schools?: string[];
      /** @description Gets or sets the department. */
      department?: string;
      /** @description Gets or sets the first name. */
      firstName?: string;
      /** @description Gets or sets the last name. */
      lastName?: string;
      /** @description Gets or sets the legacy staff identifier. */
      legacyStaffId?: string;
      /** @description Gets or sets the name of the middle. */
      middleName?: string;
      /** @description Gets or sets the parent alert pin. */
      parentAlertPin?: string;
      /** @description Gets or sets the spouse. */
      spouse?: string;
      /** @description Gets or sets the teacher site. */
      teacherSite?: string;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfStaffObservationsVmOut: {
      results?: components["schemas"]["StaffObservationsVmOut"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    StaffObservationsVmOut: components["schemas"]["StaffObservationsVmIn"] & {
      /**
       * Format: int32
       * @description Gets or sets the observation identifier.
       */
      observationId: number;
    };
    /**
     * @description Class StaffObservationsVmIn.
     * @example {
     *   "endDate": "2020-01-01T00:00:00.0000000+00:00",
     *   "eval": false,
     *   "evaluatorId": 1,
     *   "observationConfigId": 1,
     *   "personId": 1,
     *   "startDate": "2020-01-01T00:00:00.0000000+00:00",
     *   "title": "String"
     * }
     */
    StaffObservationsVmIn: {
      /**
       * Format: date-time
       * @description Gets or sets the end date.
       */
      endDate?: string;
      /** @description Gets or sets a value indicating whether this StaffObservationsVmIn is an evaluation. */
      eval?: boolean;
      /**
       * Format: int32
       * @description Gets or sets the evaluator identifier.
       */
      evaluatorId: number;
      /**
       * Format: int32
       * @description Gets or sets the observation configuration identifier.
       */
      observationConfigId: number;
      /**
       * Format: int32
       * @description Gets or sets the person identifier.
       */
      personId: number;
      /**
       * Format: date-time
       * @description Gets or sets the start date.
       */
      startDate?: string;
      /** @description Gets or sets the title. */
      title?: string;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfPersonVehicleEntity: {
      results?: components["schemas"]["PersonVehicleEntity"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    /**
     * @example {
     *   "id": "String",
     *   "personId": 1,
     *   "autoMake": "String",
     *   "autoModel": "String",
     *   "autoLicense": "String",
     *   "driversLicense": "String",
     *   "permitNumber": "String"
     * }
     */
    PersonVehicleEntity: {
      id?: string;
      /** Format: int32 */
      personId: number;
      autoMake?: string;
      autoModel?: string;
      autoLicense?: string;
      driversLicense?: string;
      permitNumber?: string;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfPersonWorkEntity: {
      results?: components["schemas"]["PersonWorkEntity"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    /**
     * @example {
     *   "id": "String",
     *   "personId": 1,
     *   "occupation": "String",
     *   "company": "String",
     *   "jobCategory": "String",
     *   "workStreet": "String",
     *   "workFax": "String",
     *   "workPhone": "String",
     *   "workPhoneExtension": "String",
     *   "workCity": "String",
     *   "workState": "String",
     *   "workZip": "String",
     *   "matchingGiftEmployer": false
     * }
     */
    PersonWorkEntity: {
      id?: string;
      /** Format: int32 */
      personId: number;
      occupation?: string;
      company?: string;
      jobCategory?: string;
      workStreet?: string;
      workFax?: string;
      workPhone?: string;
      workPhoneExtension?: string;
      workCity?: string;
      workState?: string;
      workZip?: string;
      matchingGiftEmployer?: boolean;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfAlertApplicationVm: {
      results?: components["schemas"]["AlertApplicationVm"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    /**
     * @example {
     *   "alertID": 1,
     *   "applicationID": 1,
     *   "visual": false,
     *   "beep": false,
     *   "popUp": false,
     *   "popUpAlways": false
     * }
     */
    AlertApplicationVm: {
      /**
       * Format: int32
       * @description Gets or sets alert identifier
       */
      alertID: number;
      /**
       * Format: int32
       * @description Gets or sets the which application the alert should show in.
       * Unless noted, it will show upon selecting the person on the main screen in that area
       * 1= Student General
       * 2= Cash Register
       * 3= Lunch Verification
       * 4= Student Clock
       * 5= Medical
       * 6= Teacher (Shows on staff login, for any instructors of classes the student is in)
       */
      applicationID: number;
      /** @description Gets or sets visual flag */
      visual?: boolean;
      /** @description Gets or sets beep flag */
      beep?: boolean;
      /** @description Gets or sets popup flag */
      popUp?: boolean;
      /** @description Gets or sets popup always flag */
      popUpAlways?: boolean;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfAlertVm: {
      results?: components["schemas"]["AlertVm"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    /**
     * @example {
     *   "alertID": 1,
     *   "studentID": 1,
     *   "title": "String",
     *   "description": "String",
     *   "active": false
     * }
     */
    AlertVm: {
      /**
       * Format: int32
       * @description Gets or sets the alert identifier
       */
      alertID: number;
      /**
       * Format: int32
       * @description Gets or sets student identifier
       */
      studentID?: number;
      /** @description Gets or sets alert title */
      title?: string;
      /** @description Gets or sets alert description */
      description?: string;
      /** @description Gets or sets active flag */
      active: boolean;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfPickupContactVmOut: {
      results?: components["schemas"]["PickupContactVmOut"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    PickupContactVmOut: components["schemas"]["PickupContactVmIn"] & {
      /**
       * Format: int32
       * @description Gets or sets the pickup identifier
       */
      pickupId: number;
    };
    /**
     * @example {
     *   "cellPhone": "String",
     *   "countryCode": "String",
     *   "email": "String",
     *   "firstName": "String",
     *   "homePhone": "String",
     *   "lastName": "String",
     *   "middleName": "String",
     *   "note": "String",
     *   "portalSortOrder": 1,
     *   "refId": 1,
     *   "relationship": "String",
     *   "salutation": "String",
     *   "studentId": 1,
     *   "suffix": "String",
     *   "workPhone": "String"
     * }
     */
    PickupContactVmIn: {
      /** @description Gets or sets the cell phone number */
      cellPhone?: string;
      /** @description Gets or sets the country code. */
      countryCode?: string;
      /** @description Gets or sets the email address */
      email?: string;
      /** @description Gets or sets the first name. */
      firstName?: string;
      /** @description Gets or sets the home phone number. */
      homePhone?: string;
      /** @description Gets or sets the last name. */
      lastName?: string;
      /** @description Gets or sets the middle name. */
      middleName?: string;
      /** @description Gets or sets the note. */
      note?: string;
      /**
       * Format: int32
       * @description Gets or sets the portal sort order.
       */
      portalSortOrder: number;
      /**
       * Format: int32
       * @description Gets or sets the reference identifier.
       * If present, ties this to the person with the corresponding personID.
       */
      refId?: number;
      /** @description Gets or sets the relationship. */
      relationship?: string;
      /** @description Gets or sets the salutation. */
      salutation?: string;
      /**
       * Format: int32
       * @description Gets or sets the student identifier.
       */
      studentId: number;
      /** @description Gets or sets the suffix. */
      suffix?: string;
      /** @description Gets or sets the work phone number. */
      workPhone?: string;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfInterestCategoryVmOut: {
      results?: components["schemas"]["InterestCategoryVmOut"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    InterestCategoryVmOut: components["schemas"]["InterestCategoryVmIn"] & {
      /**
       * Format: int32
       * @description Gets or sets the interest category identifier
       */
      interestCategoryID: number;
    };
    /**
     * @example {
     *   "category": "String",
     *   "districtWide": false,
     *   "type": 1,
     *   "sortOrder": 1,
     *   "onlineApplication": false,
     *   "schoolCode": "String",
     *   "active": false
     * }
     */
    InterestCategoryVmIn: {
      /** @description Gets or sets category */
      category?: string;
      /** @description Gets or sets district wide flag */
      districtWide?: boolean;
      /**
       * Format: int32
       * @description Gets or sets type
       */
      type?: number;
      /**
       * Format: int32
       * @description Gets or sets sort order
       */
      sortOrder?: number;
      /** @description Gets or sets online application flag */
      onlineApplication?: boolean;
      /** @description Gets or sets school code */
      schoolCode?: string;
      /** @description Gets or sets active flag */
      active?: boolean;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfInterestItemsVmOut: {
      results?: components["schemas"]["InterestItemsVmOut"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    InterestItemsVmOut: components["schemas"]["InterestItemsVmIn"] & {
      /**
       * Format: int32
       * @description Gets or sets the interest identifier
       */
      interestID: number;
    };
    /**
     * @example {
     *   "interest": "String",
     *   "interestCategoryID": 1,
     *   "sortOrder": 1,
     *   "active": false
     * }
     */
    InterestItemsVmIn: {
      /** @description Gets or sets interest */
      interest?: string;
      /**
       * Format: int32
       * @description Gets or sets interest category id
       */
      interestCategoryID?: number;
      /**
       * Format: int32
       * @description Gets or sets sort order
       */
      sortOrder?: number;
      /** @description Gets or sets active flag */
      active?: boolean;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfFamilyConfigVmOut: {
      results?: components["schemas"]["FamilyConfigVmOut"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    FamilyConfigVmOut: components["schemas"]["FamilyConfigVmIn"] & {
      /**
       * Format: int32
       * @description Gets or sets the family identifier
       */
      familyID: number;
    };
    /**
     * @example {
     *   "familyName": "String",
     *   "enableWeb": false,
     *   "unlisted": 1,
     *   "note": "String",
     *   "modifiedBy": 1,
     *   "modifiedDate": "2020-01-01T00:00:00.0000000+00:00",
     *   "familyNameBP": "String",
     *   "parentsWebFinancialBlock": false
     * }
     */
    FamilyConfigVmIn: {
      /** @description Name of the Family */
      familyName?: string;
      /** @description Gets or sets a value indicating whether they are enabled for web (Family Portal). */
      enableWeb?: boolean;
      /**
       * Format: int32
       * @description Gets or sets the unlisted property, which would hide/show them in the directory.
       */
      unlisted?: number;
      /** @description Gets or sets the note. */
      note?: string;
      /**
       * Format: int32
       * @description Gets or sets modified by
       */
      modifiedBy?: number;
      /**
       * Format: date-time
       * @description Gets or sets the modified date
       */
      modifiedDate?: string;
      /** @description Gets or sets the family name bp. */
      familyNameBP?: string;
      /** @description Gets or sets a value indicating whether family is financially blocked. */
      parentsWebFinancialBlock: boolean;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfAssignmentModel: {
      results?: components["schemas"]["AssignmentModel"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    /**
     * @example {
     *   "sisAssignmentId": 1,
     *   "classCategoryId": 1,
     *   "classId": 1,
     *   "classAssignmentId": 1,
     *   "title": "String",
     *   "description": "String",
     *   "dateAssigned": "2020-01-01T00:00:00.0000000+00:00",
     *   "dateDue": "2020-01-01T00:00:00.0000000+00:00",
     *   "assignmentNumber": 1,
     *   "maxPoints": 1,
     *   "weight": 1,
     *   "extraCreditType": 1,
     *   "modifiedBy": 1,
     *   "modifiedDate": "2020-01-01T00:00:00.0000000+00:00",
     *   "publish": false,
     *   "calculate": false,
     *   "markedAsTest": false,
     *   "isLmsAssignment": false,
     *   "lmsItemId": 1,
     *   "lmsItemTypeId": 1,
     *   "descriptionHtml": "String",
     *   "dateAssignedUtc": "2020-01-01T00:00:00.0000000+00:00",
     *   "dateDueUtc": "2020-01-01T00:00:00.0000000+00:00",
     *   "systemOfRecord": "String",
     *   "googleAssignmentId": "String"
     * }
     */
    AssignmentModel: {
      /** Format: int32 */
      sisAssignmentId: number;
      /** Format: int32 */
      classCategoryId: number;
      /** Format: int32 */
      classId: number;
      /** Format: int32 */
      classAssignmentId: number;
      title: string;
      description: string;
      /** Format: date-time */
      dateAssigned: string;
      /** Format: date-time */
      dateDue: string;
      /** Format: int32 */
      assignmentNumber: number;
      /** Format: float */
      maxPoints: number;
      /** Format: float */
      weight: number;
      /** Format: int32 */
      extraCreditType: number;
      /** Format: int32 */
      modifiedBy: number;
      /** Format: date-time */
      modifiedDate: string;
      publish: boolean;
      calculate: boolean;
      markedAsTest: boolean;
      isLmsAssignment: boolean;
      /** Format: int32 */
      lmsItemId: number;
      /** Format: int32 */
      lmsItemTypeId: number;
      descriptionHtml: string;
      /** Format: date-time */
      dateAssignedUtc: string;
      /** Format: date-time */
      dateDueUtc: string;
      systemOfRecord: string;
      googleAssignmentId: string;
    };
    /**
     * @example {
     *   "classCategoryId": 1,
     *   "classId": 1,
     *   "classAssignmentId": 1,
     *   "title": "String",
     *   "description": "String",
     *   "dateAssigned": "2020-01-01T00:00:00.0000000+00:00",
     *   "dateDue": "2020-01-01T00:00:00.0000000+00:00",
     *   "assignmentNumber": 1,
     *   "maxPoints": 1,
     *   "weight": 1,
     *   "extraCreditType": 1,
     *   "modifiedBy": 1,
     *   "modifiedDate": "2020-01-01T00:00:00.0000000+00:00",
     *   "publish": false,
     *   "calculate": false,
     *   "markedAsTest": false,
     *   "isLmsAssignment": false,
     *   "lmsItemId": 1,
     *   "lmsItemTypeId": 1,
     *   "descriptionHtml": "String",
     *   "dateAssignedUtc": "2020-01-01T00:00:00.0000000+00:00",
     *   "dateDueUtc": "2020-01-01T00:00:00.0000000+00:00",
     *   "systemOfRecord": "String",
     *   "googleAssignmentId": "String"
     * }
     */
    AssignmentModelIn: {
      /** Format: int32 */
      classCategoryId: number;
      /** Format: int32 */
      classId: number;
      /** Format: int32 */
      classAssignmentId: number;
      title: string;
      description: string;
      /** Format: date-time */
      dateAssigned: string;
      /** Format: date-time */
      dateDue: string;
      /** Format: int32 */
      assignmentNumber: number;
      /** Format: float */
      maxPoints: number;
      /** Format: float */
      weight: number;
      /** Format: int32 */
      extraCreditType: number;
      /** Format: int32 */
      modifiedBy: number;
      /** Format: date-time */
      modifiedDate: string;
      publish: boolean;
      calculate: boolean;
      markedAsTest: boolean;
      isLmsAssignment: boolean;
      /** Format: int32 */
      lmsItemId: number;
      /** Format: int32 */
      lmsItemTypeId: number;
      descriptionHtml: string;
      /** Format: date-time */
      dateAssignedUtc: string;
      /** Format: date-time */
      dateDueUtc: string;
      systemOfRecord: string;
      googleAssignmentId: string;
    };
    Operation2: components["schemas"]["OperationBase"] & {
      value?: unknown;
    };
    /**
     * @example {
     *   "path": "String",
     *   "op": "String",
     *   "from": "String"
     * }
     */
    OperationBase: {
      path?: string;
      op?: string;
      from?: string;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfAssignmentCategoryModel: {
      results?: components["schemas"]["AssignmentCategoryModel"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    /**
     * @example {
     *   "sisCategoryId": 1,
     *   "classCategoryId": 1,
     *   "weight": 1,
     *   "classId": 1,
     *   "title": "String",
     *   "description": "String",
     *   "meetsInTerm1": false,
     *   "meetsInTerm2": false,
     *   "meetsInTerm3": false,
     *   "meetsInTerm4": false,
     *   "meetsInTerm5": false,
     *   "meetsInTerm6": false,
     *   "drop": 1
     * }
     */
    AssignmentCategoryModel: {
      /** Format: int32 */
      sisCategoryId: number;
      /** Format: int32 */
      classCategoryId: number;
      /** Format: float */
      weight?: number;
      /** Format: int32 */
      classId: number;
      title?: string;
      description?: string;
      meetsInTerm1?: boolean;
      meetsInTerm2?: boolean;
      meetsInTerm3?: boolean;
      meetsInTerm4?: boolean;
      meetsInTerm5?: boolean;
      meetsInTerm6?: boolean;
      /** Format: int32 */
      drop?: number;
    };
    /**
     * @example {
     *   "classCategoryId": 1,
     *   "weight": 1,
     *   "classId": 1,
     *   "title": "String",
     *   "description": "String",
     *   "meetsInTerm1": false,
     *   "meetsInTerm2": false,
     *   "meetsInTerm3": false,
     *   "meetsInTerm4": false,
     *   "meetsInTerm5": false,
     *   "meetsInTerm6": false,
     *   "drop": 1
     * }
     */
    AssignmentCategoryModelIn: {
      /** Format: int32 */
      classCategoryId: number;
      /** Format: float */
      weight?: number;
      /** Format: int32 */
      classId: number;
      title?: string;
      description?: string;
      meetsInTerm1?: boolean;
      meetsInTerm2?: boolean;
      meetsInTerm3?: boolean;
      meetsInTerm4?: boolean;
      meetsInTerm5?: boolean;
      meetsInTerm6?: boolean;
      /** Format: int32 */
      drop?: number;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfClassAssignmentGradeCodeTranslationModel: {
      results?: components["schemas"]["ClassAssignmentGradeCodeTranslationModel"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    /**
     * @example {
     *   "id": 1,
     *   "classId": 1,
     *   "letterCode": "String",
     *   "percent": 1,
     *   "statusCode": "String"
     * }
     */
    ClassAssignmentGradeCodeTranslationModel: {
      /** Format: int32 */
      id: number;
      /** Format: int32 */
      classId: number;
      letterCode: string;
      /** Format: decimal */
      percent: number;
      statusCode: string;
    };
    /**
     * @example {
     *   "error": {
     *     "code": "String",
     *     "message": "String",
     *     "target": "String",
     *     "details": [],
     *     "innererror": {}
     *   }
     * }
     */
    ErrorResponse2: {
      error: components["schemas"]["Error2"];
    };
    /**
     * @example {
     *   "code": "String",
     *   "message": "String",
     *   "target": "String",
     *   "details": [],
     *   "innererror": {}
     * }
     */
    Error2: {
      code: string;
      message: string;
      target?: string;
      details?: components["schemas"]["Error2"][];
      innererror?: components["schemas"]["Error2"];
    };
    /**
     * @example {
     *   "classId": 1,
     *   "letterCode": "String",
     *   "percent": 1,
     *   "statusCode": "String"
     * }
     */
    ClassAssignmentGradeCodeTranslationModelIn: {
      /** Format: int32 */
      classId: number;
      letterCode: string;
      /** Format: decimal */
      percent: number;
      statusCode: string;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfAssignmentGradesModel: {
      results?: components["schemas"]["AssignmentGradesModel"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    /**
     * @example {
     *   "sisGradeId": 1,
     *   "sisAssignmentId": 1,
     *   "studentId": 1,
     *   "maxPoints": 1,
     *   "receivedPoints": 1,
     *   "curvePoints": 1,
     *   "penaltyPoints": 1,
     *   "bonusPoints": 1,
     *   "notes": "String",
     *   "weight": 1,
     *   "status": "String",
     *   "emailSent": false,
     *   "displayGrade": "String"
     * }
     */
    AssignmentGradesModel: {
      /** Format: int32 */
      sisGradeId: number;
      /** Format: int32 */
      sisAssignmentId: number;
      /** Format: int32 */
      studentId: number;
      /** Format: float */
      maxPoints: number;
      /** Format: float */
      receivedPoints: number;
      /** Format: float */
      curvePoints: number;
      /** Format: float */
      penaltyPoints: number;
      /** Format: float */
      bonusPoints: number;
      notes: string;
      /** Format: float */
      weight: number;
      status: string;
      emailSent: boolean;
      displayGrade: string;
    };
    /**
     * @example {
     *   "sisAssignmentId": 1,
     *   "studentId": 1,
     *   "maxPoints": 1,
     *   "receivedPoints": 1,
     *   "curvePoints": 1,
     *   "penaltyPoints": 1,
     *   "bonusPoints": 1,
     *   "notes": "String",
     *   "weight": 1,
     *   "status": "String",
     *   "emailSent": false,
     *   "displayGrade": "String"
     * }
     */
    AssignmentGradesModelIn: {
      /** Format: int32 */
      sisAssignmentId: number;
      /** Format: int32 */
      studentId: number;
      /** Format: float */
      maxPoints: number;
      /** Format: float */
      receivedPoints: number;
      /** Format: float */
      curvePoints: number;
      /** Format: float */
      penaltyPoints: number;
      /** Format: float */
      bonusPoints: number;
      notes: string;
      /** Format: float */
      weight: number;
      status: string;
      emailSent: boolean;
      displayGrade: string;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfSchoolYearModel: {
      results?: components["schemas"]["SchoolYearModel"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    SchoolYearModel: components["schemas"]["SchoolYearRequest"] & {
      /**
       * Format: int32
       * @description Gets or sets the year identifier.
       */
      yearId: number;
      /**
       * Format: date-time
       * @description Gets or sets the first day.
       */
      firstDay?: string;
      /**
       * Format: date-time
       * @description Gets or sets the last day.
       */
      lastDay?: string;
      /** @description Gets or sets the school code. */
      schoolCode?: string;
    };
    /**
     * @description SchoolYear Request.
     * @example {
     *   "yearName": "String",
     *   "allowInquiry": false,
     *   "blockAcademicYear": false
     * }
     */
    SchoolYearRequest: {
      /** @description Gets or sets the name of the year. */
      yearName?: string;
      /** @description Flag indicating whether inquiry requests are allowed */
      allowInquiry?: boolean;
      /** @description Flag indicating whether to block Academic Year */
      blockAcademicYear: boolean;
    };
    Operation3: components["schemas"]["OperationBase2"] & {
      value?: unknown;
    };
    /**
     * @example {
     *   "path": "String",
     *   "op": "String",
     *   "from": "String"
     * }
     */
    OperationBase2: {
      path?: string;
      op?: string;
      from?: string;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfClassVmOutV1: {
      results?: components["schemas"]["ClassVmOutV1"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    ClassVmOutV1: components["schemas"]["ClassVmInV1"] & {
      /**
       * Format: int32
       * @description Gets or sets the class identifier.
       */
      classId: number;
    };
    ClassVmInV1: components["schemas"]["ClassVmIn"] & {
      /**
       * Format: int32
       * @description Gets or sets the alt staff identifier.
       */
      instructor2Id?: number;
    };
    /**
     * @description Class ClassVmIn.
     * @example {
     *   "aideId": 1,
     *   "closed": false,
     *   "color": "String",
     *   "colorText": "String",
     *   "courseID": 1,
     *   "googleCourseId": "String",
     *   "legacyClassId": "String",
     *   "linkedClassId": 1,
     *   "maleFemale": {},
     *   "modifiedBy": 1,
     *   "modifiedDate": "2020-01-01T00:00:00.0000000+00:00",
     *   "name": "String",
     *   "pattern": 1,
     *   "requiredRoom": 1,
     *   "section": "String",
     *   "staffId": 1,
     *   "term1": false,
     *   "term2": false,
     *   "term3": false,
     *   "term4": false,
     *   "term5": false,
     *   "term6": false,
     *   "yearId": 1
     * }
     */
    ClassVmIn: {
      /**
       * Format: int32
       * @description Gets or sets the aid identifier.
       */
      aideId?: number;
      /** @description Gets or sets a value indicating whether this ClassVmIn is closed. */
      closed?: boolean;
      /** @description Gets or sets the color. */
      color?: string;
      /** @description Gets or sets the color text. */
      colorText?: string;
      /**
       * Format: int32
       * @description Gets or sets the course identifier.
       */
      courseID: number;
      /** @description Gets or sets the google course identifier. */
      googleCourseId?: string;
      /** @description Gets or sets the legacy class identifier. */
      legacyClassId?: string;
      /**
       * Format: int32
       * @description Gets or sets the linked class identifier.
       */
      linkedClassId?: number;
      /** @description Gets or sets the male female. */
      maleFemale?: components["schemas"]["GenderedClassEnum"];
      /**
       * Format: int32
       * @description Id of user who modified class
       */
      modifiedBy?: number;
      /**
       * Format: date-time
       * @description Date modified.
       */
      modifiedDate?: string;
      /** @description Gets or sets the name. */
      name?: string;
      /**
       * Format: int32
       * @description Gets or sets the pattern.
       */
      pattern?: number;
      /**
       * Format: int32
       * @description Gets or sets the required room.
       */
      requiredRoom?: number;
      /** @description Gets or sets the section. */
      section?: string;
      /**
       * Format: int32
       * @description Gets or sets the staff identifier.
       */
      staffId?: number;
      /** @description Gets or sets a value indicating whether this Classes is term1. */
      term1: boolean;
      /** @description Gets or sets a value indicating whether this Classes is term2. */
      term2: boolean;
      /** @description Gets or sets a value indicating whether this Classes is term3. */
      term3: boolean;
      /** @description Gets or sets a value indicating whether this Classes is term4. */
      term4: boolean;
      /** @description Gets or sets a value indicating whether this Classes is term5. */
      term5: boolean;
      /** @description Gets or sets a value indicating whether this Classes is term6. */
      term6: boolean;
      /**
       * Format: int32
       * @description Gets or sets the year identifier.
       */
      yearId?: number;
    };
    /** @enum {string} */
    GenderedClassEnum: "Female" | "Male";
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfCoursesVmOut: {
      results?: components["schemas"]["CoursesVmOut"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    CoursesVmOut: components["schemas"]["CoursesVmIn"] & {
      /**
       * Format: int32
       * @description Gets or sets the course identifier.
       */
      courseID: number;
    };
    /**
     * @description Class CoursesVmIn.
     * @example {
     *   "levelID": 1,
     *   "legacyCourseID": "String",
     *   "title": "String",
     *   "abbreviation": "String",
     *   "activity": false,
     *   "attendance": false,
     *   "homeRoom": false,
     *   "schoolCode": "String",
     *   "department": "String",
     *   "active": false,
     *   "elective": false,
     *   "hs": false,
     *   "preSchool": false,
     *   "elementary": false,
     *   "middleSchool": false,
     *   "modifiedBy": 1,
     *   "modifiedDate": "2020-01-01T00:00:00.0000000+00:00",
     *   "courseType": "String",
     *   "defaultStaffID": 1,
     *   "departmentID": 1,
     *   "description": "String",
     *   "stateID": "String",
     *   "maxSize": 1
     * }
     */
    CoursesVmIn: {
      /**
       * Format: int32
       * @description Gets or sets the course level identifier.
       */
      levelID?: number;
      /** @description Gets or sets the legacy course identifier. (from school's previous SIS) */
      legacyCourseID?: string;
      /** @description Gets or sets the title. */
      title?: string;
      /** @description Gets or sets the abbreviation. */
      abbreviation?: string;
      /** @description Gets or sets a value indicating whether this Courses is activity. */
      activity: boolean;
      /**
       * @description Gets or sets a value indicating whether this Courses is intended
       *             to take attendance.
       */
      attendance: boolean;
      /** @description Gets or sets a value indicating whether [home room]. */
      homeRoom: boolean;
      /** @description Gets or sets the school code. */
      schoolCode?: string;
      /** @description Gets or sets the department. */
      department?: string;
      /** @description Gets or sets whether the course is active. */
      active?: boolean;
      /** @description Gets or sets whether the course counts as an elective. */
      elective?: boolean;
      hs?: boolean;
      /** @description Gets or sets whether this course is associated with "Pre School" for scheduling/filtering */
      preSchool?: boolean;
      /** @description Gets or sets whether this course is associated with "Elementary School" for scheduling/filtering */
      elementary?: boolean;
      /** @description Gets or sets whether this course is associated with "Middle School" for scheduling/filtering */
      middleSchool?: boolean;
      /**
       * Format: int32
       * @description Gets or sets modified by.
       */
      modifiedBy?: number;
      /**
       * Format: date-time
       * @description Gets or sets modified date.
       */
      modifiedDate?: string;
      /** @description Gets or sets the course type. */
      courseType?: string;
      /**
       * Format: int32
       * @description Gets or sets the default staff identifier.
       */
      defaultStaffID?: number;
      /**
       * Format: int32
       * @description Gets or sets the department identifier.
       */
      departmentID?: number;
      /** @description Gets or sets the description. */
      description?: string;
      /** @description Gets or sets the state identifier. (used with State Reporting exports) */
      stateID?: string;
      /**
       * Format: int32
       * @description Gets or sets the MaxSize of the course.  0 will allow this course to be uncapped.
       */
      maxSize?: number;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfClassEnrollmentVm: {
      results?: components["schemas"]["ClassEnrollmentVm"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    /**
     * @description Class EnrollmentVm.
     * @example {
     *   "altYearId": 1,
     *   "classId": 1,
     *   "enrolled": false,
     *   "enrolled1": false,
     *   "enrolled2": false,
     *   "enrolled3": false,
     *   "enrolled4": false,
     *   "enrolled5": false,
     *   "enrolled6": false,
     *   "gradeLevel": "String",
     *   "modifiedBy": 1,
     *   "modifiedDate": "2020-01-01T00:00:00.0000000+00:00",
     *   "studentId": 1
     * }
     */
    ClassEnrollmentVm: {
      /**
       * Format: int32
       * @description Gets or sets the alt year identifier.
       */
      altYearId?: number;
      /**
       * Format: int32
       * @description Gets or sets the class identifier.
       */
      classId: number;
      /** @description Gets or sets a value indicating whether this EnrollmentDto is enrolled. */
      enrolled: boolean;
      /** @description Gets or sets the enrolled1. */
      enrolled1?: boolean;
      /** @description Gets or sets the enrolled2. */
      enrolled2?: boolean;
      /** @description Gets or sets the enrolled3. */
      enrolled3?: boolean;
      /** @description Gets or sets the enrolled4. */
      enrolled4?: boolean;
      /** @description Gets or sets the enrolled5. */
      enrolled5?: boolean;
      /** @description Gets or sets the enrolled6. */
      enrolled6?: boolean;
      /** @description Gets or sets the grade level. */
      gradeLevel?: string;
      /**
       * Format: int32
       * @description Gets or sets the modified by field, set to PersonId.
       */
      modifiedBy?: number;
      /**
       * Format: date-time
       * @description Gets or sets the modified date.
       */
      modifiedDate?: string;
      /**
       * Format: int32
       * @description Gets or sets the student identifier.
       */
      studentId: number;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfSchoolConfigVmOut: {
      results?: components["schemas"]["SchoolConfigVmOut"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    SchoolConfigVmOut: components["schemas"]["SchoolConfigVmIn"] & {
      /** @description Gets or sets a value indicating whether this SchoolConfigVmOut is active. */
      active: boolean;
      /** @description Gets or sets the address. */
      address?: string;
      /** @description Gets or sets the city. */
      city?: string;
      /** @description Gets or sets the configuration school identifier. */
      configSchoolID: number;
      /** @description Gets or sets the default term identifier. */
      defaultTermId?: number;
      /**
       * Format: int32
       * @description Gets or sets the default year identifier.
       */
      defaultYearId?: number;
      /** @description Gets or sets the name of the district. */
      districtName?: string;
      /** @description Gets or sets the email address associated with the school. */
      email?: string;
      /**
       * Format: int32
       * @description Gets or sets who last modified this config school.
       */
      modifiedBy?: number;
      /**
       * Format: date-time
       * @description Gets or sets the modified date.
       */
      modifiedDate?: string;
      /**
       * Format: int32
       * @description Gets or sets the next year identifier.
       */
      nextYearId?: number;
      /** @description Gets or sets the parent alert. */
      parentAlert?: boolean;
      /**
       * Format: int32
       * @description Gets or sets the pw term identifier.
       */
      pwTermID?: number;
      /**
       * Format: int32
       * @description Gets or sets the pw term i d2.
       */
      pwTermID2?: number;
      /**
       * Format: int32
       * @description Gets or sets the pw year identifier.
       */
      pwYearID?: number;
      /** @description Gets or sets the school code. */
      schoolCode?: string;
      /** @description Gets or sets a value indicating whether [school LMS]. */
      schoolLMS: boolean;
      /** @description Gets or sets the name of the school. */
      schoolName?: string;
      /** @description Gets or sets the state or province the school is located. */
      state?: string;
      /** @description Gets or sets the zip code. */
      zip?: string;
    };
    /**
     * @description Class SchoolConfigVmIn.
     * @example {
     *   "fax": "String",
     *   "phone": "String"
     * }
     */
    SchoolConfigVmIn: {
      /** @description Gets or sets the fax number. */
      fax?: string;
      /** @description Gets or sets the phone number. */
      phone?: string;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfSchoolTermsVmOut: {
      results?: components["schemas"]["SchoolTermsVmOut"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    SchoolTermsVmOut: components["schemas"]["SchoolTermsVmIn"] & {
      /**
       * Format: int32
       * @description Gets or sets the school term identifier.
       */
      schoolTermID: number;
    };
    /**
     * @description Class SchoolTermsVmIn.
     * @example {
     *   "termID": 1,
     *   "yearID": 1,
     *   "name": "String",
     *   "firstDay": "2020-01-01T00:00:00.0000000+00:00",
     *   "lastDay": "2020-01-01T00:00:00.0000000+00:00",
     *   "schoolCode": "String",
     *   "semesterID": {},
     *   "modifiedBy": 1,
     *   "modifiedDate": "2020-01-01T00:00:00.0000000+00:00"
     * }
     */
    SchoolTermsVmIn: {
      /** @description Gets or sets the term identifier. */
      termID: number;
      /**
       * Format: int32
       * @description Gets or sets the year identifier.
       */
      yearID: number;
      /** @description Gets or sets the name. */
      name?: string;
      /**
       * Format: date-time
       * @description Gets or sets the first day.
       */
      firstDay?: string;
      /**
       * Format: date-time
       * @description Gets or sets the last day.
       */
      lastDay?: string;
      /** @description Gets or sets the school code. */
      schoolCode?: string;
      /** @description Gets or sets the semester identifier. */
      semesterID?: components["schemas"]["SemesterIDEnum"];
      /**
       * Format: int32
       * @description Gets or sets the modified by.
       */
      modifiedBy?: number;
      /**
       * Format: date-time
       * @description Gets or sets the modified date.
       */
      modifiedDate?: string;
    };
    /** @enum {integer} */
    SemesterIDEnum: 0 | 1 | 2 | 3;
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfClassVmOutV2: {
      results?: components["schemas"]["ClassVmOutV2"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    ClassVmOutV2: components["schemas"]["ClassVmInV2"] & {
      /**
       * Format: int32
       * @description Gets or sets the class identifier.
       */
      classId: number;
    };
    ClassVmInV2: components["schemas"]["ClassVmIn"] & {
      /**
       * Format: int32
       * @description Gets or sets the secondary staff identifier.
       */
      secondaryStaffId?: number;
    };
    /**
     * @example {
     *   "results": [],
     *   "currentPage": 1,
     *   "pageCount": 1,
     *   "pageSize": 1,
     *   "rowCount": 1,
     *   "nextPage": "String"
     * }
     */
    PagedResultOfSchoolTermsVmOutV2: {
      results?: components["schemas"]["SchoolTermsVmOutV2"][];
      /** Format: int32 */
      currentPage: number;
      /** Format: int32 */
      pageCount: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int64 */
      rowCount: number;
      nextPage?: string;
    };
    SchoolTermsVmOutV2: components["schemas"]["SchoolTermsVmIn"] & {
      /**
       * Format: int32
       * @description Gets or sets the school term identifier.
       */
      uniqueTermID: number;
    };
    OperationArray: components["schemas"]["Operation"][];
    ExternalApiApimDocumentDtoArray: components["schemas"]["ExternalApiApimDocumentDto"][];
    StatusModelArray: components["schemas"]["StatusModel"][];
    SubStatusModelArray: components["schemas"]["SubStatusModel"][];
    Operation2Array: components["schemas"]["Operation2"][];
    Operation3Array: components["schemas"]["Operation3"][];
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Gets Subscription information from cosmos
   * @description Gets Subscription information from cosmos
   */
  Subscriptions_GetSubscription: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        subscriptionId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExternalApiApimDocumentDtoArray"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of addresses
   * @description Gets a list of addresses
   */
  Address_GetAddresses: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfAddressVM"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates a new address
   * @description Creates a new address
   */
  Address_CreateAddress: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example {
         *   "addressID": 1,
         *   "address1": "String",
         *   "address2": "String",
         *   "city": "String",
         *   "state": "String",
         *   "zip": "String",
         *   "country": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "greeting1": "String",
         *   "greeting2": "String",
         *   "greeting3": "String",
         *   "greeting4": "String",
         *   "greeting5": "String",
         *   "newStudentInquiryID": 1
         * }
         */
        "application/json-patch+json": components["schemas"]["AddressVM"];
        /**
         * @example {
         *   "addressID": 1,
         *   "address1": "String",
         *   "address2": "String",
         *   "city": "String",
         *   "state": "String",
         *   "zip": "String",
         *   "country": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "greeting1": "String",
         *   "greeting2": "String",
         *   "greeting3": "String",
         *   "greeting4": "String",
         *   "greeting5": "String",
         *   "newStudentInquiryID": 1
         * }
         */
        "application/json": components["schemas"]["AddressVM"];
        /**
         * @example {
         *   "addressID": 1,
         *   "address1": "String",
         *   "address2": "String",
         *   "city": "String",
         *   "state": "String",
         *   "zip": "String",
         *   "country": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "greeting1": "String",
         *   "greeting2": "String",
         *   "greeting3": "String",
         *   "greeting4": "String",
         *   "greeting5": "String",
         *   "newStudentInquiryID": 1
         * }
         */
        "text/json": components["schemas"]["AddressVM"];
        /**
         * @example {
         *   "addressID": 1,
         *   "address1": "String",
         *   "address2": "String",
         *   "city": "String",
         *   "state": "String",
         *   "zip": "String",
         *   "country": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "greeting1": "String",
         *   "greeting2": "String",
         *   "greeting3": "String",
         *   "greeting4": "String",
         *   "greeting5": "String",
         *   "newStudentInquiryID": 1
         * }
         */
        "application/*+json": components["schemas"]["AddressVM"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AddressVM"];
        };
      };
      201: {
        content: {
          "application/json": components["schemas"]["AddressVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a single address
   * @description Gets a single address
   */
  Address_GetAddressById: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        addressId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AddressVM"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces an address
   * @description Replaces an address
   */
  Address_ReplaceAddress: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        addressId: number;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example {
         *   "addressID": 1,
         *   "address1": "String",
         *   "address2": "String",
         *   "city": "String",
         *   "state": "String",
         *   "zip": "String",
         *   "country": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "greeting1": "String",
         *   "greeting2": "String",
         *   "greeting3": "String",
         *   "greeting4": "String",
         *   "greeting5": "String",
         *   "newStudentInquiryID": 1
         * }
         */
        "application/json-patch+json": components["schemas"]["AddressVM"];
        /**
         * @example {
         *   "addressID": 1,
         *   "address1": "String",
         *   "address2": "String",
         *   "city": "String",
         *   "state": "String",
         *   "zip": "String",
         *   "country": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "greeting1": "String",
         *   "greeting2": "String",
         *   "greeting3": "String",
         *   "greeting4": "String",
         *   "greeting5": "String",
         *   "newStudentInquiryID": 1
         * }
         */
        "application/json": components["schemas"]["AddressVM"];
        /**
         * @example {
         *   "addressID": 1,
         *   "address1": "String",
         *   "address2": "String",
         *   "city": "String",
         *   "state": "String",
         *   "zip": "String",
         *   "country": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "greeting1": "String",
         *   "greeting2": "String",
         *   "greeting3": "String",
         *   "greeting4": "String",
         *   "greeting5": "String",
         *   "newStudentInquiryID": 1
         * }
         */
        "text/json": components["schemas"]["AddressVM"];
        /**
         * @example {
         *   "addressID": 1,
         *   "address1": "String",
         *   "address2": "String",
         *   "city": "String",
         *   "state": "String",
         *   "zip": "String",
         *   "country": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "greeting1": "String",
         *   "greeting2": "String",
         *   "greeting3": "String",
         *   "greeting4": "String",
         *   "greeting5": "String",
         *   "newStudentInquiryID": 1
         * }
         */
        "application/*+json": components["schemas"]["AddressVM"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AddressVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Update an address based on the json patch document
   * @description Update an address based on the json patch document
   */
  Address_UpdateAddress: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        addressId: number;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AddressVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of people demographic information
   * @description Gets a list of people demographic information
   */
  Demographic_GetPersonDemographics: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfPersonDemographicVM"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Get a person's demographic information record
   * @description Get a person's demographic information record
   */
  Demographic_GetPersonDemographic: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The person id */
        personId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonDemographicVM"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates a person's demographic information
   * @description Updates a person's demographic information
   */
  Demographic_UpdatePersonDemographic: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The person id of the person being updated. */
        personId: number;
      };
    };
    /** @description The person entity with updates. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "personId": 1,
         *   "gender": "female",
         *   "birthdate": "2020-01-01",
         *   "ethnicity": "String",
         *   "citizenship": "USA",
         *   "maritalStatus": "Married",
         *   "primaryLanguage": "Welsh",
         *   "birthplace": "String",
         *   "birthCity": "Cardiff",
         *   "birthState": "Wales",
         *   "birthCountry": "UK"
         * }
         */
        "application/json-patch+json": components["schemas"]["PersonDemographicVM"];
        /**
         * @example {
         *   "personId": 1,
         *   "gender": "female",
         *   "birthdate": "2020-01-01",
         *   "ethnicity": "String",
         *   "citizenship": "USA",
         *   "maritalStatus": "Married",
         *   "primaryLanguage": "Welsh",
         *   "birthplace": "String",
         *   "birthCity": "Cardiff",
         *   "birthState": "Wales",
         *   "birthCountry": "UK"
         * }
         */
        "application/json": components["schemas"]["PersonDemographicVM"];
        /**
         * @example {
         *   "personId": 1,
         *   "gender": "female",
         *   "birthdate": "2020-01-01",
         *   "ethnicity": "String",
         *   "citizenship": "USA",
         *   "maritalStatus": "Married",
         *   "primaryLanguage": "Welsh",
         *   "birthplace": "String",
         *   "birthCity": "Cardiff",
         *   "birthState": "Wales",
         *   "birthCountry": "UK"
         * }
         */
        "text/json": components["schemas"]["PersonDemographicVM"];
        /**
         * @example {
         *   "personId": 1,
         *   "gender": "female",
         *   "birthdate": "2020-01-01",
         *   "ethnicity": "String",
         *   "citizenship": "USA",
         *   "maritalStatus": "Married",
         *   "primaryLanguage": "Welsh",
         *   "birthplace": "String",
         *   "birthCity": "Cardiff",
         *   "birthState": "Wales",
         *   "birthCountry": "UK"
         * }
         */
        "application/*+json": components["schemas"]["PersonDemographicVM"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonDemographicVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates a person's demographic information based on the json patch document
   * @description Updates a person's demographic information based on the json patch document
   */
  Demographic_JsonPatchPersonDemographic: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The person id of the person being patched. */
        personId: number;
      };
    };
    /** @description The patch document with changes */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonDemographicVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of people's directory preferences
   * @description Gets a list of people's directory preferences
   */
  DirectoryPreferences_GetDirectoryPreferences: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfDirectoryPreferencesVmOut"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a single person's directory preferences information
   * @description Gets a single person's directory preferences information
   */
  DirectoryPreferences_GetDirectoryPreferencesById: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        personId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DirectoryPreferencesVmOut"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces a person's directory preferences information
   * @description Replaces a person's directory preferences information
   */
  DirectoryPreferences_ReplaceDirectoryPreferences: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        personId: number;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example {
         *   "blockName": false,
         *   "blockCellPhone": false,
         *   "blockHomePhone": false,
         *   "blockAddress": false,
         *   "blockEmail": false
         * }
         */
        "application/json-patch+json": components["schemas"]["DirectoryPreferencesVmIn"];
        /**
         * @example {
         *   "blockName": false,
         *   "blockCellPhone": false,
         *   "blockHomePhone": false,
         *   "blockAddress": false,
         *   "blockEmail": false
         * }
         */
        "application/json": components["schemas"]["DirectoryPreferencesVmIn"];
        /**
         * @example {
         *   "blockName": false,
         *   "blockCellPhone": false,
         *   "blockHomePhone": false,
         *   "blockAddress": false,
         *   "blockEmail": false
         * }
         */
        "text/json": components["schemas"]["DirectoryPreferencesVmIn"];
        /**
         * @example {
         *   "blockName": false,
         *   "blockCellPhone": false,
         *   "blockHomePhone": false,
         *   "blockAddress": false,
         *   "blockEmail": false
         * }
         */
        "application/*+json": components["schemas"]["DirectoryPreferencesVmIn"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DirectoryPreferencesVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Update a person's directory preferences information based on the json patch document
   * @description Update a person's directory preferences information based on the json patch document
   */
  DirectoryPreferences_UpdateDirectoryPreferences: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        personId: number;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DirectoryPreferencesVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of people education information
   * @description Gets a list of people education information
   */
  Education_GetPersonEducation: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfEducationVmOut"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Get a person's education record
   * @description Get a person's education record
   */
  Education_GetPersonEducationById: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The education record id */
        educationId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EducationVmOut"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates a person's education information
   * @description Updates a person's education information
   */
  Education_ReplacePersonEducation: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The education id of the record being updated. */
        educationId: number;
      };
    };
    /** @description The person entity with updates. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "personId": 1,
         *   "degreeSchool": "Name",
         *   "degreeName": "String",
         *   "degreeYear": 2020,
         *   "educationLevel": 1,
         *   "degreeType": "Associates"
         * }
         */
        "application/json-patch+json": components["schemas"]["EducationVmIn"];
        /**
         * @example {
         *   "personId": 1,
         *   "degreeSchool": "Name",
         *   "degreeName": "String",
         *   "degreeYear": 2020,
         *   "educationLevel": 1,
         *   "degreeType": "Associates"
         * }
         */
        "application/json": components["schemas"]["EducationVmIn"];
        /**
         * @example {
         *   "personId": 1,
         *   "degreeSchool": "Name",
         *   "degreeName": "String",
         *   "degreeYear": 2020,
         *   "educationLevel": 1,
         *   "degreeType": "Associates"
         * }
         */
        "text/json": components["schemas"]["EducationVmIn"];
        /**
         * @example {
         *   "personId": 1,
         *   "degreeSchool": "Name",
         *   "degreeName": "String",
         *   "degreeYear": 2020,
         *   "educationLevel": 1,
         *   "degreeType": "Associates"
         * }
         */
        "application/*+json": components["schemas"]["EducationVmIn"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EducationVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates a person's education information based on the json patch document
   * @description Updates a person's education information based on the json patch document
   */
  Education_UpdatePersonEducation: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The education id of the record being patched. */
        educationId: number;
      };
    };
    /** @description The patch document with changes */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EducationVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of emergencyContacts
   * @description Gets a list of emergencyContacts
   */
  EmergencyContact_GetEmergencyContacts: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfEmergencyContactVM"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates a new emergencyContact
   * @description Creates a new emergencyContact
   */
  EmergencyContact_CreateEmergencyContact: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example {
         *   "emergencyContactID": 1,
         *   "firstName": "String",
         *   "lastName": "String",
         *   "middleName": "String",
         *   "salutation": "String",
         *   "suffix": "String",
         *   "homePhone": "String",
         *   "cellPhone": "String",
         *   "email": "String",
         *   "relationship": "String",
         *   "workPhone": "String",
         *   "studentID": 1,
         *   "sortOrder": 1,
         *   "refID": 1,
         *   "note": "String",
         *   "countryCode": "String",
         *   "portalSortOrder": 1
         * }
         */
        "application/json-patch+json": components["schemas"]["EmergencyContactVM"];
        /**
         * @example {
         *   "emergencyContactID": 1,
         *   "firstName": "String",
         *   "lastName": "String",
         *   "middleName": "String",
         *   "salutation": "String",
         *   "suffix": "String",
         *   "homePhone": "String",
         *   "cellPhone": "String",
         *   "email": "String",
         *   "relationship": "String",
         *   "workPhone": "String",
         *   "studentID": 1,
         *   "sortOrder": 1,
         *   "refID": 1,
         *   "note": "String",
         *   "countryCode": "String",
         *   "portalSortOrder": 1
         * }
         */
        "application/json": components["schemas"]["EmergencyContactVM"];
        /**
         * @example {
         *   "emergencyContactID": 1,
         *   "firstName": "String",
         *   "lastName": "String",
         *   "middleName": "String",
         *   "salutation": "String",
         *   "suffix": "String",
         *   "homePhone": "String",
         *   "cellPhone": "String",
         *   "email": "String",
         *   "relationship": "String",
         *   "workPhone": "String",
         *   "studentID": 1,
         *   "sortOrder": 1,
         *   "refID": 1,
         *   "note": "String",
         *   "countryCode": "String",
         *   "portalSortOrder": 1
         * }
         */
        "text/json": components["schemas"]["EmergencyContactVM"];
        /**
         * @example {
         *   "emergencyContactID": 1,
         *   "firstName": "String",
         *   "lastName": "String",
         *   "middleName": "String",
         *   "salutation": "String",
         *   "suffix": "String",
         *   "homePhone": "String",
         *   "cellPhone": "String",
         *   "email": "String",
         *   "relationship": "String",
         *   "workPhone": "String",
         *   "studentID": 1,
         *   "sortOrder": 1,
         *   "refID": 1,
         *   "note": "String",
         *   "countryCode": "String",
         *   "portalSortOrder": 1
         * }
         */
        "application/*+json": components["schemas"]["EmergencyContactVM"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["EmergencyContactVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a single emergencyContact
   * @description Gets a single emergencyContact
   */
  EmergencyContact_GetEmergencyContactById: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        emergencyContactId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EmergencyContactVM"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces an emergencyContact
   * @description Replaces an emergencyContact
   */
  EmergencyContact_ReplaceEmergencyContact: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        emergencyContactId: number;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example {
         *   "emergencyContactID": 1,
         *   "firstName": "String",
         *   "lastName": "String",
         *   "middleName": "String",
         *   "salutation": "String",
         *   "suffix": "String",
         *   "homePhone": "String",
         *   "cellPhone": "String",
         *   "email": "String",
         *   "relationship": "String",
         *   "workPhone": "String",
         *   "studentID": 1,
         *   "sortOrder": 1,
         *   "refID": 1,
         *   "note": "String",
         *   "countryCode": "String",
         *   "portalSortOrder": 1
         * }
         */
        "application/json-patch+json": components["schemas"]["EmergencyContactVM"];
        /**
         * @example {
         *   "emergencyContactID": 1,
         *   "firstName": "String",
         *   "lastName": "String",
         *   "middleName": "String",
         *   "salutation": "String",
         *   "suffix": "String",
         *   "homePhone": "String",
         *   "cellPhone": "String",
         *   "email": "String",
         *   "relationship": "String",
         *   "workPhone": "String",
         *   "studentID": 1,
         *   "sortOrder": 1,
         *   "refID": 1,
         *   "note": "String",
         *   "countryCode": "String",
         *   "portalSortOrder": 1
         * }
         */
        "application/json": components["schemas"]["EmergencyContactVM"];
        /**
         * @example {
         *   "emergencyContactID": 1,
         *   "firstName": "String",
         *   "lastName": "String",
         *   "middleName": "String",
         *   "salutation": "String",
         *   "suffix": "String",
         *   "homePhone": "String",
         *   "cellPhone": "String",
         *   "email": "String",
         *   "relationship": "String",
         *   "workPhone": "String",
         *   "studentID": 1,
         *   "sortOrder": 1,
         *   "refID": 1,
         *   "note": "String",
         *   "countryCode": "String",
         *   "portalSortOrder": 1
         * }
         */
        "text/json": components["schemas"]["EmergencyContactVM"];
        /**
         * @example {
         *   "emergencyContactID": 1,
         *   "firstName": "String",
         *   "lastName": "String",
         *   "middleName": "String",
         *   "salutation": "String",
         *   "suffix": "String",
         *   "homePhone": "String",
         *   "cellPhone": "String",
         *   "email": "String",
         *   "relationship": "String",
         *   "workPhone": "String",
         *   "studentID": 1,
         *   "sortOrder": 1,
         *   "refID": 1,
         *   "note": "String",
         *   "countryCode": "String",
         *   "portalSortOrder": 1
         * }
         */
        "application/*+json": components["schemas"]["EmergencyContactVM"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EmergencyContactVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Update an emergencyContact based on the json patch document
   * @description Update an emergencyContact based on the json patch document
   */
  EmergencyContact_UpdateEmergencyContact: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        emergencyContactId: number;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EmergencyContactVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of people parent alert information
   * @description Gets a list of people parent alert information
   */
  ParentAlert_GetParentAlert: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfParentAlertEntity"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Get a person's parent alert record
   * @description Get a person's parent alert record
   */
  ParentAlert_GetParentAlertById: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The person id */
        personId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ParentAlertEntity"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates a person's parent alert information
   * @description Updates a person's parent alert information
   */
  ParentAlert_UpdateParentAlert: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The person id of the person being updated. */
        personId: number;
      };
    };
    /** @description The person entity with updates. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "id": "String",
         *   "personId": 1,
         *   "parentAlertPreference": "String",
         *   "parentAlertHomePhone": false,
         *   "parentAlertCellPhone": false,
         *   "parentAlertWorkPhone": false,
         *   "parentAlertNoText": false
         * }
         */
        "application/json-patch+json": components["schemas"]["ParentAlertEntity"];
        /**
         * @example {
         *   "id": "String",
         *   "personId": 1,
         *   "parentAlertPreference": "String",
         *   "parentAlertHomePhone": false,
         *   "parentAlertCellPhone": false,
         *   "parentAlertWorkPhone": false,
         *   "parentAlertNoText": false
         * }
         */
        "application/json": components["schemas"]["ParentAlertEntity"];
        /**
         * @example {
         *   "id": "String",
         *   "personId": 1,
         *   "parentAlertPreference": "String",
         *   "parentAlertHomePhone": false,
         *   "parentAlertCellPhone": false,
         *   "parentAlertWorkPhone": false,
         *   "parentAlertNoText": false
         * }
         */
        "text/json": components["schemas"]["ParentAlertEntity"];
        /**
         * @example {
         *   "id": "String",
         *   "personId": 1,
         *   "parentAlertPreference": "String",
         *   "parentAlertHomePhone": false,
         *   "parentAlertCellPhone": false,
         *   "parentAlertWorkPhone": false,
         *   "parentAlertNoText": false
         * }
         */
        "application/*+json": components["schemas"]["ParentAlertEntity"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ParentAlertEntity"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates a person's parent alert information based on the json patch document
   * @description Updates a person's parent alert information based on the json patch document
   */
  ParentAlert_JsonPatchParentAlert: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The person id of the person being patched. */
        personId: number;
      };
    };
    /** @description The patch document with changes */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ParentAlertEntity"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of parents
   * @description Gets a list of parents
   */
  ParentStudent_GetParents: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfParentStudentVM"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates a new parent student
   * @description Creates a new parent student
   */
  ParentStudent_CreateParentStudent: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example {
         *   "parentID": 1,
         *   "studentID": 1,
         *   "custody": false,
         *   "correspondence": false,
         *   "relationship": "String",
         *   "grandparent": false,
         *   "emergencyContact": false,
         *   "reportCard": false,
         *   "pwBlock": false,
         *   "pickUp": false,
         *   "parentsWeb": false,
         *   "reEnroll": false
         * }
         */
        "application/json-patch+json": components["schemas"]["ParentStudentVM"];
        /**
         * @example {
         *   "parentID": 1,
         *   "studentID": 1,
         *   "custody": false,
         *   "correspondence": false,
         *   "relationship": "String",
         *   "grandparent": false,
         *   "emergencyContact": false,
         *   "reportCard": false,
         *   "pwBlock": false,
         *   "pickUp": false,
         *   "parentsWeb": false,
         *   "reEnroll": false
         * }
         */
        "application/json": components["schemas"]["ParentStudentVM"];
        /**
         * @example {
         *   "parentID": 1,
         *   "studentID": 1,
         *   "custody": false,
         *   "correspondence": false,
         *   "relationship": "String",
         *   "grandparent": false,
         *   "emergencyContact": false,
         *   "reportCard": false,
         *   "pwBlock": false,
         *   "pickUp": false,
         *   "parentsWeb": false,
         *   "reEnroll": false
         * }
         */
        "text/json": components["schemas"]["ParentStudentVM"];
        /**
         * @example {
         *   "parentID": 1,
         *   "studentID": 1,
         *   "custody": false,
         *   "correspondence": false,
         *   "relationship": "String",
         *   "grandparent": false,
         *   "emergencyContact": false,
         *   "reportCard": false,
         *   "pwBlock": false,
         *   "pickUp": false,
         *   "parentsWeb": false,
         *   "reEnroll": false
         * }
         */
        "application/*+json": components["schemas"]["ParentStudentVM"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ParentStudentVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a single parent student
   * @description Gets a single parent student
   */
  ParentStudent_GetParentStudentById: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        parentId: number;
        /** @description Format - int32. */
        studentId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ParentStudentVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces a parent student
   * @description Replaces a parent student
   */
  ParentStudent_ReplaceParentStudent: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        parentId: number;
        /** @description Format - int32. */
        studentId: number;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example {
         *   "parentID": 1,
         *   "studentID": 1,
         *   "custody": false,
         *   "correspondence": false,
         *   "relationship": "String",
         *   "grandparent": false,
         *   "emergencyContact": false,
         *   "reportCard": false,
         *   "pwBlock": false,
         *   "pickUp": false,
         *   "parentsWeb": false,
         *   "reEnroll": false
         * }
         */
        "application/json-patch+json": components["schemas"]["ParentStudentVM"];
        /**
         * @example {
         *   "parentID": 1,
         *   "studentID": 1,
         *   "custody": false,
         *   "correspondence": false,
         *   "relationship": "String",
         *   "grandparent": false,
         *   "emergencyContact": false,
         *   "reportCard": false,
         *   "pwBlock": false,
         *   "pickUp": false,
         *   "parentsWeb": false,
         *   "reEnroll": false
         * }
         */
        "application/json": components["schemas"]["ParentStudentVM"];
        /**
         * @example {
         *   "parentID": 1,
         *   "studentID": 1,
         *   "custody": false,
         *   "correspondence": false,
         *   "relationship": "String",
         *   "grandparent": false,
         *   "emergencyContact": false,
         *   "reportCard": false,
         *   "pwBlock": false,
         *   "pickUp": false,
         *   "parentsWeb": false,
         *   "reEnroll": false
         * }
         */
        "text/json": components["schemas"]["ParentStudentVM"];
        /**
         * @example {
         *   "parentID": 1,
         *   "studentID": 1,
         *   "custody": false,
         *   "correspondence": false,
         *   "relationship": "String",
         *   "grandparent": false,
         *   "emergencyContact": false,
         *   "reportCard": false,
         *   "pwBlock": false,
         *   "pickUp": false,
         *   "parentsWeb": false,
         *   "reEnroll": false
         * }
         */
        "application/*+json": components["schemas"]["ParentStudentVM"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ParentStudentVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Update a parent student based on the json patch document
   * @description Update a parent student based on the json patch document
   */
  ParentStudent_UpdateParentStudent: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        parentId: number;
        /** @description Format - int32. */
        studentId: number;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ParentStudentVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of people
   * @description Gets a list of people
   */
  People_GetPeopleBase: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfPersonVM"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Get a person record
   * @description Get a person record
   */
  People_GetPersonBase: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The person id */
        personId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonVM"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates a person
   * @description Updates a person
   */
  People_UpdatePersonBase: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The person id of the person being updated. */
        personId: number;
      };
    };
    /** @description The person entity with updates. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "personId": 1,
         *   "firstName": "String",
         *   "lastName": "String",
         *   "middleName": "String",
         *   "nickName": "String",
         *   "salutation": "Mrs",
         *   "suffix": "Jr.",
         *   "email": "String",
         *   "email2": "String",
         *   "username": "String",
         *   "homePhone": "555-555-5555",
         *   "cellPhone": "555-555-5555",
         *   "addressID": 1,
         *   "deceased": false,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "application/json-patch+json": components["schemas"]["PersonVM"];
        /**
         * @example {
         *   "personId": 1,
         *   "firstName": "String",
         *   "lastName": "String",
         *   "middleName": "String",
         *   "nickName": "String",
         *   "salutation": "Mrs",
         *   "suffix": "Jr.",
         *   "email": "String",
         *   "email2": "String",
         *   "username": "String",
         *   "homePhone": "555-555-5555",
         *   "cellPhone": "555-555-5555",
         *   "addressID": 1,
         *   "deceased": false,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "application/json": components["schemas"]["PersonVM"];
        /**
         * @example {
         *   "personId": 1,
         *   "firstName": "String",
         *   "lastName": "String",
         *   "middleName": "String",
         *   "nickName": "String",
         *   "salutation": "Mrs",
         *   "suffix": "Jr.",
         *   "email": "String",
         *   "email2": "String",
         *   "username": "String",
         *   "homePhone": "555-555-5555",
         *   "cellPhone": "555-555-5555",
         *   "addressID": 1,
         *   "deceased": false,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "text/json": components["schemas"]["PersonVM"];
        /**
         * @example {
         *   "personId": 1,
         *   "firstName": "String",
         *   "lastName": "String",
         *   "middleName": "String",
         *   "nickName": "String",
         *   "salutation": "Mrs",
         *   "suffix": "Jr.",
         *   "email": "String",
         *   "email2": "String",
         *   "username": "String",
         *   "homePhone": "555-555-5555",
         *   "cellPhone": "555-555-5555",
         *   "addressID": 1,
         *   "deceased": false,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "application/*+json": components["schemas"]["PersonVM"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates a person based on the json patch document
   * @description Updates a person based on the json patch document
   */
  People_JsonPatchPersonBase: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The person id of the person being patched. */
        personId: number;
      };
    };
    /** @description The patch document with changes */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of people public school
   * @description Gets a list of people public school
   */
  PublicSchools_GetPersonPublicSchools: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfPublicSchoolVM"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Get a person's public schools record
   * @description Get a person's public schools record
   */
  PublicSchools_GetPersonPublicSchoolsById: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The person id */
        personId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PublicSchoolVM"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Update a person's public schools record
   * @description Update a person's public schools record
   */
  PublicSchools_UpdatePublicSchools: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The person id of the person being updated. */
        personId: number;
      };
    };
    /** @description The person entity with updates. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "personId": 12345,
         *   "publicSchoolDistrict": "District Name",
         *   "publicSchoolCounty": "County Name",
         *   "publicSchoolState": "NE",
         *   "publicSchoolLocalSchool": "School Name",
         *   "publicSchoolCode": "School Code"
         * }
         */
        "application/json-patch+json": components["schemas"]["PublicSchoolVM"];
        /**
         * @example {
         *   "personId": 12345,
         *   "publicSchoolDistrict": "District Name",
         *   "publicSchoolCounty": "County Name",
         *   "publicSchoolState": "NE",
         *   "publicSchoolLocalSchool": "School Name",
         *   "publicSchoolCode": "School Code"
         * }
         */
        "application/json": components["schemas"]["PublicSchoolVM"];
        /**
         * @example {
         *   "personId": 12345,
         *   "publicSchoolDistrict": "District Name",
         *   "publicSchoolCounty": "County Name",
         *   "publicSchoolState": "NE",
         *   "publicSchoolLocalSchool": "School Name",
         *   "publicSchoolCode": "School Code"
         * }
         */
        "text/json": components["schemas"]["PublicSchoolVM"];
        /**
         * @example {
         *   "personId": 12345,
         *   "publicSchoolDistrict": "District Name",
         *   "publicSchoolCounty": "County Name",
         *   "publicSchoolState": "NE",
         *   "publicSchoolLocalSchool": "School Name",
         *   "publicSchoolCode": "School Code"
         * }
         */
        "application/*+json": components["schemas"]["PublicSchoolVM"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PublicSchoolVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates a person based on the json patch document
   * @description Updates a person based on the json patch document
   */
  PublicSchools_JsonPatchPublicSchools: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The person id of the person being patched. */
        personId: number;
      };
    };
    /** @description The patch document with changes */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PublicSchoolVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of people families
   * @description Gets a list of people families
   */
  PersonFamily_GetPeopleFamilies: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfPersonFamilyVM"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates a new person family
   * @description Creates a new person family
   */
  PersonFamily_CreatePersonFamily: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example {
         *   "personId": 1,
         *   "familyId": 1,
         *   "parent": false,
         *   "student": false,
         *   "financialResponsibility": false,
         *   "financialResponsibilityPercent": "String",
         *   "familyOrder": 1,
         *   "factsCustomer": false
         * }
         */
        "application/json-patch+json": components["schemas"]["PersonFamilyVM"];
        /**
         * @example {
         *   "personId": 1,
         *   "familyId": 1,
         *   "parent": false,
         *   "student": false,
         *   "financialResponsibility": false,
         *   "financialResponsibilityPercent": "String",
         *   "familyOrder": 1,
         *   "factsCustomer": false
         * }
         */
        "application/json": components["schemas"]["PersonFamilyVM"];
        /**
         * @example {
         *   "personId": 1,
         *   "familyId": 1,
         *   "parent": false,
         *   "student": false,
         *   "financialResponsibility": false,
         *   "financialResponsibilityPercent": "String",
         *   "familyOrder": 1,
         *   "factsCustomer": false
         * }
         */
        "text/json": components["schemas"]["PersonFamilyVM"];
        /**
         * @example {
         *   "personId": 1,
         *   "familyId": 1,
         *   "parent": false,
         *   "student": false,
         *   "financialResponsibility": false,
         *   "financialResponsibilityPercent": "String",
         *   "familyOrder": 1,
         *   "factsCustomer": false
         * }
         */
        "application/*+json": components["schemas"]["PersonFamilyVM"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PersonFamilyVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a single person Family
   * @description Gets a single person Family
   */
  PersonFamily_GetPersonFamilyById: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        familyId: number;
        /** @description Format - int32. */
        personId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonFamilyVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces a person family
   * @description Replaces a person family
   */
  PersonFamily_ReplacePersonFamily: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        familyId: number;
        /** @description Format - int32. */
        personId: number;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example {
         *   "personId": 1,
         *   "familyId": 1,
         *   "parent": false,
         *   "student": false,
         *   "financialResponsibility": false,
         *   "financialResponsibilityPercent": "String",
         *   "familyOrder": 1,
         *   "factsCustomer": false
         * }
         */
        "application/json-patch+json": components["schemas"]["PersonFamilyVM"];
        /**
         * @example {
         *   "personId": 1,
         *   "familyId": 1,
         *   "parent": false,
         *   "student": false,
         *   "financialResponsibility": false,
         *   "financialResponsibilityPercent": "String",
         *   "familyOrder": 1,
         *   "factsCustomer": false
         * }
         */
        "application/json": components["schemas"]["PersonFamilyVM"];
        /**
         * @example {
         *   "personId": 1,
         *   "familyId": 1,
         *   "parent": false,
         *   "student": false,
         *   "financialResponsibility": false,
         *   "financialResponsibilityPercent": "String",
         *   "familyOrder": 1,
         *   "factsCustomer": false
         * }
         */
        "text/json": components["schemas"]["PersonFamilyVM"];
        /**
         * @example {
         *   "personId": 1,
         *   "familyId": 1,
         *   "parent": false,
         *   "student": false,
         *   "financialResponsibility": false,
         *   "financialResponsibilityPercent": "String",
         *   "familyOrder": 1,
         *   "factsCustomer": false
         * }
         */
        "application/*+json": components["schemas"]["PersonFamilyVM"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonFamilyVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Update a person family based on the json patch document
   * @description Update a person family based on the json patch document
   */
  PersonFamily_UpdatePersonFamily: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        familyId: number;
        /** @description Format - int32. */
        personId: number;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonFamilyVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of people religion information
   * @description Gets a list of people religion information
   */
  Religion_GetReligion: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfPersonReligionEntity"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a single person's religion information
   * @description Gets a single person's religion information
   */
  Religion_GetReligionById: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        personId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonReligionEntity"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces a person's religion information
   * @description Replaces a person's religion information
   */
  Religion_ReplaceReligion: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        personId: number;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example {
         *   "id": "String",
         *   "personId": 1,
         *   "denomination": "String",
         *   "congregationId": 1,
         *   "baptismCongregation": "String",
         *   "baptismCity": "String",
         *   "baptismState": "String",
         *   "baptismDate": "String",
         *   "communionCongregation": "String",
         *   "communionCity": "String",
         *   "communionState": "String",
         *   "communionDate": "String",
         *   "confirmationCongregation": "String",
         *   "confirmationCity": "String",
         *   "confirmationState": "String",
         *   "confirmationDate": "String",
         *   "reconciliationCongregation": "String",
         *   "reconciliationCity": "String",
         *   "reconciliationState": "String",
         *   "reconciliationDate": "String",
         *   "barMitzvahCongregation": "String",
         *   "barMitzvahCity": "String",
         *   "barMitzvahState": "String",
         *   "barMitzvahDate": "String",
         *   "localChurchMember": false
         * }
         */
        "application/json-patch+json": components["schemas"]["PersonReligionEntity"];
        /**
         * @example {
         *   "id": "String",
         *   "personId": 1,
         *   "denomination": "String",
         *   "congregationId": 1,
         *   "baptismCongregation": "String",
         *   "baptismCity": "String",
         *   "baptismState": "String",
         *   "baptismDate": "String",
         *   "communionCongregation": "String",
         *   "communionCity": "String",
         *   "communionState": "String",
         *   "communionDate": "String",
         *   "confirmationCongregation": "String",
         *   "confirmationCity": "String",
         *   "confirmationState": "String",
         *   "confirmationDate": "String",
         *   "reconciliationCongregation": "String",
         *   "reconciliationCity": "String",
         *   "reconciliationState": "String",
         *   "reconciliationDate": "String",
         *   "barMitzvahCongregation": "String",
         *   "barMitzvahCity": "String",
         *   "barMitzvahState": "String",
         *   "barMitzvahDate": "String",
         *   "localChurchMember": false
         * }
         */
        "application/json": components["schemas"]["PersonReligionEntity"];
        /**
         * @example {
         *   "id": "String",
         *   "personId": 1,
         *   "denomination": "String",
         *   "congregationId": 1,
         *   "baptismCongregation": "String",
         *   "baptismCity": "String",
         *   "baptismState": "String",
         *   "baptismDate": "String",
         *   "communionCongregation": "String",
         *   "communionCity": "String",
         *   "communionState": "String",
         *   "communionDate": "String",
         *   "confirmationCongregation": "String",
         *   "confirmationCity": "String",
         *   "confirmationState": "String",
         *   "confirmationDate": "String",
         *   "reconciliationCongregation": "String",
         *   "reconciliationCity": "String",
         *   "reconciliationState": "String",
         *   "reconciliationDate": "String",
         *   "barMitzvahCongregation": "String",
         *   "barMitzvahCity": "String",
         *   "barMitzvahState": "String",
         *   "barMitzvahDate": "String",
         *   "localChurchMember": false
         * }
         */
        "text/json": components["schemas"]["PersonReligionEntity"];
        /**
         * @example {
         *   "id": "String",
         *   "personId": 1,
         *   "denomination": "String",
         *   "congregationId": 1,
         *   "baptismCongregation": "String",
         *   "baptismCity": "String",
         *   "baptismState": "String",
         *   "baptismDate": "String",
         *   "communionCongregation": "String",
         *   "communionCity": "String",
         *   "communionState": "String",
         *   "communionDate": "String",
         *   "confirmationCongregation": "String",
         *   "confirmationCity": "String",
         *   "confirmationState": "String",
         *   "confirmationDate": "String",
         *   "reconciliationCongregation": "String",
         *   "reconciliationCity": "String",
         *   "reconciliationState": "String",
         *   "reconciliationDate": "String",
         *   "barMitzvahCongregation": "String",
         *   "barMitzvahCity": "String",
         *   "barMitzvahState": "String",
         *   "barMitzvahDate": "String",
         *   "localChurchMember": false
         * }
         */
        "application/*+json": components["schemas"]["PersonReligionEntity"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonReligionEntity"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Update a person's religion information based on the json patch document
   * @description Update a person's religion information based on the json patch document
   */
  Religion_UpdateReligion: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        personId: number;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonReligionEntity"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of people religious events
   * @description Gets a list of people religious events
   */
  ReligiousEvents_GetReligiousEvents: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfReligiousEventVmOut"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates a new religious event
   * @description Creates a new religious event
   */
  ReligiousEvents_CreateReligiousEvent: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example {
         *   "personId": 1,
         *   "religiousEventDate": "2020-01-01",
         *   "religiousEventType": "String",
         *   "location": "String",
         *   "city": "String",
         *   "state": "String",
         *   "note": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["ReligiousEventVmIn"];
        /**
         * @example {
         *   "personId": 1,
         *   "religiousEventDate": "2020-01-01",
         *   "religiousEventType": "String",
         *   "location": "String",
         *   "city": "String",
         *   "state": "String",
         *   "note": "String"
         * }
         */
        "application/json": components["schemas"]["ReligiousEventVmIn"];
        /**
         * @example {
         *   "personId": 1,
         *   "religiousEventDate": "2020-01-01",
         *   "religiousEventType": "String",
         *   "location": "String",
         *   "city": "String",
         *   "state": "String",
         *   "note": "String"
         * }
         */
        "text/json": components["schemas"]["ReligiousEventVmIn"];
        /**
         * @example {
         *   "personId": 1,
         *   "religiousEventDate": "2020-01-01",
         *   "religiousEventType": "String",
         *   "location": "String",
         *   "city": "String",
         *   "state": "String",
         *   "note": "String"
         * }
         */
        "application/*+json": components["schemas"]["ReligiousEventVmIn"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ReligiousEventVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a single religious event
   * @description Gets a single religious event
   */
  ReligiousEvents_GetReligiousEventsById: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        religiousEventId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ReligiousEventVmOut"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces a religious event
   * @description Replaces a religious event
   */
  ReligiousEvents_ReplaceReligiousEvents: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        religiousEventId: number;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example {
         *   "personId": 1,
         *   "religiousEventDate": "2020-01-01",
         *   "religiousEventType": "String",
         *   "location": "String",
         *   "city": "String",
         *   "state": "String",
         *   "note": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["ReligiousEventVmIn"];
        /**
         * @example {
         *   "personId": 1,
         *   "religiousEventDate": "2020-01-01",
         *   "religiousEventType": "String",
         *   "location": "String",
         *   "city": "String",
         *   "state": "String",
         *   "note": "String"
         * }
         */
        "application/json": components["schemas"]["ReligiousEventVmIn"];
        /**
         * @example {
         *   "personId": 1,
         *   "religiousEventDate": "2020-01-01",
         *   "religiousEventType": "String",
         *   "location": "String",
         *   "city": "String",
         *   "state": "String",
         *   "note": "String"
         * }
         */
        "text/json": components["schemas"]["ReligiousEventVmIn"];
        /**
         * @example {
         *   "personId": 1,
         *   "religiousEventDate": "2020-01-01",
         *   "religiousEventType": "String",
         *   "location": "String",
         *   "city": "String",
         *   "state": "String",
         *   "note": "String"
         * }
         */
        "application/*+json": components["schemas"]["ReligiousEventVmIn"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ReligiousEventVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Update a religious event based on the json patch document
   * @description Update a religious event based on the json patch document
   */
  ReligiousEvents_UpdateReligiousEvents: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        religiousEventId: number;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ReligiousEventVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of people vehicle information
   * @description Gets a list of people vehicle information
   */
  Vehicles_GetVehicle: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfPersonVehicleEntity"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a single person's vehicle information
   * @description Gets a single person's vehicle information
   */
  Vehicles_GetVehicleById: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        personId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonVehicleEntity"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces a person's Vehicle information
   * @description Replaces a person's Vehicle information
   */
  Vehicles_ReplaceVehicle: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        personId: number;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example {
         *   "id": "String",
         *   "personId": 1,
         *   "autoMake": "String",
         *   "autoModel": "String",
         *   "autoLicense": "String",
         *   "driversLicense": "String",
         *   "permitNumber": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["PersonVehicleEntity"];
        /**
         * @example {
         *   "id": "String",
         *   "personId": 1,
         *   "autoMake": "String",
         *   "autoModel": "String",
         *   "autoLicense": "String",
         *   "driversLicense": "String",
         *   "permitNumber": "String"
         * }
         */
        "application/json": components["schemas"]["PersonVehicleEntity"];
        /**
         * @example {
         *   "id": "String",
         *   "personId": 1,
         *   "autoMake": "String",
         *   "autoModel": "String",
         *   "autoLicense": "String",
         *   "driversLicense": "String",
         *   "permitNumber": "String"
         * }
         */
        "text/json": components["schemas"]["PersonVehicleEntity"];
        /**
         * @example {
         *   "id": "String",
         *   "personId": 1,
         *   "autoMake": "String",
         *   "autoModel": "String",
         *   "autoLicense": "String",
         *   "driversLicense": "String",
         *   "permitNumber": "String"
         * }
         */
        "application/*+json": components["schemas"]["PersonVehicleEntity"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonVehicleEntity"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Update a person's vehicle information based on the json patch document
   * @description Update a person's vehicle information based on the json patch document
   */
  Vehicles_UpdateVehicle: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        personId: number;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonVehicleEntity"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of people work information
   * @description Gets a list of people work information
   */
  Work_GetWork: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfPersonWorkEntity"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Get a person work record
   * @description Get a person work record
   */
  Work_GetWorkById: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The person id */
        personId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonWorkEntity"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates person work information
   * @description Updates person work information
   */
  Work_UpdateWork: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The person id of the person being updated. */
        personId: number;
      };
    };
    /** @description The person entity with updates. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "id": "String",
         *   "personId": 1,
         *   "occupation": "String",
         *   "company": "String",
         *   "jobCategory": "String",
         *   "workStreet": "String",
         *   "workFax": "String",
         *   "workPhone": "String",
         *   "workPhoneExtension": "String",
         *   "workCity": "String",
         *   "workState": "String",
         *   "workZip": "String",
         *   "matchingGiftEmployer": false
         * }
         */
        "application/json-patch+json": components["schemas"]["PersonWorkEntity"];
        /**
         * @example {
         *   "id": "String",
         *   "personId": 1,
         *   "occupation": "String",
         *   "company": "String",
         *   "jobCategory": "String",
         *   "workStreet": "String",
         *   "workFax": "String",
         *   "workPhone": "String",
         *   "workPhoneExtension": "String",
         *   "workCity": "String",
         *   "workState": "String",
         *   "workZip": "String",
         *   "matchingGiftEmployer": false
         * }
         */
        "application/json": components["schemas"]["PersonWorkEntity"];
        /**
         * @example {
         *   "id": "String",
         *   "personId": 1,
         *   "occupation": "String",
         *   "company": "String",
         *   "jobCategory": "String",
         *   "workStreet": "String",
         *   "workFax": "String",
         *   "workPhone": "String",
         *   "workPhoneExtension": "String",
         *   "workCity": "String",
         *   "workState": "String",
         *   "workZip": "String",
         *   "matchingGiftEmployer": false
         * }
         */
        "text/json": components["schemas"]["PersonWorkEntity"];
        /**
         * @example {
         *   "id": "String",
         *   "personId": 1,
         *   "occupation": "String",
         *   "company": "String",
         *   "jobCategory": "String",
         *   "workStreet": "String",
         *   "workFax": "String",
         *   "workPhone": "String",
         *   "workPhoneExtension": "String",
         *   "workCity": "String",
         *   "workState": "String",
         *   "workZip": "String",
         *   "matchingGiftEmployer": false
         * }
         */
        "application/*+json": components["schemas"]["PersonWorkEntity"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonWorkEntity"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates a person based on the json patch document
   * @description Updates a person based on the json patch document
   */
  Work_PatchWork: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The person id of the person being patched. */
        personId: number;
      };
    };
    /** @description The patch document with changes */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PersonWorkEntity"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of honors.
   * @description Gets a list of honors.
   */
  Honors_GetHonors: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfHonorsVmOut"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a honor.
   * @description Gets a honor.
   */
  Honors_GetAHonor: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The honor identifier. */
        honorId: number;
      };
    };
    responses: {
      /** @description ActionResult<HonorsVmOut>. */
      200: {
        content: {
          "application/json": components["schemas"]["HonorsVmOut"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces the honors.
   * @description Replaces the honors.
   */
  Honors_ReplaceHonors: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The honor identifier. */
        honorId: number;
      };
    };
    /** @description The honor. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "calcMethod": "String",
         *   "gradeLevel": "String",
         *   "honorName": "String",
         *   "honorRollId": 1,
         *   "maxClass": 1,
         *   "minAvg": 1,
         *   "minClass": 1,
         *   "minCredits": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "schoolCode": "String",
         *   "sequence": 1,
         *   "timeFrame": 1
         * }
         */
        "application/json-patch+json": components["schemas"]["HonorsVmIn"];
        /**
         * @example {
         *   "calcMethod": "String",
         *   "gradeLevel": "String",
         *   "honorName": "String",
         *   "honorRollId": 1,
         *   "maxClass": 1,
         *   "minAvg": 1,
         *   "minClass": 1,
         *   "minCredits": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "schoolCode": "String",
         *   "sequence": 1,
         *   "timeFrame": 1
         * }
         */
        "application/json": components["schemas"]["HonorsVmIn"];
        /**
         * @example {
         *   "calcMethod": "String",
         *   "gradeLevel": "String",
         *   "honorName": "String",
         *   "honorRollId": 1,
         *   "maxClass": 1,
         *   "minAvg": 1,
         *   "minClass": 1,
         *   "minCredits": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "schoolCode": "String",
         *   "sequence": 1,
         *   "timeFrame": 1
         * }
         */
        "text/json": components["schemas"]["HonorsVmIn"];
        /**
         * @example {
         *   "calcMethod": "String",
         *   "gradeLevel": "String",
         *   "honorName": "String",
         *   "honorRollId": 1,
         *   "maxClass": 1,
         *   "minAvg": 1,
         *   "minClass": 1,
         *   "minCredits": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "schoolCode": "String",
         *   "sequence": 1,
         *   "timeFrame": 1
         * }
         */
        "application/*+json": components["schemas"]["HonorsVmIn"];
      };
    };
    responses: {
      /** @description ActionResult<HonorsVmOut>. */
      200: {
        content: {
          "application/json": components["schemas"]["HonorsVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates the honors.
   * @description Updates the honors.
   */
  Honors_UpdateHonors: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The honor identifier. */
        honorId: number;
      };
    };
    /** @description The patch document. */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      /** @description ActionResult<HonorsVmOut>. */
      200: {
        content: {
          "application/json": components["schemas"]["HonorsVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of student information
   * @description Gets a list of student information
   */
  Student_GetStudentV1: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfStudentModel"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Create student
   * @description Create student
   */
  Student_PostStudentV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The student request */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "school": {},
         *   "locker": [],
         *   "configSchoolId": 1
         * }
         */
        "application/json-patch+json": components["schemas"]["StudentRequest"];
        /**
         * @example {
         *   "school": {},
         *   "locker": [],
         *   "configSchoolId": 1
         * }
         */
        "application/json": components["schemas"]["StudentRequest"];
        /**
         * @example {
         *   "school": {},
         *   "locker": [],
         *   "configSchoolId": 1
         * }
         */
        "text/json": components["schemas"]["StudentRequest"];
        /**
         * @example {
         *   "school": {},
         *   "locker": [],
         *   "configSchoolId": 1
         * }
         */
        "application/*+json": components["schemas"]["StudentRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": unknown;
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets student information by id
   * @description Gets student information by id
   */
  Student_GetStudentByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The unique student id */
        personStudentId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StudentModel"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Update student. This updates everything on student. Be careful to use it!!!
   * @description Update student. This updates everything on student. Be careful to use it!!!
   */
  Student_PutStudentV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The unique student id */
        personStudentId: number;
      };
    };
    /** @description The student model */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "school": {},
         *   "locker": [],
         *   "configSchoolId": 1
         * }
         */
        "application/json-patch+json": components["schemas"]["StudentRequest"];
        /**
         * @example {
         *   "school": {},
         *   "locker": [],
         *   "configSchoolId": 1
         * }
         */
        "application/json": components["schemas"]["StudentRequest"];
        /**
         * @example {
         *   "school": {},
         *   "locker": [],
         *   "configSchoolId": 1
         * }
         */
        "text/json": components["schemas"]["StudentRequest"];
        /**
         * @example {
         *   "school": {},
         *   "locker": [],
         *   "configSchoolId": 1
         * }
         */
        "application/*+json": components["schemas"]["StudentRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StudentModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Partial Update student.
   * @description Partial Update student.
   */
  Student_PatchStudentV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The unique student id */
        personStudentId: number;
      };
    };
    /** @description The student */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StudentModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of student locker
   * @description Gets a list of student locker
   */
  StudentLocker_GetStudentLockerListV1: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfLockerModel"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates locker
   * @description Creates locker
   */
  StudentLocker_PostStudentLocker: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The locker model */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "locker": "String",
         *   "lockerGroupId": 1,
         *   "schoolCode": "String",
         *   "combination1": "String",
         *   "combination2": "String",
         *   "combination3": "String",
         *   "combination4": "String",
         *   "combination5": "String",
         *   "note": "String",
         *   "outOfService": false,
         *   "currentCombination": 1
         * }
         */
        "application/json-patch+json": components["schemas"]["LockerRequest"];
        /**
         * @example {
         *   "locker": "String",
         *   "lockerGroupId": 1,
         *   "schoolCode": "String",
         *   "combination1": "String",
         *   "combination2": "String",
         *   "combination3": "String",
         *   "combination4": "String",
         *   "combination5": "String",
         *   "note": "String",
         *   "outOfService": false,
         *   "currentCombination": 1
         * }
         */
        "application/json": components["schemas"]["LockerRequest"];
        /**
         * @example {
         *   "locker": "String",
         *   "lockerGroupId": 1,
         *   "schoolCode": "String",
         *   "combination1": "String",
         *   "combination2": "String",
         *   "combination3": "String",
         *   "combination4": "String",
         *   "combination5": "String",
         *   "note": "String",
         *   "outOfService": false,
         *   "currentCombination": 1
         * }
         */
        "text/json": components["schemas"]["LockerRequest"];
        /**
         * @example {
         *   "locker": "String",
         *   "lockerGroupId": 1,
         *   "schoolCode": "String",
         *   "combination1": "String",
         *   "combination2": "String",
         *   "combination3": "String",
         *   "combination4": "String",
         *   "combination5": "String",
         *   "note": "String",
         *   "outOfService": false,
         *   "currentCombination": 1
         * }
         */
        "application/*+json": components["schemas"]["LockerRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": unknown;
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets locker by id
   * @description Gets locker by id
   */
  StudentLocker_GetStudentLockerByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The locker id */
        lockerConfigurationId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LockerModel"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates locker by id
   * @description Updates locker by id
   */
  StudentLocker_PutStudentLockerByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The locker id */
        lockerConfigurationId: number;
      };
    };
    /** @description The locker model */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "locker": "String",
         *   "lockerGroupId": 1,
         *   "schoolCode": "String",
         *   "combination1": "String",
         *   "combination2": "String",
         *   "combination3": "String",
         *   "combination4": "String",
         *   "combination5": "String",
         *   "note": "String",
         *   "outOfService": false,
         *   "currentCombination": 1
         * }
         */
        "application/json-patch+json": components["schemas"]["LockerRequest"];
        /**
         * @example {
         *   "locker": "String",
         *   "lockerGroupId": 1,
         *   "schoolCode": "String",
         *   "combination1": "String",
         *   "combination2": "String",
         *   "combination3": "String",
         *   "combination4": "String",
         *   "combination5": "String",
         *   "note": "String",
         *   "outOfService": false,
         *   "currentCombination": 1
         * }
         */
        "application/json": components["schemas"]["LockerRequest"];
        /**
         * @example {
         *   "locker": "String",
         *   "lockerGroupId": 1,
         *   "schoolCode": "String",
         *   "combination1": "String",
         *   "combination2": "String",
         *   "combination3": "String",
         *   "combination4": "String",
         *   "combination5": "String",
         *   "note": "String",
         *   "outOfService": false,
         *   "currentCombination": 1
         * }
         */
        "text/json": components["schemas"]["LockerRequest"];
        /**
         * @example {
         *   "locker": "String",
         *   "lockerGroupId": 1,
         *   "schoolCode": "String",
         *   "combination1": "String",
         *   "combination2": "String",
         *   "combination3": "String",
         *   "combination4": "String",
         *   "combination5": "String",
         *   "note": "String",
         *   "outOfService": false,
         *   "currentCombination": 1
         * }
         */
        "application/*+json": components["schemas"]["LockerRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LockerModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Partial Updates locker by id
   * @description Partial Updates locker by id
   */
  StudentLocker_PatchStudentLockerByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The locker id */
        lockerConfigurationId: number;
      };
    };
    /** @description The locker */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LockerModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets student school information by id
   * @description Gets student school information by id
   */
  StudentSchool_GetStudentSchoolV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The unique student id */
        personStudentId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StudentSchoolModel"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Update student school information
   * @description Update student school information
   */
  StudentSchool_PutStudentSchoolV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The unique student id */
        personStudentId: number;
      };
    };
    /** @description The student school */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "status": "String",
         *   "substatus": "String",
         *   "enrollDate": "2020-01-01",
         *   "withdrawDate": "2020-01-01",
         *   "withdrawReason": "String",
         *   "graduationDate": "2020-01-01",
         *   "gradeLevel": "String",
         *   "nextStatus": "String",
         *   "nextSchoolCode": "String",
         *   "nextGradeLevel": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["StudentSchoolModel"];
        /**
         * @example {
         *   "status": "String",
         *   "substatus": "String",
         *   "enrollDate": "2020-01-01",
         *   "withdrawDate": "2020-01-01",
         *   "withdrawReason": "String",
         *   "graduationDate": "2020-01-01",
         *   "gradeLevel": "String",
         *   "nextStatus": "String",
         *   "nextSchoolCode": "String",
         *   "nextGradeLevel": "String"
         * }
         */
        "application/json": components["schemas"]["StudentSchoolModel"];
        /**
         * @example {
         *   "status": "String",
         *   "substatus": "String",
         *   "enrollDate": "2020-01-01",
         *   "withdrawDate": "2020-01-01",
         *   "withdrawReason": "String",
         *   "graduationDate": "2020-01-01",
         *   "gradeLevel": "String",
         *   "nextStatus": "String",
         *   "nextSchoolCode": "String",
         *   "nextGradeLevel": "String"
         * }
         */
        "text/json": components["schemas"]["StudentSchoolModel"];
        /**
         * @example {
         *   "status": "String",
         *   "substatus": "String",
         *   "enrollDate": "2020-01-01",
         *   "withdrawDate": "2020-01-01",
         *   "withdrawReason": "String",
         *   "graduationDate": "2020-01-01",
         *   "gradeLevel": "String",
         *   "nextStatus": "String",
         *   "nextSchoolCode": "String",
         *   "nextGradeLevel": "String"
         * }
         */
        "application/*+json": components["schemas"]["StudentSchoolModel"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StudentSchoolModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Partial Update student school information
   * @description Partial Update student school information
   */
  StudentSchool_PatchStudentSchoolV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The unique student id */
        personStudentId: number;
      };
    };
    /** @description The student school */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StudentSchoolModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of student status
   * @description Gets a list of student status
   */
  StudentStatus_GetStudentStatusV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StatusModelArray"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a student status with substatus
   * @description Gets a student status with substatus
   */
  StudentStatus_GetStudentStatusByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description The status name */
        status: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StatusModel"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a student substatus by id
   * @description Gets a student substatus by id
   */
  StudentStatus_GetStudentSubStatusByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description The status name */
        status: string;
        /** @description Format - int32. The subStatus id */
        subStatusId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SubStatusModel"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Update a student substatus by id
   * @description Update a student substatus by id
   */
  StudentStatus_PutStudentSubStatusByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description The status name */
        status: string;
        /** @description Format - int32. The subStatus id */
        subStatusId: number;
      };
    };
    /** @description The subStatus */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "status": "String",
         *   "schoolCode": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["SubStatusRequest"];
        /**
         * @example {
         *   "status": "String",
         *   "schoolCode": "String"
         * }
         */
        "application/json": components["schemas"]["SubStatusRequest"];
        /**
         * @example {
         *   "status": "String",
         *   "schoolCode": "String"
         * }
         */
        "text/json": components["schemas"]["SubStatusRequest"];
        /**
         * @example {
         *   "status": "String",
         *   "schoolCode": "String"
         * }
         */
        "application/*+json": components["schemas"]["SubStatusRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SubStatusModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Update student substatus list
   * @description Update student substatus list
   */
  StudentStatus_PutStudentSubstatusV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        status: string;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "status": "String",
         *     "schoolCode": "String",
         *     "id": 0
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["SubStatusModelArray"];
        /**
         * @example [
         *   {
         *     "status": "String",
         *     "schoolCode": "String",
         *     "id": 0
         *   }
         * ]
         */
        "application/json": components["schemas"]["SubStatusModelArray"];
        /**
         * @example [
         *   {
         *     "status": "String",
         *     "schoolCode": "String",
         *     "id": 0
         *   }
         * ]
         */
        "text/json": components["schemas"]["SubStatusModelArray"];
        /**
         * @example [
         *   {
         *     "status": "String",
         *     "schoolCode": "String",
         *     "id": 0
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["SubStatusModelArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SubStatusModelArray"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates a student substatus
   * @description Creates a student substatus
   */
  StudentStatus_PostStudentSubStatusByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description The status name */
        status: string;
      };
    };
    /** @description The subStatus */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "status": "String",
         *   "schoolCode": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["SubStatusRequest"];
        /**
         * @example {
         *   "status": "String",
         *   "schoolCode": "String"
         * }
         */
        "application/json": components["schemas"]["SubStatusRequest"];
        /**
         * @example {
         *   "status": "String",
         *   "schoolCode": "String"
         * }
         */
        "text/json": components["schemas"]["SubStatusRequest"];
        /**
         * @example {
         *   "status": "String",
         *   "schoolCode": "String"
         * }
         */
        "application/*+json": components["schemas"]["SubStatusRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": unknown;
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of congregations
   * @description Gets a list of congregations
   */
  Congregations_GetCongregations: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<CongregationVM>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfCongregationVM"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates the congregation.
   * @description Creates the congregation.
   */
  Congregations_CreateCongregation: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The congregation vm. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "congregationId": 1,
         *   "congregationName": "String",
         *   "congregationCity": "String",
         *   "congregationPhone": "String",
         *   "congregationState": "String",
         *   "congregationStreet": "String",
         *   "congregationZip": "String",
         *   "seniorPastor": "String",
         *   "youthPastor": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["CongregationVM"];
        /**
         * @example {
         *   "congregationId": 1,
         *   "congregationName": "String",
         *   "congregationCity": "String",
         *   "congregationPhone": "String",
         *   "congregationState": "String",
         *   "congregationStreet": "String",
         *   "congregationZip": "String",
         *   "seniorPastor": "String",
         *   "youthPastor": "String"
         * }
         */
        "application/json": components["schemas"]["CongregationVM"];
        /**
         * @example {
         *   "congregationId": 1,
         *   "congregationName": "String",
         *   "congregationCity": "String",
         *   "congregationPhone": "String",
         *   "congregationState": "String",
         *   "congregationStreet": "String",
         *   "congregationZip": "String",
         *   "seniorPastor": "String",
         *   "youthPastor": "String"
         * }
         */
        "text/json": components["schemas"]["CongregationVM"];
        /**
         * @example {
         *   "congregationId": 1,
         *   "congregationName": "String",
         *   "congregationCity": "String",
         *   "congregationPhone": "String",
         *   "congregationState": "String",
         *   "congregationStreet": "String",
         *   "congregationZip": "String",
         *   "seniorPastor": "String",
         *   "youthPastor": "String"
         * }
         */
        "application/*+json": components["schemas"]["CongregationVM"];
      };
    };
    responses: {
      /** @description Task<ActionResult<CongregationVM>>. */
      201: {
        content: {
          "application/json": components["schemas"]["CongregationVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets the congregation by identifier.
   * @description Gets the congregation by identifier.
   */
  Congregations_GetCongregationById: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The congregation identifier. */
        congregationId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<CongregationVM>>. */
      200: {
        content: {
          "application/json": components["schemas"]["CongregationVM"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces the congregation.
   * @description Replaces the congregation.
   */
  Congregations_ReplaceCongregation: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The congregation identifier. */
        congregationId: number;
      };
    };
    /** @description The congregation vm. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "congregationId": 1,
         *   "congregationName": "String",
         *   "congregationCity": "String",
         *   "congregationPhone": "String",
         *   "congregationState": "String",
         *   "congregationStreet": "String",
         *   "congregationZip": "String",
         *   "seniorPastor": "String",
         *   "youthPastor": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["CongregationVM"];
        /**
         * @example {
         *   "congregationId": 1,
         *   "congregationName": "String",
         *   "congregationCity": "String",
         *   "congregationPhone": "String",
         *   "congregationState": "String",
         *   "congregationStreet": "String",
         *   "congregationZip": "String",
         *   "seniorPastor": "String",
         *   "youthPastor": "String"
         * }
         */
        "application/json": components["schemas"]["CongregationVM"];
        /**
         * @example {
         *   "congregationId": 1,
         *   "congregationName": "String",
         *   "congregationCity": "String",
         *   "congregationPhone": "String",
         *   "congregationState": "String",
         *   "congregationStreet": "String",
         *   "congregationZip": "String",
         *   "seniorPastor": "String",
         *   "youthPastor": "String"
         * }
         */
        "text/json": components["schemas"]["CongregationVM"];
        /**
         * @example {
         *   "congregationId": 1,
         *   "congregationName": "String",
         *   "congregationCity": "String",
         *   "congregationPhone": "String",
         *   "congregationState": "String",
         *   "congregationStreet": "String",
         *   "congregationZip": "String",
         *   "seniorPastor": "String",
         *   "youthPastor": "String"
         * }
         */
        "application/*+json": components["schemas"]["CongregationVM"];
      };
    };
    responses: {
      /** @description Task<ActionResult<CongregationVM>>. */
      200: {
        content: {
          "application/json": components["schemas"]["CongregationVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates the congregation.
   * @description Updates the congregation.
   */
  Congregations_UpdateCongregation: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The congregation identifier. */
        congregationId: number;
      };
    };
    /** @description The patch document. */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      /** @description Task<ActionResult<CongregationVM>>. */
      200: {
        content: {
          "application/json": components["schemas"]["CongregationVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of people interests
   * @description Gets a list of people interests
   */
  Interests_GetpeopleInterests: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfPersonInterestVM"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates a new person interest
   * @description Creates a new person interest
   */
  Interests_CreatePersonInterest: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example {
         *   "personID": 1,
         *   "interest": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["PersonInterestVM"];
        /**
         * @example {
         *   "personID": 1,
         *   "interest": "String"
         * }
         */
        "application/json": components["schemas"]["PersonInterestVM"];
        /**
         * @example {
         *   "personID": 1,
         *   "interest": "String"
         * }
         */
        "text/json": components["schemas"]["PersonInterestVM"];
        /**
         * @example {
         *   "personID": 1,
         *   "interest": "String"
         * }
         */
        "application/*+json": components["schemas"]["PersonInterestVM"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PersonInterestVM"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of student alerts.
   * @description Gets a list of student alerts.
   */
  Alerts_GetStudentAlerts: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<StudentAlertVmOut>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfAlertVm"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates a student alert.
   * @description Creates a student alert.
   */
  Alerts_CreateStudentAlert: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The student alert. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "alertID": 1,
         *   "studentID": 1,
         *   "title": "String",
         *   "description": "String",
         *   "active": false
         * }
         */
        "application/json-patch+json": components["schemas"]["AlertVm"];
        /**
         * @example {
         *   "alertID": 1,
         *   "studentID": 1,
         *   "title": "String",
         *   "description": "String",
         *   "active": false
         * }
         */
        "application/json": components["schemas"]["AlertVm"];
        /**
         * @example {
         *   "alertID": 1,
         *   "studentID": 1,
         *   "title": "String",
         *   "description": "String",
         *   "active": false
         * }
         */
        "text/json": components["schemas"]["AlertVm"];
        /**
         * @example {
         *   "alertID": 1,
         *   "studentID": 1,
         *   "title": "String",
         *   "description": "String",
         *   "active": false
         * }
         */
        "application/*+json": components["schemas"]["AlertVm"];
      };
    };
    responses: {
      /** @description Task<ActionResult<StudentAlertVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["AlertVm"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a single student alert.
   * @description Gets a single student alert.
   */
  Alerts_GetAStudentAlert: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The student alert identifier. */
        alertId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<StudentAlertVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["AlertVm"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces a student alert.
   * @description Replaces a student alert.
   */
  Alerts_ReplaceStudentAlert: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The student alert identifier. */
        alertId: number;
      };
    };
    /** @description The student alert. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "alertID": 1,
         *   "studentID": 1,
         *   "title": "String",
         *   "description": "String",
         *   "active": false
         * }
         */
        "application/json-patch+json": components["schemas"]["AlertVm"];
        /**
         * @example {
         *   "alertID": 1,
         *   "studentID": 1,
         *   "title": "String",
         *   "description": "String",
         *   "active": false
         * }
         */
        "application/json": components["schemas"]["AlertVm"];
        /**
         * @example {
         *   "alertID": 1,
         *   "studentID": 1,
         *   "title": "String",
         *   "description": "String",
         *   "active": false
         * }
         */
        "text/json": components["schemas"]["AlertVm"];
        /**
         * @example {
         *   "alertID": 1,
         *   "studentID": 1,
         *   "title": "String",
         *   "description": "String",
         *   "active": false
         * }
         */
        "application/*+json": components["schemas"]["AlertVm"];
      };
    };
    responses: {
      /** @description Task<ActionResult<StudentAlertVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["AlertVm"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates tha student alert.
   * @description Updates tha student alert.
   */
  Alerts_UpdateStudentAlert: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The student alert identifier. */
        alertId: number;
      };
    };
    /** @description The patch document. */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      /** @description Task<ActionResult<StudentAlertVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["AlertVm"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of pickup contacts.
   * @description Gets a list of pickup contacts.
   */
  PickupContacts_GetPickupContacts: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<PickupContactVmOut>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfPickupContactVmOut"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a single pickup contact.
   * @description Gets a single pickup contact.
   */
  PickupContacts_GetAPickupContact: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The pickup contact identifier. */
        pickupContactId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<PickupContactVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PickupContactVmOut"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces a pickup contact.
   * @description Replaces a pickup contact.
   */
  PickupContacts_ReplacePickupContact: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The pickup contact identifier. */
        pickupContactId: number;
      };
    };
    /** @description The pickup contact. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "cellPhone": "String",
         *   "countryCode": "String",
         *   "email": "String",
         *   "firstName": "String",
         *   "homePhone": "String",
         *   "lastName": "String",
         *   "middleName": "String",
         *   "note": "String",
         *   "portalSortOrder": 1,
         *   "refId": 1,
         *   "relationship": "String",
         *   "salutation": "String",
         *   "studentId": 1,
         *   "suffix": "String",
         *   "workPhone": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["PickupContactVmIn"];
        /**
         * @example {
         *   "cellPhone": "String",
         *   "countryCode": "String",
         *   "email": "String",
         *   "firstName": "String",
         *   "homePhone": "String",
         *   "lastName": "String",
         *   "middleName": "String",
         *   "note": "String",
         *   "portalSortOrder": 1,
         *   "refId": 1,
         *   "relationship": "String",
         *   "salutation": "String",
         *   "studentId": 1,
         *   "suffix": "String",
         *   "workPhone": "String"
         * }
         */
        "application/json": components["schemas"]["PickupContactVmIn"];
        /**
         * @example {
         *   "cellPhone": "String",
         *   "countryCode": "String",
         *   "email": "String",
         *   "firstName": "String",
         *   "homePhone": "String",
         *   "lastName": "String",
         *   "middleName": "String",
         *   "note": "String",
         *   "portalSortOrder": 1,
         *   "refId": 1,
         *   "relationship": "String",
         *   "salutation": "String",
         *   "studentId": 1,
         *   "suffix": "String",
         *   "workPhone": "String"
         * }
         */
        "text/json": components["schemas"]["PickupContactVmIn"];
        /**
         * @example {
         *   "cellPhone": "String",
         *   "countryCode": "String",
         *   "email": "String",
         *   "firstName": "String",
         *   "homePhone": "String",
         *   "lastName": "String",
         *   "middleName": "String",
         *   "note": "String",
         *   "portalSortOrder": 1,
         *   "refId": 1,
         *   "relationship": "String",
         *   "salutation": "String",
         *   "studentId": 1,
         *   "suffix": "String",
         *   "workPhone": "String"
         * }
         */
        "application/*+json": components["schemas"]["PickupContactVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<PickupContactVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PickupContactVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates tha pickup contact.
   * @description Updates tha pickup contact.
   */
  PickupContacts_UpdatePickupContact: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The pickup contact identifier. */
        pickupContactId: number;
      };
    };
    /** @description The patch document. */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      /** @description Task<ActionResult<PickupContactVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PickupContactVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of DefinedLists. Support filter/sort by name.
   * @description Gets a list of DefinedLists. Support filter/sort by name.
   */
  DefinedLists_GetDefinedListsV1: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        /** @description The type of DefinedLists */
        type?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | -1;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfDefinedListsModel"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Create DefinedList
   * @description Create DefinedList
   */
  DefinedLists_PostDefinedListsV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The DefinedLists model */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "type": "String",
         *   "name": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["DefinedListsRequest"];
        /**
         * @example {
         *   "type": "String",
         *   "name": "String"
         * }
         */
        "application/json": components["schemas"]["DefinedListsRequest"];
        /**
         * @example {
         *   "type": "String",
         *   "name": "String"
         * }
         */
        "text/json": components["schemas"]["DefinedListsRequest"];
        /**
         * @example {
         *   "type": "String",
         *   "name": "String"
         * }
         */
        "application/*+json": components["schemas"]["DefinedListsRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": unknown;
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets DefinedList by id
   * @description Gets DefinedList by id
   */
  DefinedLists_GetDefinedListsByIdV1: {
    parameters: {
      query?: {
        /** @description Format - int32. The DefinedList id */
        DefinedListId?: number;
        "api-version"?: string;
      };
      path: {
        DefinedListsId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DefinedListsModel"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Update DefinedLists by id
   * @description Update DefinedLists by id
   */
  DefinedLists_PutDefinedListsByIdV1: {
    parameters: {
      query?: {
        /** @description Format - int32. The DefinedLists id */
        DefinedListId?: number;
        "api-version"?: string;
      };
      path: {
        DefinedListsId: string;
      };
    };
    /** @description The DefinedLists model */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "type": "String",
         *   "name": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["DefinedListsRequest"];
        /**
         * @example {
         *   "type": "String",
         *   "name": "String"
         * }
         */
        "application/json": components["schemas"]["DefinedListsRequest"];
        /**
         * @example {
         *   "type": "String",
         *   "name": "String"
         * }
         */
        "text/json": components["schemas"]["DefinedListsRequest"];
        /**
         * @example {
         *   "type": "String",
         *   "name": "String"
         * }
         */
        "application/*+json": components["schemas"]["DefinedListsRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DefinedListsModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Partial Update DefinedList by id
   * @description Partial Update DefinedList by id
   */
  DefinedLists_PatchDefinedListsByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The DefinedList id */
        DefinedListId: number;
      };
    };
    /** @description The DefinedLists patch doc */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DefinedListsModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Lists the enrollment histories.
   * @description Lists the enrollment histories.
   */
  EnrollmentHistories_GetEnrollmentHistories: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<EnrollmentHistoryVmOut>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfEnrollmentHistoryVmOut"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates the enrollment history.
   * @description Creates the enrollment history.
   */
  EnrollmentHistories_CreateEnrollmentHistory: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The vm. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "beginDate": "2020-01-01",
         *   "endDate": "2020-01-01",
         *   "gradeLevel": "String",
         *   "note": "String",
         *   "schoolCode": "String",
         *   "status": "String",
         *   "studentId": 1,
         *   "yearId": 1
         * }
         */
        "application/json-patch+json": components["schemas"]["EnrollmentHistoryVmIn"];
        /**
         * @example {
         *   "beginDate": "2020-01-01",
         *   "endDate": "2020-01-01",
         *   "gradeLevel": "String",
         *   "note": "String",
         *   "schoolCode": "String",
         *   "status": "String",
         *   "studentId": 1,
         *   "yearId": 1
         * }
         */
        "application/json": components["schemas"]["EnrollmentHistoryVmIn"];
        /**
         * @example {
         *   "beginDate": "2020-01-01",
         *   "endDate": "2020-01-01",
         *   "gradeLevel": "String",
         *   "note": "String",
         *   "schoolCode": "String",
         *   "status": "String",
         *   "studentId": 1,
         *   "yearId": 1
         * }
         */
        "text/json": components["schemas"]["EnrollmentHistoryVmIn"];
        /**
         * @example {
         *   "beginDate": "2020-01-01",
         *   "endDate": "2020-01-01",
         *   "gradeLevel": "String",
         *   "note": "String",
         *   "schoolCode": "String",
         *   "status": "String",
         *   "studentId": 1,
         *   "yearId": 1
         * }
         */
        "application/*+json": components["schemas"]["EnrollmentHistoryVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<EnrollmentHistoryVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["EnrollmentHistoryVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets the enrollment history.
   * @description Gets the enrollment history.
   */
  EnrollmentHistories_GetEnrollmentHistory: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The enrollment history identifier. */
        enrollmentHistoryId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<EnrollmentHistoryVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["EnrollmentHistoryVmOut"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces the enrollment history.
   * @description Replaces the enrollment history.
   */
  EnrollmentHistories_ReplaceEnrollmentHistory: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The enrollment history identifier. */
        enrollmentHistoryId: number;
      };
    };
    /** @description The vm. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "beginDate": "2020-01-01",
         *   "endDate": "2020-01-01",
         *   "gradeLevel": "String",
         *   "note": "String",
         *   "schoolCode": "String",
         *   "status": "String",
         *   "studentId": 1,
         *   "yearId": 1
         * }
         */
        "application/json-patch+json": components["schemas"]["EnrollmentHistoryVmIn"];
        /**
         * @example {
         *   "beginDate": "2020-01-01",
         *   "endDate": "2020-01-01",
         *   "gradeLevel": "String",
         *   "note": "String",
         *   "schoolCode": "String",
         *   "status": "String",
         *   "studentId": 1,
         *   "yearId": 1
         * }
         */
        "application/json": components["schemas"]["EnrollmentHistoryVmIn"];
        /**
         * @example {
         *   "beginDate": "2020-01-01",
         *   "endDate": "2020-01-01",
         *   "gradeLevel": "String",
         *   "note": "String",
         *   "schoolCode": "String",
         *   "status": "String",
         *   "studentId": 1,
         *   "yearId": 1
         * }
         */
        "text/json": components["schemas"]["EnrollmentHistoryVmIn"];
        /**
         * @example {
         *   "beginDate": "2020-01-01",
         *   "endDate": "2020-01-01",
         *   "gradeLevel": "String",
         *   "note": "String",
         *   "schoolCode": "String",
         *   "status": "String",
         *   "studentId": 1,
         *   "yearId": 1
         * }
         */
        "application/*+json": components["schemas"]["EnrollmentHistoryVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<EnrollmentHistoryVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["EnrollmentHistoryVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates the enrollment history.
   * @description Updates the enrollment history.
   */
  EnrollmentHistories_UpdateEnrollmentHistory: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The enrollment history identifier. */
        enrollmentHistoryId: number;
      };
    };
    /** @description The patch document. */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      /** @description Task<ActionResult<EnrollmentHistoryVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["EnrollmentHistoryVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of userDefinedData. Support filter/sort by GroupId, DataTyp, DataOrder.
   * @description Gets a list of userDefinedData. Support filter/sort by GroupId, DataTyp, DataOrder.
   */
  UserDefinedData_GetUserDefinedDataV1: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfUserDefinedDataModel"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Create userDefinedData
   * @description Create userDefinedData
   */
  UserDefinedData_PostUserDefinedDataV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The userDefinedData model */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "fieldId": 1,
         *   "linkedId": 1,
         *   "data": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["UserDefinedDataRequest"];
        /**
         * @example {
         *   "fieldId": 1,
         *   "linkedId": 1,
         *   "data": "String"
         * }
         */
        "application/json": components["schemas"]["UserDefinedDataRequest"];
        /**
         * @example {
         *   "fieldId": 1,
         *   "linkedId": 1,
         *   "data": "String"
         * }
         */
        "text/json": components["schemas"]["UserDefinedDataRequest"];
        /**
         * @example {
         *   "fieldId": 1,
         *   "linkedId": 1,
         *   "data": "String"
         * }
         */
        "application/*+json": components["schemas"]["UserDefinedDataRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": unknown;
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets userDefinedData by id
   * @description Gets userDefinedData by id
   */
  UserDefinedData_GetUserDefinedDataByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The userDefinedData id */
        userDefinedDataId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDefinedDataModel"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Update userDefinedData by id
   * @description Update userDefinedData by id
   */
  UserDefinedData_PutUserDefinedDataByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The userDefinedData id */
        userDefinedDataId: number;
      };
    };
    /** @description The userDefinedData model */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "fieldId": 1,
         *   "linkedId": 1,
         *   "data": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["UserDefinedDataRequest"];
        /**
         * @example {
         *   "fieldId": 1,
         *   "linkedId": 1,
         *   "data": "String"
         * }
         */
        "application/json": components["schemas"]["UserDefinedDataRequest"];
        /**
         * @example {
         *   "fieldId": 1,
         *   "linkedId": 1,
         *   "data": "String"
         * }
         */
        "text/json": components["schemas"]["UserDefinedDataRequest"];
        /**
         * @example {
         *   "fieldId": 1,
         *   "linkedId": 1,
         *   "data": "String"
         * }
         */
        "application/*+json": components["schemas"]["UserDefinedDataRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDefinedDataModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Partial Update userDefinedData by id
   * @description Partial Update userDefinedData by id
   */
  UserDefinedData_PatchUserDefinedDataByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The userDefinedData id */
        userDefinedDataId: number;
      };
    };
    /** @description The userDefinedData patch doc */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDefinedDataModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of userDefinedField. Support filter/sort by GroupId, FieldTyp, FieldOrder.
   * @description Gets a list of userDefinedField. Support filter/sort by GroupId, FieldTyp, FieldOrder.
   */
  UserDefinedField_GetUserDefinedFieldV1: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfUserDefinedFieldModel"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Create userDefinedField
   * @description Create userDefinedField
   */
  UserDefinedField_PostUserDefinedFieldV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The userDefinedField model */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "groupId": 1,
         *   "fieldName": "String",
         *   "fieldType": 1,
         *   "fieldOrder": 1,
         *   "listItems": []
         * }
         */
        "application/json-patch+json": components["schemas"]["UserDefinedFieldRequest"];
        /**
         * @example {
         *   "groupId": 1,
         *   "fieldName": "String",
         *   "fieldType": 1,
         *   "fieldOrder": 1,
         *   "listItems": []
         * }
         */
        "application/json": components["schemas"]["UserDefinedFieldRequest"];
        /**
         * @example {
         *   "groupId": 1,
         *   "fieldName": "String",
         *   "fieldType": 1,
         *   "fieldOrder": 1,
         *   "listItems": []
         * }
         */
        "text/json": components["schemas"]["UserDefinedFieldRequest"];
        /**
         * @example {
         *   "groupId": 1,
         *   "fieldName": "String",
         *   "fieldType": 1,
         *   "fieldOrder": 1,
         *   "listItems": []
         * }
         */
        "application/*+json": components["schemas"]["UserDefinedFieldRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": unknown;
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets userDefinedField by id
   * @description Gets userDefinedField by id
   */
  UserDefinedField_GetUserDefinedFieldByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The userDefinedField id */
        userDefinedFieldId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDefinedFieldModel"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Update userDefinedField by id
   * @description Update userDefinedField by id
   */
  UserDefinedField_PutUserDefinedFieldByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The userDefinedField id */
        userDefinedFieldId: number;
      };
    };
    /** @description The userDefinedField model */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "groupId": 1,
         *   "fieldName": "String",
         *   "fieldType": 1,
         *   "fieldOrder": 1,
         *   "listItems": []
         * }
         */
        "application/json-patch+json": components["schemas"]["UserDefinedFieldRequest"];
        /**
         * @example {
         *   "groupId": 1,
         *   "fieldName": "String",
         *   "fieldType": 1,
         *   "fieldOrder": 1,
         *   "listItems": []
         * }
         */
        "application/json": components["schemas"]["UserDefinedFieldRequest"];
        /**
         * @example {
         *   "groupId": 1,
         *   "fieldName": "String",
         *   "fieldType": 1,
         *   "fieldOrder": 1,
         *   "listItems": []
         * }
         */
        "text/json": components["schemas"]["UserDefinedFieldRequest"];
        /**
         * @example {
         *   "groupId": 1,
         *   "fieldName": "String",
         *   "fieldType": 1,
         *   "fieldOrder": 1,
         *   "listItems": []
         * }
         */
        "application/*+json": components["schemas"]["UserDefinedFieldRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDefinedFieldModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Partial Update userDefinedField by id
   * @description Partial Update userDefinedField by id
   */
  UserDefinedField_PatchUserDefinedFieldByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The userDefinedField id */
        userDefinedFieldId: number;
      };
    };
    /** @description The userDefinedField patch doc */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDefinedFieldModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of userDefinedGroup. Support filter/sort by groupOrder, districtWide.
   * @description Gets a list of userDefinedGroup. Support filter/sort by groupOrder, districtWide.
   */
  UserDefinedGroup_GetUserDefinedGroupV1: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        /** @description The type of  UserDefinedGroup */
        type?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfUserDefinedGroupModel"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Create userDefinedGroup
   * @description Create userDefinedGroup
   */
  UserDefinedGroup_PostUserDefinedGroupV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The userDefinedGroup model */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "groupType": "String",
         *   "groupName": "String",
         *   "groupOrder": 1,
         *   "districtWide": false
         * }
         */
        "application/json-patch+json": components["schemas"]["UserDefinedGroupRequest"];
        /**
         * @example {
         *   "groupType": "String",
         *   "groupName": "String",
         *   "groupOrder": 1,
         *   "districtWide": false
         * }
         */
        "application/json": components["schemas"]["UserDefinedGroupRequest"];
        /**
         * @example {
         *   "groupType": "String",
         *   "groupName": "String",
         *   "groupOrder": 1,
         *   "districtWide": false
         * }
         */
        "text/json": components["schemas"]["UserDefinedGroupRequest"];
        /**
         * @example {
         *   "groupType": "String",
         *   "groupName": "String",
         *   "groupOrder": 1,
         *   "districtWide": false
         * }
         */
        "application/*+json": components["schemas"]["UserDefinedGroupRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": unknown;
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets userDefinedGroup by id
   * @description Gets userDefinedGroup by id
   */
  UserDefinedGroup_GetUserDefinedGroupByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The userDefinedGroup id */
        userDefinedGroupId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDefinedGroupModel"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Update userDefinedGroup by id
   * @description Update userDefinedGroup by id
   */
  UserDefinedGroup_PutUserDefinedGroupByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The userDefinedGroup id */
        userDefinedGroupId: number;
      };
    };
    /** @description The userDefinedGroup model */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "groupType": "String",
         *   "groupName": "String",
         *   "groupOrder": 1,
         *   "districtWide": false
         * }
         */
        "application/json-patch+json": components["schemas"]["UserDefinedGroupRequest"];
        /**
         * @example {
         *   "groupType": "String",
         *   "groupName": "String",
         *   "groupOrder": 1,
         *   "districtWide": false
         * }
         */
        "application/json": components["schemas"]["UserDefinedGroupRequest"];
        /**
         * @example {
         *   "groupType": "String",
         *   "groupName": "String",
         *   "groupOrder": 1,
         *   "districtWide": false
         * }
         */
        "text/json": components["schemas"]["UserDefinedGroupRequest"];
        /**
         * @example {
         *   "groupType": "String",
         *   "groupName": "String",
         *   "groupOrder": 1,
         *   "districtWide": false
         * }
         */
        "application/*+json": components["schemas"]["UserDefinedGroupRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDefinedGroupModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Partial Update userDefinedGroup by id
   * @description Partial Update userDefinedGroup by id
   */
  UserDefinedGroup_PatchUserDefinedGroupByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The userDefinedGroup id */
        userDefinedGroupId: number;
      };
    };
    /** @description The userDefinedGroup patch doc */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDefinedGroupModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets userDefinedGroupSecurity
   * @description Gets userDefinedGroupSecurity
   */
  UserDefinedGroupSecurity_GetUserDefinedGroupSecurityV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The userDefinedGroup id */
        userDefinedGroupId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDefinedGroupSecurityModel"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Update userDefinedGroupSecurity
   * @description Update userDefinedGroupSecurity
   */
  UserDefinedGroupSecurity_PutUserDefinedGroupSecurityV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The userDefinedGroup id */
        userDefinedGroupId: number;
      };
    };
    /** @description The UserDefinedGroupSecurity model */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "canEveryoneUse": false,
         *   "group": [],
         *   "person": []
         * }
         */
        "application/json-patch+json": components["schemas"]["UserDefinedGroupSecurityModel"];
        /**
         * @example {
         *   "canEveryoneUse": false,
         *   "group": [],
         *   "person": []
         * }
         */
        "application/json": components["schemas"]["UserDefinedGroupSecurityModel"];
        /**
         * @example {
         *   "canEveryoneUse": false,
         *   "group": [],
         *   "person": []
         * }
         */
        "text/json": components["schemas"]["UserDefinedGroupSecurityModel"];
        /**
         * @example {
         *   "canEveryoneUse": false,
         *   "group": [],
         *   "person": []
         * }
         */
        "application/*+json": components["schemas"]["UserDefinedGroupSecurityModel"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDefinedGroupSecurityModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Partial Update userDefinedGroupSecurity
   * @description Partial Update userDefinedGroupSecurity
   */
  UserDefinedGroupSecurity_PatchUserDefinedGroupSecurityV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The userDefinedGroup id */
        userDefinedGroupId: number;
      };
    };
    /** @description The UserDefinedGroupSecurity patch doc */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDefinedGroupSecurityModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets userDefinedGroupSecurity on securityGroup
   * @description Gets userDefinedGroupSecurity on securityGroup
   */
  UserDefinedGroupSecurity_GetUserDefinedGroup_SecurityGroupV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The userDefinedGroup id */
        userDefinedGroupId: number;
        /** @description Format - int32. The securityGroup id */
        securityGroupId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDefinedGroupSecurityItemModel"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Update userDefinedGroupSecurity on securityGroup
   * @description Update userDefinedGroupSecurity on securityGroup
   */
  UserDefinedGroupSecurity_PutUserDefinedGroup_SecurityGroupV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The userDefinedGroup id */
        userDefinedGroupId: number;
        /** @description Format - int32. The securityGroup id */
        securityGroupId: number;
      };
    };
    /** @description The security Item */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "id": 1,
         *   "securityLevel": 1
         * }
         */
        "application/json-patch+json": components["schemas"]["UserDefinedGroupSecurityItemModel"];
        /**
         * @example {
         *   "id": 1,
         *   "securityLevel": 1
         * }
         */
        "application/json": components["schemas"]["UserDefinedGroupSecurityItemModel"];
        /**
         * @example {
         *   "id": 1,
         *   "securityLevel": 1
         * }
         */
        "text/json": components["schemas"]["UserDefinedGroupSecurityItemModel"];
        /**
         * @example {
         *   "id": 1,
         *   "securityLevel": 1
         * }
         */
        "application/*+json": components["schemas"]["UserDefinedGroupSecurityItemModel"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDefinedGroupSecurityItemModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of all Advising Notes.
   * @description Gets a list of all Advising Notes.
   */
  AdvisingNotes_GetAdvisingNotes: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<AdvisingNoteVmOut>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfAdvisingNoteVmOut"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates the advising note.
   * @description Creates the advising note.
   */
  AdvisingNotes_CreateAdvisingNote: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The note. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "note": "String",
         *   "date": "2020-01-01",
         *   "studentId": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "application/json-patch+json": components["schemas"]["AdvisingNoteVmIn"];
        /**
         * @example {
         *   "note": "String",
         *   "date": "2020-01-01",
         *   "studentId": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "application/json": components["schemas"]["AdvisingNoteVmIn"];
        /**
         * @example {
         *   "note": "String",
         *   "date": "2020-01-01",
         *   "studentId": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "text/json": components["schemas"]["AdvisingNoteVmIn"];
        /**
         * @example {
         *   "note": "String",
         *   "date": "2020-01-01",
         *   "studentId": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "application/*+json": components["schemas"]["AdvisingNoteVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<AdvisingNoteVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["AdvisingNoteVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets an advising note.
   * @description Gets an advising note.
   */
  AdvisingNotes_GetAnAdvisingNote: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The note identifier. */
        noteId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<AdvisingNoteVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["AdvisingNoteVmOut"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces the advising note.
   * @description Replaces the advising note.
   */
  AdvisingNotes_ReplaceAdvisingNote: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The note identifier. */
        noteId: number;
      };
    };
    /** @description The updated note. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "note": "String",
         *   "date": "2020-01-01",
         *   "studentId": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "application/json-patch+json": components["schemas"]["AdvisingNoteVmIn"];
        /**
         * @example {
         *   "note": "String",
         *   "date": "2020-01-01",
         *   "studentId": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "application/json": components["schemas"]["AdvisingNoteVmIn"];
        /**
         * @example {
         *   "note": "String",
         *   "date": "2020-01-01",
         *   "studentId": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "text/json": components["schemas"]["AdvisingNoteVmIn"];
        /**
         * @example {
         *   "note": "String",
         *   "date": "2020-01-01",
         *   "studentId": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "application/*+json": components["schemas"]["AdvisingNoteVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<AdvisingNoteVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["AdvisingNoteVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates the advising note.
   * @description Updates the advising note.
   */
  AdvisingNotes_UpdateAdvisingNote: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The note identifier. */
        noteId: number;
      };
    };
    /** @description The patch document. */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      /** @description Task<ActionResult<AdvisingNoteVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["AdvisingNoteVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * List all conferences.
   * @description List all conferences.
   */
  Conference_GetConferences: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<ConferenceVmOut>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfConferenceVmOut"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates the conference.
   * @description Creates the conference.
   */
  Conference_CreateConference: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The conference. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "date": "2020-01-01",
         *   "studentId": 1,
         *   "reason": "String",
         *   "problem": "String",
         *   "staffID": 1,
         *   "subject": "String",
         *   "recommendation": "String",
         *   "parent": "String",
         *   "location": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "reason1": false,
         *   "reason2": false,
         *   "reason3": false,
         *   "problem1": false,
         *   "problem2": false,
         *   "problem3": false,
         *   "problem4": false,
         *   "problem5": false,
         *   "problem6": false,
         *   "problem7": false,
         *   "problem8": false,
         *   "problem9": false,
         *   "problem10": false
         * }
         */
        "application/json-patch+json": components["schemas"]["ConferenceVmIn"];
        /**
         * @example {
         *   "date": "2020-01-01",
         *   "studentId": 1,
         *   "reason": "String",
         *   "problem": "String",
         *   "staffID": 1,
         *   "subject": "String",
         *   "recommendation": "String",
         *   "parent": "String",
         *   "location": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "reason1": false,
         *   "reason2": false,
         *   "reason3": false,
         *   "problem1": false,
         *   "problem2": false,
         *   "problem3": false,
         *   "problem4": false,
         *   "problem5": false,
         *   "problem6": false,
         *   "problem7": false,
         *   "problem8": false,
         *   "problem9": false,
         *   "problem10": false
         * }
         */
        "application/json": components["schemas"]["ConferenceVmIn"];
        /**
         * @example {
         *   "date": "2020-01-01",
         *   "studentId": 1,
         *   "reason": "String",
         *   "problem": "String",
         *   "staffID": 1,
         *   "subject": "String",
         *   "recommendation": "String",
         *   "parent": "String",
         *   "location": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "reason1": false,
         *   "reason2": false,
         *   "reason3": false,
         *   "problem1": false,
         *   "problem2": false,
         *   "problem3": false,
         *   "problem4": false,
         *   "problem5": false,
         *   "problem6": false,
         *   "problem7": false,
         *   "problem8": false,
         *   "problem9": false,
         *   "problem10": false
         * }
         */
        "text/json": components["schemas"]["ConferenceVmIn"];
        /**
         * @example {
         *   "date": "2020-01-01",
         *   "studentId": 1,
         *   "reason": "String",
         *   "problem": "String",
         *   "staffID": 1,
         *   "subject": "String",
         *   "recommendation": "String",
         *   "parent": "String",
         *   "location": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "reason1": false,
         *   "reason2": false,
         *   "reason3": false,
         *   "problem1": false,
         *   "problem2": false,
         *   "problem3": false,
         *   "problem4": false,
         *   "problem5": false,
         *   "problem6": false,
         *   "problem7": false,
         *   "problem8": false,
         *   "problem9": false,
         *   "problem10": false
         * }
         */
        "application/*+json": components["schemas"]["ConferenceVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<ConferenceVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["ConferenceVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a conference.
   * @description Gets a conference.
   */
  Conference_GetAConference: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The conference identifier. */
        conferenceId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<ConferenceVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["ConferenceVmOut"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces the conference.
   * @description Replaces the conference.
   */
  Conference_ReplaceConference: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The conference identifier. */
        conferenceId: number;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example {
         *   "date": "2020-01-01",
         *   "studentId": 1,
         *   "reason": "String",
         *   "problem": "String",
         *   "staffID": 1,
         *   "subject": "String",
         *   "recommendation": "String",
         *   "parent": "String",
         *   "location": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "reason1": false,
         *   "reason2": false,
         *   "reason3": false,
         *   "problem1": false,
         *   "problem2": false,
         *   "problem3": false,
         *   "problem4": false,
         *   "problem5": false,
         *   "problem6": false,
         *   "problem7": false,
         *   "problem8": false,
         *   "problem9": false,
         *   "problem10": false
         * }
         */
        "application/json-patch+json": components["schemas"]["ConferenceVmIn"];
        /**
         * @example {
         *   "date": "2020-01-01",
         *   "studentId": 1,
         *   "reason": "String",
         *   "problem": "String",
         *   "staffID": 1,
         *   "subject": "String",
         *   "recommendation": "String",
         *   "parent": "String",
         *   "location": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "reason1": false,
         *   "reason2": false,
         *   "reason3": false,
         *   "problem1": false,
         *   "problem2": false,
         *   "problem3": false,
         *   "problem4": false,
         *   "problem5": false,
         *   "problem6": false,
         *   "problem7": false,
         *   "problem8": false,
         *   "problem9": false,
         *   "problem10": false
         * }
         */
        "application/json": components["schemas"]["ConferenceVmIn"];
        /**
         * @example {
         *   "date": "2020-01-01",
         *   "studentId": 1,
         *   "reason": "String",
         *   "problem": "String",
         *   "staffID": 1,
         *   "subject": "String",
         *   "recommendation": "String",
         *   "parent": "String",
         *   "location": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "reason1": false,
         *   "reason2": false,
         *   "reason3": false,
         *   "problem1": false,
         *   "problem2": false,
         *   "problem3": false,
         *   "problem4": false,
         *   "problem5": false,
         *   "problem6": false,
         *   "problem7": false,
         *   "problem8": false,
         *   "problem9": false,
         *   "problem10": false
         * }
         */
        "text/json": components["schemas"]["ConferenceVmIn"];
        /**
         * @example {
         *   "date": "2020-01-01",
         *   "studentId": 1,
         *   "reason": "String",
         *   "problem": "String",
         *   "staffID": 1,
         *   "subject": "String",
         *   "recommendation": "String",
         *   "parent": "String",
         *   "location": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "reason1": false,
         *   "reason2": false,
         *   "reason3": false,
         *   "problem1": false,
         *   "problem2": false,
         *   "problem3": false,
         *   "problem4": false,
         *   "problem5": false,
         *   "problem6": false,
         *   "problem7": false,
         *   "problem8": false,
         *   "problem9": false,
         *   "problem10": false
         * }
         */
        "application/*+json": components["schemas"]["ConferenceVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<ConferenceVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["ConferenceVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates the conference.
   * @description Updates the conference.
   */
  Conference_UpdateConference: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The conference identifier. */
        conferenceId: number;
      };
    };
    /** @description The patch document. */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      /** @description Task<ActionResult<ConferenceVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["ConferenceVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of student recognition. Support filter/sort by studentId, yearId.
   * @description Gets a list of student recognition. Support filter/sort by studentId, yearId.
   */
  StudentRecognition_GetStudentRecognitionV1: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfStudentRecognitionModel"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Create student recognition
   * @description Create student recognition
   */
  StudentRecognition_PostStudentRecognitionV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The student recognition model */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "studentId": 1,
         *   "yearId": 1,
         *   "recognition": "String",
         *   "note": "String",
         *   "category": "String",
         *   "gradeLevel": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["StudentRecognitionRequest"];
        /**
         * @example {
         *   "studentId": 1,
         *   "yearId": 1,
         *   "recognition": "String",
         *   "note": "String",
         *   "category": "String",
         *   "gradeLevel": "String"
         * }
         */
        "application/json": components["schemas"]["StudentRecognitionRequest"];
        /**
         * @example {
         *   "studentId": 1,
         *   "yearId": 1,
         *   "recognition": "String",
         *   "note": "String",
         *   "category": "String",
         *   "gradeLevel": "String"
         * }
         */
        "text/json": components["schemas"]["StudentRecognitionRequest"];
        /**
         * @example {
         *   "studentId": 1,
         *   "yearId": 1,
         *   "recognition": "String",
         *   "note": "String",
         *   "category": "String",
         *   "gradeLevel": "String"
         * }
         */
        "application/*+json": components["schemas"]["StudentRecognitionRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": unknown;
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets student recognition by id
   * @description Gets student recognition by id
   */
  StudentRecognition_GetStudentRecognitionByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The recognition id */
        recognitionId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StudentRecognitionModel"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Update student recognition
   * @description Update student recognition
   */
  StudentRecognition_PutStudentRecognitionByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The recognition id */
        recognitionId: number;
      };
    };
    /** @description The student recognition model */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "studentId": 1,
         *   "yearId": 1,
         *   "recognition": "String",
         *   "note": "String",
         *   "category": "String",
         *   "gradeLevel": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["StudentRecognitionRequest"];
        /**
         * @example {
         *   "studentId": 1,
         *   "yearId": 1,
         *   "recognition": "String",
         *   "note": "String",
         *   "category": "String",
         *   "gradeLevel": "String"
         * }
         */
        "application/json": components["schemas"]["StudentRecognitionRequest"];
        /**
         * @example {
         *   "studentId": 1,
         *   "yearId": 1,
         *   "recognition": "String",
         *   "note": "String",
         *   "category": "String",
         *   "gradeLevel": "String"
         * }
         */
        "text/json": components["schemas"]["StudentRecognitionRequest"];
        /**
         * @example {
         *   "studentId": 1,
         *   "yearId": 1,
         *   "recognition": "String",
         *   "note": "String",
         *   "category": "String",
         *   "gradeLevel": "String"
         * }
         */
        "application/*+json": components["schemas"]["StudentRecognitionRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StudentRecognitionModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Partial Update student recognition
   * @description Partial Update student recognition
   */
  StudentRecognition_PatchStudentRecognitionByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The recognition id */
        recognitionId: number;
      };
    };
    /** @description The student recognition */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StudentRecognitionModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of student ServiceHours. Support filter by personId, date.
   * @description Gets a list of student ServiceHours. Support filter by personId, date.
   */
  StudentServiceHours_GetStudentServiceHoursV1: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfStudentServiceHoursModel"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Create student serviceHours
   * @description Create student serviceHours
   */
  StudentServiceHours_PostStudentServiceHoursV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The student serviceHours model */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "serviceHoursId": 1,
         *   "personId": 1,
         *   "description": "String",
         *   "hours": 1,
         *   "date": "2020-01-01",
         *   "note": "String",
         *   "verifiedBy": "String",
         *   "createdBy": 1
         * }
         */
        "application/json-patch+json": components["schemas"]["StudentServiceHoursModel"];
        /**
         * @example {
         *   "serviceHoursId": 1,
         *   "personId": 1,
         *   "description": "String",
         *   "hours": 1,
         *   "date": "2020-01-01",
         *   "note": "String",
         *   "verifiedBy": "String",
         *   "createdBy": 1
         * }
         */
        "application/json": components["schemas"]["StudentServiceHoursModel"];
        /**
         * @example {
         *   "serviceHoursId": 1,
         *   "personId": 1,
         *   "description": "String",
         *   "hours": 1,
         *   "date": "2020-01-01",
         *   "note": "String",
         *   "verifiedBy": "String",
         *   "createdBy": 1
         * }
         */
        "text/json": components["schemas"]["StudentServiceHoursModel"];
        /**
         * @example {
         *   "serviceHoursId": 1,
         *   "personId": 1,
         *   "description": "String",
         *   "hours": 1,
         *   "date": "2020-01-01",
         *   "note": "String",
         *   "verifiedBy": "String",
         *   "createdBy": 1
         * }
         */
        "application/*+json": components["schemas"]["StudentServiceHoursModel"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": unknown;
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets student serviceHours by id
   * @description Gets student serviceHours by id
   */
  StudentServiceHours_GetStudentServiceHoursByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The serviceHours id */
        serviceHoursId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StudentServiceHoursModel"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Update student serviceHours
   * @description Update student serviceHours
   */
  StudentServiceHours_PutStudentServiceHoursByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The serviceHours id */
        serviceHoursId: number;
      };
    };
    /** @description The student serviceHours model */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "serviceHoursId": 1,
         *   "personId": 1,
         *   "description": "String",
         *   "hours": 1,
         *   "date": "2020-01-01",
         *   "note": "String",
         *   "verifiedBy": "String",
         *   "createdBy": 1
         * }
         */
        "application/json-patch+json": components["schemas"]["StudentServiceHoursModel"];
        /**
         * @example {
         *   "serviceHoursId": 1,
         *   "personId": 1,
         *   "description": "String",
         *   "hours": 1,
         *   "date": "2020-01-01",
         *   "note": "String",
         *   "verifiedBy": "String",
         *   "createdBy": 1
         * }
         */
        "application/json": components["schemas"]["StudentServiceHoursModel"];
        /**
         * @example {
         *   "serviceHoursId": 1,
         *   "personId": 1,
         *   "description": "String",
         *   "hours": 1,
         *   "date": "2020-01-01",
         *   "note": "String",
         *   "verifiedBy": "String",
         *   "createdBy": 1
         * }
         */
        "text/json": components["schemas"]["StudentServiceHoursModel"];
        /**
         * @example {
         *   "serviceHoursId": 1,
         *   "personId": 1,
         *   "description": "String",
         *   "hours": 1,
         *   "date": "2020-01-01",
         *   "note": "String",
         *   "verifiedBy": "String",
         *   "createdBy": 1
         * }
         */
        "application/*+json": components["schemas"]["StudentServiceHoursModel"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StudentServiceHoursModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Partial Update student serviceHours
   * @description Partial Update student serviceHours
   */
  StudentServiceHours_PatchStudentServiceHoursByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The serviceHours id */
        serviceHoursId: number;
      };
    };
    /** @description The student serviceHours */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StudentServiceHoursModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of behavior event records.
   * @description Gets a list of behavior event records.
   */
  BehaviorEvents_GetBehaviorEvents: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<BehaviorEventsVmOut>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfBehaviorEventsVmOut"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates a behavior event.
   * @description Creates a behavior event.
   */
  BehaviorEvents_CreateBehaviorEvents: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The behavior events. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "dateOfIncident": "2020-01-01",
         *   "descriptionOfIncident": "String",
         *   "history": "String",
         *   "sanction1": "String",
         *   "sanction2": "String",
         *   "sanctionDate1": "2020-01-01",
         *   "sanctionDate2": "2020-01-01",
         *   "violation": "String",
         *   "reportedBy": "String",
         *   "reviewedBy": "String",
         *   "status": "String",
         *   "studentID": 1,
         *   "demerits": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "staffID": 1,
         *   "level": 1,
         *   "type": 1,
         *   "notified": false
         * }
         */
        "application/json-patch+json": components["schemas"]["BehaviorEventsVmIn"];
        /**
         * @example {
         *   "dateOfIncident": "2020-01-01",
         *   "descriptionOfIncident": "String",
         *   "history": "String",
         *   "sanction1": "String",
         *   "sanction2": "String",
         *   "sanctionDate1": "2020-01-01",
         *   "sanctionDate2": "2020-01-01",
         *   "violation": "String",
         *   "reportedBy": "String",
         *   "reviewedBy": "String",
         *   "status": "String",
         *   "studentID": 1,
         *   "demerits": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "staffID": 1,
         *   "level": 1,
         *   "type": 1,
         *   "notified": false
         * }
         */
        "application/json": components["schemas"]["BehaviorEventsVmIn"];
        /**
         * @example {
         *   "dateOfIncident": "2020-01-01",
         *   "descriptionOfIncident": "String",
         *   "history": "String",
         *   "sanction1": "String",
         *   "sanction2": "String",
         *   "sanctionDate1": "2020-01-01",
         *   "sanctionDate2": "2020-01-01",
         *   "violation": "String",
         *   "reportedBy": "String",
         *   "reviewedBy": "String",
         *   "status": "String",
         *   "studentID": 1,
         *   "demerits": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "staffID": 1,
         *   "level": 1,
         *   "type": 1,
         *   "notified": false
         * }
         */
        "text/json": components["schemas"]["BehaviorEventsVmIn"];
        /**
         * @example {
         *   "dateOfIncident": "2020-01-01",
         *   "descriptionOfIncident": "String",
         *   "history": "String",
         *   "sanction1": "String",
         *   "sanction2": "String",
         *   "sanctionDate1": "2020-01-01",
         *   "sanctionDate2": "2020-01-01",
         *   "violation": "String",
         *   "reportedBy": "String",
         *   "reviewedBy": "String",
         *   "status": "String",
         *   "studentID": 1,
         *   "demerits": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "staffID": 1,
         *   "level": 1,
         *   "type": 1,
         *   "notified": false
         * }
         */
        "application/*+json": components["schemas"]["BehaviorEventsVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<BehaviorEventsVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["BehaviorEventsVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a behavior event.
   * @description Gets a behavior event.
   */
  BehaviorEvents_GetABehaviorEvent: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The behavior events identifier. */
        disciplineId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<BehaviorEventsVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["BehaviorEventsVmOut"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces a behavior event.
   * @description Replaces a behavior event.
   */
  BehaviorEvents_ReplaceBehaviorEvents: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The behavior events identifier. */
        disciplineId: number;
      };
    };
    /** @description The behavior events. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "dateOfIncident": "2020-01-01",
         *   "descriptionOfIncident": "String",
         *   "history": "String",
         *   "sanction1": "String",
         *   "sanction2": "String",
         *   "sanctionDate1": "2020-01-01",
         *   "sanctionDate2": "2020-01-01",
         *   "violation": "String",
         *   "reportedBy": "String",
         *   "reviewedBy": "String",
         *   "status": "String",
         *   "studentID": 1,
         *   "demerits": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "staffID": 1,
         *   "level": 1,
         *   "type": 1,
         *   "notified": false
         * }
         */
        "application/json-patch+json": components["schemas"]["BehaviorEventsVmIn"];
        /**
         * @example {
         *   "dateOfIncident": "2020-01-01",
         *   "descriptionOfIncident": "String",
         *   "history": "String",
         *   "sanction1": "String",
         *   "sanction2": "String",
         *   "sanctionDate1": "2020-01-01",
         *   "sanctionDate2": "2020-01-01",
         *   "violation": "String",
         *   "reportedBy": "String",
         *   "reviewedBy": "String",
         *   "status": "String",
         *   "studentID": 1,
         *   "demerits": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "staffID": 1,
         *   "level": 1,
         *   "type": 1,
         *   "notified": false
         * }
         */
        "application/json": components["schemas"]["BehaviorEventsVmIn"];
        /**
         * @example {
         *   "dateOfIncident": "2020-01-01",
         *   "descriptionOfIncident": "String",
         *   "history": "String",
         *   "sanction1": "String",
         *   "sanction2": "String",
         *   "sanctionDate1": "2020-01-01",
         *   "sanctionDate2": "2020-01-01",
         *   "violation": "String",
         *   "reportedBy": "String",
         *   "reviewedBy": "String",
         *   "status": "String",
         *   "studentID": 1,
         *   "demerits": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "staffID": 1,
         *   "level": 1,
         *   "type": 1,
         *   "notified": false
         * }
         */
        "text/json": components["schemas"]["BehaviorEventsVmIn"];
        /**
         * @example {
         *   "dateOfIncident": "2020-01-01",
         *   "descriptionOfIncident": "String",
         *   "history": "String",
         *   "sanction1": "String",
         *   "sanction2": "String",
         *   "sanctionDate1": "2020-01-01",
         *   "sanctionDate2": "2020-01-01",
         *   "violation": "String",
         *   "reportedBy": "String",
         *   "reviewedBy": "String",
         *   "status": "String",
         *   "studentID": 1,
         *   "demerits": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "staffID": 1,
         *   "level": 1,
         *   "type": 1,
         *   "notified": false
         * }
         */
        "application/*+json": components["schemas"]["BehaviorEventsVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<BehaviorEventsVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["BehaviorEventsVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates the behavior event.
   * @description Updates the behavior event.
   */
  BehaviorEvents_UpdateBehaviorEvents: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The behavior events identifier. */
        disciplineId: number;
      };
    };
    /** @description The patch document. */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      /** @description Task<ActionResult<BehaviorEventsVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["BehaviorEventsVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * List all the notes.
   * @description List all the notes.
   */
  Notes_GetNotes: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<NoteVmOut>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfNoteVmOut"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a note.
   * @description Gets a note.
   */
  Notes_GetANote: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The note identifier. */
        noteId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<NoteVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["NoteVmOut"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces a note.
   * @description Replaces a note.
   */
  Notes_ReplaceANote: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The note identifier. */
        noteId: number;
      };
    };
    /** @description The updated note. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "enteredById": 1,
         *   "noteDate": "2020-01-01",
         *   "noteType": {},
         *   "personId": 1,
         *   "note": "String",
         *   "yearId": 1
         * }
         */
        "application/json-patch+json": components["schemas"]["NoteVmIn"];
        /**
         * @example {
         *   "enteredById": 1,
         *   "noteDate": "2020-01-01",
         *   "noteType": {},
         *   "personId": 1,
         *   "note": "String",
         *   "yearId": 1
         * }
         */
        "application/json": components["schemas"]["NoteVmIn"];
        /**
         * @example {
         *   "enteredById": 1,
         *   "noteDate": "2020-01-01",
         *   "noteType": {},
         *   "personId": 1,
         *   "note": "String",
         *   "yearId": 1
         * }
         */
        "text/json": components["schemas"]["NoteVmIn"];
        /**
         * @example {
         *   "enteredById": 1,
         *   "noteDate": "2020-01-01",
         *   "noteType": {},
         *   "personId": 1,
         *   "note": "String",
         *   "yearId": 1
         * }
         */
        "application/*+json": components["schemas"]["NoteVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<NoteVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["NoteVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates a note.
   * @description Updates a note.
   */
  Notes_UpdateANote: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The note identifier. */
        noteId: number;
      };
    };
    /** @description The patch document. */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      /** @description Task<ActionResult<NoteVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["NoteVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of parent ServiceHours. Support filter by personId, date.
   * @description Gets a list of parent ServiceHours. Support filter by personId, date.
   */
  ParentServiceHours_GetParentServiceHoursV1: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfStudentServiceHoursModel"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Create parent serviceHours
   * @description Create parent serviceHours
   */
  ParentServiceHours_PostParentServiceHoursV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The parent serviceHours model */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "serviceHoursId": 1,
         *   "personId": 1,
         *   "description": "String",
         *   "hours": 1,
         *   "date": "2020-01-01",
         *   "note": "String",
         *   "verifiedBy": "String",
         *   "createdBy": 1
         * }
         */
        "application/json-patch+json": components["schemas"]["StudentServiceHoursModel"];
        /**
         * @example {
         *   "serviceHoursId": 1,
         *   "personId": 1,
         *   "description": "String",
         *   "hours": 1,
         *   "date": "2020-01-01",
         *   "note": "String",
         *   "verifiedBy": "String",
         *   "createdBy": 1
         * }
         */
        "application/json": components["schemas"]["StudentServiceHoursModel"];
        /**
         * @example {
         *   "serviceHoursId": 1,
         *   "personId": 1,
         *   "description": "String",
         *   "hours": 1,
         *   "date": "2020-01-01",
         *   "note": "String",
         *   "verifiedBy": "String",
         *   "createdBy": 1
         * }
         */
        "text/json": components["schemas"]["StudentServiceHoursModel"];
        /**
         * @example {
         *   "serviceHoursId": 1,
         *   "personId": 1,
         *   "description": "String",
         *   "hours": 1,
         *   "date": "2020-01-01",
         *   "note": "String",
         *   "verifiedBy": "String",
         *   "createdBy": 1
         * }
         */
        "application/*+json": components["schemas"]["StudentServiceHoursModel"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": unknown;
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets parent serviceHours by id
   * @description Gets parent serviceHours by id
   */
  ParentServiceHours_GetParentServiceHoursByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The serviceHours id */
        serviceHoursId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StudentServiceHoursModel"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Update parent serviceHours
   * @description Update parent serviceHours
   */
  ParentServiceHours_PutParentServiceHoursByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The serviceHours id */
        serviceHoursId: number;
      };
    };
    /** @description The serviceHours model */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "serviceHoursId": 1,
         *   "personId": 1,
         *   "description": "String",
         *   "hours": 1,
         *   "date": "2020-01-01",
         *   "note": "String",
         *   "verifiedBy": "String",
         *   "createdBy": 1,
         *   "yearId": 0
         * }
         */
        "application/json-patch+json": components["schemas"]["ServiceHoursModel"];
        /**
         * @example {
         *   "serviceHoursId": 1,
         *   "personId": 1,
         *   "description": "String",
         *   "hours": 1,
         *   "date": "2020-01-01",
         *   "note": "String",
         *   "verifiedBy": "String",
         *   "createdBy": 1,
         *   "yearId": 0
         * }
         */
        "application/json": components["schemas"]["ServiceHoursModel"];
        /**
         * @example {
         *   "serviceHoursId": 1,
         *   "personId": 1,
         *   "description": "String",
         *   "hours": 1,
         *   "date": "2020-01-01",
         *   "note": "String",
         *   "verifiedBy": "String",
         *   "createdBy": 1,
         *   "yearId": 0
         * }
         */
        "text/json": components["schemas"]["ServiceHoursModel"];
        /**
         * @example {
         *   "serviceHoursId": 1,
         *   "personId": 1,
         *   "description": "String",
         *   "hours": 1,
         *   "date": "2020-01-01",
         *   "note": "String",
         *   "verifiedBy": "String",
         *   "createdBy": 1,
         *   "yearId": 0
         * }
         */
        "application/*+json": components["schemas"]["ServiceHoursModel"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ServiceHoursModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Partial Update parent serviceHours
   * @description Partial Update parent serviceHours
   */
  ParentServiceHours_PatchParentServiceHoursByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The serviceHours id */
        serviceHoursId: number;
      };
    };
    /** @description The serviceHours */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StudentServiceHoursModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of the observations.
   * @description Gets a list of the observations.
   */
  StaffObservations_GetStaffObservations: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<StaffObservationsVmOut>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfStaffObservationsVmOut"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates the staff observation.
   * @description Creates the staff observation.
   */
  StaffObservations_CreateStaffObservation: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The vm. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "endDate": "2020-01-01",
         *   "eval": false,
         *   "evaluatorId": 1,
         *   "observationConfigId": 1,
         *   "personId": 1,
         *   "startDate": "2020-01-01",
         *   "title": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["StaffObservationsVmIn"];
        /**
         * @example {
         *   "endDate": "2020-01-01",
         *   "eval": false,
         *   "evaluatorId": 1,
         *   "observationConfigId": 1,
         *   "personId": 1,
         *   "startDate": "2020-01-01",
         *   "title": "String"
         * }
         */
        "application/json": components["schemas"]["StaffObservationsVmIn"];
        /**
         * @example {
         *   "endDate": "2020-01-01",
         *   "eval": false,
         *   "evaluatorId": 1,
         *   "observationConfigId": 1,
         *   "personId": 1,
         *   "startDate": "2020-01-01",
         *   "title": "String"
         * }
         */
        "text/json": components["schemas"]["StaffObservationsVmIn"];
        /**
         * @example {
         *   "endDate": "2020-01-01",
         *   "eval": false,
         *   "evaluatorId": 1,
         *   "observationConfigId": 1,
         *   "personId": 1,
         *   "startDate": "2020-01-01",
         *   "title": "String"
         * }
         */
        "application/*+json": components["schemas"]["StaffObservationsVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<StaffObservationsVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["StaffObservationsVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a staff observation.
   * @description Gets a staff observation.
   */
  StaffObservations_GetAStaffObservation: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The observation identifier. */
        observationId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<StaffObservationsVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["StaffObservationsVmOut"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces the staff observation.
   * @description Replaces the staff observation.
   */
  StaffObservations_ReplaceStaffObservation: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The observation identifier. */
        observationId: number;
      };
    };
    /** @description The vm. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "endDate": "2020-01-01",
         *   "eval": false,
         *   "evaluatorId": 1,
         *   "observationConfigId": 1,
         *   "personId": 1,
         *   "startDate": "2020-01-01",
         *   "title": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["StaffObservationsVmIn"];
        /**
         * @example {
         *   "endDate": "2020-01-01",
         *   "eval": false,
         *   "evaluatorId": 1,
         *   "observationConfigId": 1,
         *   "personId": 1,
         *   "startDate": "2020-01-01",
         *   "title": "String"
         * }
         */
        "application/json": components["schemas"]["StaffObservationsVmIn"];
        /**
         * @example {
         *   "endDate": "2020-01-01",
         *   "eval": false,
         *   "evaluatorId": 1,
         *   "observationConfigId": 1,
         *   "personId": 1,
         *   "startDate": "2020-01-01",
         *   "title": "String"
         * }
         */
        "text/json": components["schemas"]["StaffObservationsVmIn"];
        /**
         * @example {
         *   "endDate": "2020-01-01",
         *   "eval": false,
         *   "evaluatorId": 1,
         *   "observationConfigId": 1,
         *   "personId": 1,
         *   "startDate": "2020-01-01",
         *   "title": "String"
         * }
         */
        "application/*+json": components["schemas"]["StaffObservationsVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<StaffObservationsVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["StaffObservationsVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates the staff observation.
   * @description Updates the staff observation.
   */
  StaffObservations_UpdateStaffObservation: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The observation identifier. */
        observationId: number;
      };
    };
    /** @description The patch document. */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      /** @description Task<ActionResult<StaffObservationsVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["StaffObservationsVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of student alerts.
   * @description Gets a list of student alerts.
   */
  AlertApplication_GetStudentAlertApplications: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<StudentAlertApplicationVmOut>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfAlertApplicationVm"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates a student alert application.
   * @description Creates a student alert application.
   */
  AlertApplication_CreateStudentAlertApplication: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The student alert. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "alertID": 1,
         *   "applicationID": 1,
         *   "visual": false,
         *   "beep": false,
         *   "popUp": false,
         *   "popUpAlways": false
         * }
         */
        "application/json-patch+json": components["schemas"]["AlertApplicationVm"];
        /**
         * @example {
         *   "alertID": 1,
         *   "applicationID": 1,
         *   "visual": false,
         *   "beep": false,
         *   "popUp": false,
         *   "popUpAlways": false
         * }
         */
        "application/json": components["schemas"]["AlertApplicationVm"];
        /**
         * @example {
         *   "alertID": 1,
         *   "applicationID": 1,
         *   "visual": false,
         *   "beep": false,
         *   "popUp": false,
         *   "popUpAlways": false
         * }
         */
        "text/json": components["schemas"]["AlertApplicationVm"];
        /**
         * @example {
         *   "alertID": 1,
         *   "applicationID": 1,
         *   "visual": false,
         *   "beep": false,
         *   "popUp": false,
         *   "popUpAlways": false
         * }
         */
        "application/*+json": components["schemas"]["AlertApplicationVm"];
      };
    };
    responses: {
      /** @description Task<ActionResult<StudentAlertApplicationVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["AlertApplicationVm"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a student alert application.
   * @description Gets a student alert application.
   */
  AlertApplication_GetAStudentAlertApplication: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The alert identifier. */
        alertId: number;
        /**
         * @description Format - int32. The applicationId identifier.
         *             Gets or sets the Enum value for which application the alert should show in.
         *             Unless noted, it will show upon selecting the person on the main screen in that area
         *             1= Student General
         *             2= Cash Register
         *             3= Lunch Verification
         *             4= Student Clock
         *             5= Medical
         *             6= Teacher (Shows on staff login, for any instructors of classes the student is in)
         */
        applicationId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<StudentAlertApplicationVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["AlertApplicationVm"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces a student alert application.
   * @description Replaces a student alert application.
   */
  AlertApplication_ReplaceStudentAlertApplication: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The alert identifier. */
        alertId: number;
        /**
         * @description Format - int32. The applicationId identifier.
         *             Gets or sets the Enum value for which application the alert should show in.
         *             Unless noted, it will show upon selecting the person on the main screen in that area
         *             1= Student General
         *             2= Cash Register
         *             3= Lunch Verification
         *             4= Student Clock
         *             5= Medical
         *             6= Teacher (Shows on staff login, for any instructors of classes the student is in)
         */
        applicationId: number;
      };
    };
    /** @description The student alert. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "alertID": 1,
         *   "applicationID": 1,
         *   "visual": false,
         *   "beep": false,
         *   "popUp": false,
         *   "popUpAlways": false
         * }
         */
        "application/json-patch+json": components["schemas"]["AlertApplicationVm"];
        /**
         * @example {
         *   "alertID": 1,
         *   "applicationID": 1,
         *   "visual": false,
         *   "beep": false,
         *   "popUp": false,
         *   "popUpAlways": false
         * }
         */
        "application/json": components["schemas"]["AlertApplicationVm"];
        /**
         * @example {
         *   "alertID": 1,
         *   "applicationID": 1,
         *   "visual": false,
         *   "beep": false,
         *   "popUp": false,
         *   "popUpAlways": false
         * }
         */
        "text/json": components["schemas"]["AlertApplicationVm"];
        /**
         * @example {
         *   "alertID": 1,
         *   "applicationID": 1,
         *   "visual": false,
         *   "beep": false,
         *   "popUp": false,
         *   "popUpAlways": false
         * }
         */
        "application/*+json": components["schemas"]["AlertApplicationVm"];
      };
    };
    responses: {
      /** @description Task<ActionResult<StudentAlertApplicationVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["AlertApplicationVm"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates tha student alert application.
   * @description Updates tha student alert application.
   */
  AlertApplication_UpdateStudentAlertApplication: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The alert identifier. */
        alertId: number;
        /**
         * @description Format - int32. The applicationId identifier.
         *             Gets or sets the Enum value for which application the alert should show in.
         *             Unless noted, it will show upon selecting the person on the main screen in that area
         *             1= Student General
         *             2= Cash Register
         *             3= Lunch Verification
         *             4= Student Clock
         *             5= Medical
         *             6= Teacher (Shows on staff login, for any instructors of classes the student is in)
         */
        applicationId: number;
      };
    };
    /** @description The patch document. */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      /** @description Task<ActionResult<StudentAlertApplicationVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["AlertApplicationVm"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of interest categories.
   * @description Gets a list of interest categories.
   */
  Categories_GetAllInterestCategories: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<InterestCategoryVmOut>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfInterestCategoryVmOut"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates a interest category.
   * @description Creates a interest category.
   */
  Categories_CreateInterestCategory: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The interest category. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "category": "String",
         *   "districtWide": false,
         *   "type": 1,
         *   "sortOrder": 1,
         *   "onlineApplication": false,
         *   "schoolCode": "String",
         *   "active": false
         * }
         */
        "application/json-patch+json": components["schemas"]["InterestCategoryVmIn"];
        /**
         * @example {
         *   "category": "String",
         *   "districtWide": false,
         *   "type": 1,
         *   "sortOrder": 1,
         *   "onlineApplication": false,
         *   "schoolCode": "String",
         *   "active": false
         * }
         */
        "application/json": components["schemas"]["InterestCategoryVmIn"];
        /**
         * @example {
         *   "category": "String",
         *   "districtWide": false,
         *   "type": 1,
         *   "sortOrder": 1,
         *   "onlineApplication": false,
         *   "schoolCode": "String",
         *   "active": false
         * }
         */
        "text/json": components["schemas"]["InterestCategoryVmIn"];
        /**
         * @example {
         *   "category": "String",
         *   "districtWide": false,
         *   "type": 1,
         *   "sortOrder": 1,
         *   "onlineApplication": false,
         *   "schoolCode": "String",
         *   "active": false
         * }
         */
        "application/*+json": components["schemas"]["InterestCategoryVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<InterestCategoryVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["InterestCategoryVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a single interest category.
   * @description Gets a single interest category.
   */
  Categories_GetInterestCategory: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The interest category identifier. */
        interestCategoryId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<InterestCategoryVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["InterestCategoryVmOut"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces a interest category.
   * @description Replaces a interest category.
   */
  Categories_ReplaceInterestCategory: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The interest category identifier. */
        interestCategoryId: number;
      };
    };
    /** @description The interest category. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "category": "String",
         *   "districtWide": false,
         *   "type": 1,
         *   "sortOrder": 1,
         *   "onlineApplication": false,
         *   "schoolCode": "String",
         *   "active": false
         * }
         */
        "application/json-patch+json": components["schemas"]["InterestCategoryVmIn"];
        /**
         * @example {
         *   "category": "String",
         *   "districtWide": false,
         *   "type": 1,
         *   "sortOrder": 1,
         *   "onlineApplication": false,
         *   "schoolCode": "String",
         *   "active": false
         * }
         */
        "application/json": components["schemas"]["InterestCategoryVmIn"];
        /**
         * @example {
         *   "category": "String",
         *   "districtWide": false,
         *   "type": 1,
         *   "sortOrder": 1,
         *   "onlineApplication": false,
         *   "schoolCode": "String",
         *   "active": false
         * }
         */
        "text/json": components["schemas"]["InterestCategoryVmIn"];
        /**
         * @example {
         *   "category": "String",
         *   "districtWide": false,
         *   "type": 1,
         *   "sortOrder": 1,
         *   "onlineApplication": false,
         *   "schoolCode": "String",
         *   "active": false
         * }
         */
        "application/*+json": components["schemas"]["InterestCategoryVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<InterestCategoryVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["InterestCategoryVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates tha interest category.
   * @description Updates tha interest category.
   */
  Categories_UpdateInterestCategory: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The interest category identifier. */
        interestCategoryId: number;
      };
    };
    /** @description The patch document. */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      /** @description Task<ActionResult<InterestCategoryVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["InterestCategoryVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of interest items.
   * @description Gets a list of interest items.
   */
  Items_GetAllInterestItems: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<InterestItemsVmOut>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfInterestItemsVmOut"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates a interest items.
   * @description Creates a interest items.
   */
  Items_CreateInterestItems: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The interest items. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "interest": "String",
         *   "interestCategoryID": 1,
         *   "sortOrder": 1,
         *   "active": false
         * }
         */
        "application/json-patch+json": components["schemas"]["InterestItemsVmIn"];
        /**
         * @example {
         *   "interest": "String",
         *   "interestCategoryID": 1,
         *   "sortOrder": 1,
         *   "active": false
         * }
         */
        "application/json": components["schemas"]["InterestItemsVmIn"];
        /**
         * @example {
         *   "interest": "String",
         *   "interestCategoryID": 1,
         *   "sortOrder": 1,
         *   "active": false
         * }
         */
        "text/json": components["schemas"]["InterestItemsVmIn"];
        /**
         * @example {
         *   "interest": "String",
         *   "interestCategoryID": 1,
         *   "sortOrder": 1,
         *   "active": false
         * }
         */
        "application/*+json": components["schemas"]["InterestItemsVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<InterestItemsVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["InterestItemsVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a single interest items.
   * @description Gets a single interest items.
   */
  Items_GetInterestItems: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The interest items identifier. */
        interestItemsId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<InterestItemsVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["InterestItemsVmOut"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces a interest items.
   * @description Replaces a interest items.
   */
  Items_ReplaceInterestItems: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The interest items identifier. */
        interestItemsId: number;
      };
    };
    /** @description The interest items. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "interest": "String",
         *   "interestCategoryID": 1,
         *   "sortOrder": 1,
         *   "active": false
         * }
         */
        "application/json-patch+json": components["schemas"]["InterestItemsVmIn"];
        /**
         * @example {
         *   "interest": "String",
         *   "interestCategoryID": 1,
         *   "sortOrder": 1,
         *   "active": false
         * }
         */
        "application/json": components["schemas"]["InterestItemsVmIn"];
        /**
         * @example {
         *   "interest": "String",
         *   "interestCategoryID": 1,
         *   "sortOrder": 1,
         *   "active": false
         * }
         */
        "text/json": components["schemas"]["InterestItemsVmIn"];
        /**
         * @example {
         *   "interest": "String",
         *   "interestCategoryID": 1,
         *   "sortOrder": 1,
         *   "active": false
         * }
         */
        "application/*+json": components["schemas"]["InterestItemsVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<InterestItemsVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["InterestItemsVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates tha interest items.
   * @description Updates tha interest items.
   */
  Items_UpdateInterestItems: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The interest items identifier. */
        interestItemsId: number;
      };
    };
    /** @description The patch document. */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      /** @description Task<ActionResult<InterestItemsVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["InterestItemsVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets all families.
   * @description Gets all families.
   */
  Family_GetAllFamilies: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<FamilyConfigVmOut>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfFamilyConfigVmOut"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates the family.
   * @description Creates the family.
   */
  Family_CreateFamily: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The family. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "familyName": "String",
         *   "enableWeb": false,
         *   "unlisted": 1,
         *   "note": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "familyNameBP": "String",
         *   "parentsWebFinancialBlock": false
         * }
         */
        "application/json-patch+json": components["schemas"]["FamilyConfigVmIn"];
        /**
         * @example {
         *   "familyName": "String",
         *   "enableWeb": false,
         *   "unlisted": 1,
         *   "note": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "familyNameBP": "String",
         *   "parentsWebFinancialBlock": false
         * }
         */
        "application/json": components["schemas"]["FamilyConfigVmIn"];
        /**
         * @example {
         *   "familyName": "String",
         *   "enableWeb": false,
         *   "unlisted": 1,
         *   "note": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "familyNameBP": "String",
         *   "parentsWebFinancialBlock": false
         * }
         */
        "text/json": components["schemas"]["FamilyConfigVmIn"];
        /**
         * @example {
         *   "familyName": "String",
         *   "enableWeb": false,
         *   "unlisted": 1,
         *   "note": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "familyNameBP": "String",
         *   "parentsWebFinancialBlock": false
         * }
         */
        "application/*+json": components["schemas"]["FamilyConfigVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<FamilyConfigVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["FamilyConfigVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets the family.
   * @description Gets the family.
   */
  Family_GetFamily: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The family identifier. */
        familyId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<FamilyConfigVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["FamilyConfigVmOut"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces the family.
   * @description Replaces the family.
   */
  Family_ReplaceFamily: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The family identifier. */
        familyId: number;
      };
    };
    /** @description The family. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "familyName": "String",
         *   "enableWeb": false,
         *   "unlisted": 1,
         *   "note": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "familyNameBP": "String",
         *   "parentsWebFinancialBlock": false
         * }
         */
        "application/json-patch+json": components["schemas"]["FamilyConfigVmIn"];
        /**
         * @example {
         *   "familyName": "String",
         *   "enableWeb": false,
         *   "unlisted": 1,
         *   "note": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "familyNameBP": "String",
         *   "parentsWebFinancialBlock": false
         * }
         */
        "application/json": components["schemas"]["FamilyConfigVmIn"];
        /**
         * @example {
         *   "familyName": "String",
         *   "enableWeb": false,
         *   "unlisted": 1,
         *   "note": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "familyNameBP": "String",
         *   "parentsWebFinancialBlock": false
         * }
         */
        "text/json": components["schemas"]["FamilyConfigVmIn"];
        /**
         * @example {
         *   "familyName": "String",
         *   "enableWeb": false,
         *   "unlisted": 1,
         *   "note": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "familyNameBP": "String",
         *   "parentsWebFinancialBlock": false
         * }
         */
        "application/*+json": components["schemas"]["FamilyConfigVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<FamilyConfigVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["FamilyConfigVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates the family.
   * @description Updates the family.
   */
  Family_UpdateFamily: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The family identifier. */
        familyId: number;
      };
    };
    /** @description The patch document. */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      /** @description Task<ActionResult<FamilyConfigVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["FamilyConfigVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of student progression
   * @description Gets a list of student progression
   */
  StudentPreProgression_GetStudentProgressionListV1: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfStudentPreProgressionModel"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets student progression by id
   * @description Gets student progression by id
   */
  StudentPreProgression_GetStudentProgressionV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The unique student id */
        personStudentId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StudentPreProgressionModel"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of SchoolYears. Support filter/sort by yearId, yearName, firstDay, lastDay.
   * @description Gets a list of SchoolYears. Support filter/sort by yearId, yearName, firstDay, lastDay.
   */
  SchoolYear_GetSchoolYearV1: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfSchoolYearModel"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Create SchoolYear
   * @description Create SchoolYear
   */
  SchoolYear_PostSchoolYearV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The schoolYear model */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "yearName": "String",
         *   "allowInquiry": false,
         *   "blockAcademicYear": false
         * }
         */
        "application/json-patch+json": components["schemas"]["SchoolYearRequest"];
        /**
         * @example {
         *   "yearName": "String",
         *   "allowInquiry": false,
         *   "blockAcademicYear": false
         * }
         */
        "application/json": components["schemas"]["SchoolYearRequest"];
        /**
         * @example {
         *   "yearName": "String",
         *   "allowInquiry": false,
         *   "blockAcademicYear": false
         * }
         */
        "text/json": components["schemas"]["SchoolYearRequest"];
        /**
         * @example {
         *   "yearName": "String",
         *   "allowInquiry": false,
         *   "blockAcademicYear": false
         * }
         */
        "application/*+json": components["schemas"]["SchoolYearRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": unknown;
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets SchoolYear by id
   * @description Gets SchoolYear by id
   */
  SchoolYear_GetSchoolYearByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The schoolYear id */
        schoolYearId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SchoolYearModel"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Update SchoolYear by id
   * @description Update SchoolYear by id
   */
  SchoolYear_PutSchoolYearByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The schoolYear id */
        schoolYearId: number;
      };
    };
    /** @description The schoolYear model */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "yearName": "String",
         *   "allowInquiry": false,
         *   "blockAcademicYear": false
         * }
         */
        "application/json-patch+json": components["schemas"]["SchoolYearRequest"];
        /**
         * @example {
         *   "yearName": "String",
         *   "allowInquiry": false,
         *   "blockAcademicYear": false
         * }
         */
        "application/json": components["schemas"]["SchoolYearRequest"];
        /**
         * @example {
         *   "yearName": "String",
         *   "allowInquiry": false,
         *   "blockAcademicYear": false
         * }
         */
        "text/json": components["schemas"]["SchoolYearRequest"];
        /**
         * @example {
         *   "yearName": "String",
         *   "allowInquiry": false,
         *   "blockAcademicYear": false
         * }
         */
        "application/*+json": components["schemas"]["SchoolYearRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SchoolYearModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Partial Update SchoolYear by id
   * @description Partial Update SchoolYear by id
   */
  SchoolYear_PatchSchoolYearByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The schoolYear id */
        schoolYearId: number;
      };
    };
    /** @description The schoolYear patch doc */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["Operation3Array"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SchoolYearModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * List all classes.
   * @description List all classes.
   */
  Classes_GetAllClasses: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<ClassVmOutV1>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfClassVmOutV1"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates a class.
   * @description Creates a class.
   */
  Classes_CreateAClass: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The vm. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "aideId": 1,
         *   "closed": false,
         *   "color": "String",
         *   "colorText": "String",
         *   "courseID": 1,
         *   "googleCourseId": "String",
         *   "legacyClassId": "String",
         *   "linkedClassId": 1,
         *   "maleFemale": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "name": "String",
         *   "pattern": 1,
         *   "requiredRoom": 1,
         *   "section": "String",
         *   "staffId": 1,
         *   "term1": false,
         *   "term2": false,
         *   "term3": false,
         *   "term4": false,
         *   "term5": false,
         *   "term6": false,
         *   "yearId": 1,
         *   "instructor2Id": 0
         * }
         */
        "application/json-patch+json": components["schemas"]["ClassVmInV1"];
        /**
         * @example {
         *   "aideId": 1,
         *   "closed": false,
         *   "color": "String",
         *   "colorText": "String",
         *   "courseID": 1,
         *   "googleCourseId": "String",
         *   "legacyClassId": "String",
         *   "linkedClassId": 1,
         *   "maleFemale": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "name": "String",
         *   "pattern": 1,
         *   "requiredRoom": 1,
         *   "section": "String",
         *   "staffId": 1,
         *   "term1": false,
         *   "term2": false,
         *   "term3": false,
         *   "term4": false,
         *   "term5": false,
         *   "term6": false,
         *   "yearId": 1,
         *   "instructor2Id": 0
         * }
         */
        "application/json": components["schemas"]["ClassVmInV1"];
        /**
         * @example {
         *   "aideId": 1,
         *   "closed": false,
         *   "color": "String",
         *   "colorText": "String",
         *   "courseID": 1,
         *   "googleCourseId": "String",
         *   "legacyClassId": "String",
         *   "linkedClassId": 1,
         *   "maleFemale": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "name": "String",
         *   "pattern": 1,
         *   "requiredRoom": 1,
         *   "section": "String",
         *   "staffId": 1,
         *   "term1": false,
         *   "term2": false,
         *   "term3": false,
         *   "term4": false,
         *   "term5": false,
         *   "term6": false,
         *   "yearId": 1,
         *   "instructor2Id": 0
         * }
         */
        "text/json": components["schemas"]["ClassVmInV1"];
        /**
         * @example {
         *   "aideId": 1,
         *   "closed": false,
         *   "color": "String",
         *   "colorText": "String",
         *   "courseID": 1,
         *   "googleCourseId": "String",
         *   "legacyClassId": "String",
         *   "linkedClassId": 1,
         *   "maleFemale": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "name": "String",
         *   "pattern": 1,
         *   "requiredRoom": 1,
         *   "section": "String",
         *   "staffId": 1,
         *   "term1": false,
         *   "term2": false,
         *   "term3": false,
         *   "term4": false,
         *   "term5": false,
         *   "term6": false,
         *   "yearId": 1,
         *   "instructor2Id": 0
         * }
         */
        "application/*+json": components["schemas"]["ClassVmInV1"];
      };
    };
    responses: {
      /** @description Task<ActionResult<ClassVmOutV1>>. */
      200: {
        content: {
          "application/json": components["schemas"]["ClassVmOutV1"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a class.
   * @description Gets a class.
   */
  Classes_GetAClass: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The class identifier. */
        classId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<ClassVmOutV1>>. */
      200: {
        content: {
          "application/json": components["schemas"]["ClassVmOutV1"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces a class.
   * @description Replaces a class.
   */
  Classes_ReplaceAClass: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The class identifier. */
        classId: number;
      };
    };
    /** @description The vm. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "aideId": 1,
         *   "closed": false,
         *   "color": "String",
         *   "colorText": "String",
         *   "courseID": 1,
         *   "googleCourseId": "String",
         *   "legacyClassId": "String",
         *   "linkedClassId": 1,
         *   "maleFemale": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "name": "String",
         *   "pattern": 1,
         *   "requiredRoom": 1,
         *   "section": "String",
         *   "staffId": 1,
         *   "term1": false,
         *   "term2": false,
         *   "term3": false,
         *   "term4": false,
         *   "term5": false,
         *   "term6": false,
         *   "yearId": 1,
         *   "instructor2Id": 0
         * }
         */
        "application/json-patch+json": components["schemas"]["ClassVmInV1"];
        /**
         * @example {
         *   "aideId": 1,
         *   "closed": false,
         *   "color": "String",
         *   "colorText": "String",
         *   "courseID": 1,
         *   "googleCourseId": "String",
         *   "legacyClassId": "String",
         *   "linkedClassId": 1,
         *   "maleFemale": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "name": "String",
         *   "pattern": 1,
         *   "requiredRoom": 1,
         *   "section": "String",
         *   "staffId": 1,
         *   "term1": false,
         *   "term2": false,
         *   "term3": false,
         *   "term4": false,
         *   "term5": false,
         *   "term6": false,
         *   "yearId": 1,
         *   "instructor2Id": 0
         * }
         */
        "application/json": components["schemas"]["ClassVmInV1"];
        /**
         * @example {
         *   "aideId": 1,
         *   "closed": false,
         *   "color": "String",
         *   "colorText": "String",
         *   "courseID": 1,
         *   "googleCourseId": "String",
         *   "legacyClassId": "String",
         *   "linkedClassId": 1,
         *   "maleFemale": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "name": "String",
         *   "pattern": 1,
         *   "requiredRoom": 1,
         *   "section": "String",
         *   "staffId": 1,
         *   "term1": false,
         *   "term2": false,
         *   "term3": false,
         *   "term4": false,
         *   "term5": false,
         *   "term6": false,
         *   "yearId": 1,
         *   "instructor2Id": 0
         * }
         */
        "text/json": components["schemas"]["ClassVmInV1"];
        /**
         * @example {
         *   "aideId": 1,
         *   "closed": false,
         *   "color": "String",
         *   "colorText": "String",
         *   "courseID": 1,
         *   "googleCourseId": "String",
         *   "legacyClassId": "String",
         *   "linkedClassId": 1,
         *   "maleFemale": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "name": "String",
         *   "pattern": 1,
         *   "requiredRoom": 1,
         *   "section": "String",
         *   "staffId": 1,
         *   "term1": false,
         *   "term2": false,
         *   "term3": false,
         *   "term4": false,
         *   "term5": false,
         *   "term6": false,
         *   "yearId": 1,
         *   "instructor2Id": 0
         * }
         */
        "application/*+json": components["schemas"]["ClassVmInV1"];
      };
    };
    responses: {
      /** @description Task<ActionResult<ClassVmOutV1>>. */
      200: {
        content: {
          "application/json": components["schemas"]["ClassVmOutV1"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates a class.
   * @description Updates a class.
   */
  Classes_UpdateAClass: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The class identifier. */
        classId: number;
      };
    };
    /** @description The patch document. */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["Operation3Array"];
      };
    };
    responses: {
      /** @description Task<ActionResult<ClassVmOutV1>>. */
      200: {
        content: {
          "application/json": components["schemas"]["ClassVmOutV1"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Lists the classes by year.
   * @description Lists the classes by year.
   */
  Classes_GetClassesByYear: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The year identifier. */
        yearId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<ClassVmOutV1>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfClassVmOutV1"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Lists the classes by student.
   * @description Lists the classes by student.
   */
  Classes_GetClassesByStudent: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The student identifier. */
        studentId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<ClassVmOutV1>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfClassVmOutV1"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * List all the courses.
   * @description List all the courses.
   */
  Courses_GetCourses: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<CoursesVmOut>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfCoursesVmOut"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates a course.
   * @description Creates a course.
   */
  Courses_CreateCourse: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The course vm. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "levelID": 1,
         *   "legacyCourseID": "String",
         *   "title": "String",
         *   "abbreviation": "String",
         *   "activity": false,
         *   "attendance": false,
         *   "homeRoom": false,
         *   "schoolCode": "String",
         *   "department": "String",
         *   "active": false,
         *   "elective": false,
         *   "hs": false,
         *   "preSchool": false,
         *   "elementary": false,
         *   "middleSchool": false,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "courseType": "String",
         *   "defaultStaffID": 1,
         *   "departmentID": 1,
         *   "description": "String",
         *   "stateID": "String",
         *   "maxSize": 1
         * }
         */
        "application/json-patch+json": components["schemas"]["CoursesVmIn"];
        /**
         * @example {
         *   "levelID": 1,
         *   "legacyCourseID": "String",
         *   "title": "String",
         *   "abbreviation": "String",
         *   "activity": false,
         *   "attendance": false,
         *   "homeRoom": false,
         *   "schoolCode": "String",
         *   "department": "String",
         *   "active": false,
         *   "elective": false,
         *   "hs": false,
         *   "preSchool": false,
         *   "elementary": false,
         *   "middleSchool": false,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "courseType": "String",
         *   "defaultStaffID": 1,
         *   "departmentID": 1,
         *   "description": "String",
         *   "stateID": "String",
         *   "maxSize": 1
         * }
         */
        "application/json": components["schemas"]["CoursesVmIn"];
        /**
         * @example {
         *   "levelID": 1,
         *   "legacyCourseID": "String",
         *   "title": "String",
         *   "abbreviation": "String",
         *   "activity": false,
         *   "attendance": false,
         *   "homeRoom": false,
         *   "schoolCode": "String",
         *   "department": "String",
         *   "active": false,
         *   "elective": false,
         *   "hs": false,
         *   "preSchool": false,
         *   "elementary": false,
         *   "middleSchool": false,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "courseType": "String",
         *   "defaultStaffID": 1,
         *   "departmentID": 1,
         *   "description": "String",
         *   "stateID": "String",
         *   "maxSize": 1
         * }
         */
        "text/json": components["schemas"]["CoursesVmIn"];
        /**
         * @example {
         *   "levelID": 1,
         *   "legacyCourseID": "String",
         *   "title": "String",
         *   "abbreviation": "String",
         *   "activity": false,
         *   "attendance": false,
         *   "homeRoom": false,
         *   "schoolCode": "String",
         *   "department": "String",
         *   "active": false,
         *   "elective": false,
         *   "hs": false,
         *   "preSchool": false,
         *   "elementary": false,
         *   "middleSchool": false,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "courseType": "String",
         *   "defaultStaffID": 1,
         *   "departmentID": 1,
         *   "description": "String",
         *   "stateID": "String",
         *   "maxSize": 1
         * }
         */
        "application/*+json": components["schemas"]["CoursesVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<CoursesVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["CoursesVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a course.
   * @description Gets a course.
   */
  Courses_GetACourse: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The course identifier. */
        courseId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<CoursesVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["CoursesVmOut"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces a course.
   * @description Replaces a course.
   */
  Courses_ReplaceACourse: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The course identifier. */
        courseId: number;
      };
    };
    /** @description The course vm. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "levelID": 1,
         *   "legacyCourseID": "String",
         *   "title": "String",
         *   "abbreviation": "String",
         *   "activity": false,
         *   "attendance": false,
         *   "homeRoom": false,
         *   "schoolCode": "String",
         *   "department": "String",
         *   "active": false,
         *   "elective": false,
         *   "hs": false,
         *   "preSchool": false,
         *   "elementary": false,
         *   "middleSchool": false,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "courseType": "String",
         *   "defaultStaffID": 1,
         *   "departmentID": 1,
         *   "description": "String",
         *   "stateID": "String",
         *   "maxSize": 1
         * }
         */
        "application/json-patch+json": components["schemas"]["CoursesVmIn"];
        /**
         * @example {
         *   "levelID": 1,
         *   "legacyCourseID": "String",
         *   "title": "String",
         *   "abbreviation": "String",
         *   "activity": false,
         *   "attendance": false,
         *   "homeRoom": false,
         *   "schoolCode": "String",
         *   "department": "String",
         *   "active": false,
         *   "elective": false,
         *   "hs": false,
         *   "preSchool": false,
         *   "elementary": false,
         *   "middleSchool": false,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "courseType": "String",
         *   "defaultStaffID": 1,
         *   "departmentID": 1,
         *   "description": "String",
         *   "stateID": "String",
         *   "maxSize": 1
         * }
         */
        "application/json": components["schemas"]["CoursesVmIn"];
        /**
         * @example {
         *   "levelID": 1,
         *   "legacyCourseID": "String",
         *   "title": "String",
         *   "abbreviation": "String",
         *   "activity": false,
         *   "attendance": false,
         *   "homeRoom": false,
         *   "schoolCode": "String",
         *   "department": "String",
         *   "active": false,
         *   "elective": false,
         *   "hs": false,
         *   "preSchool": false,
         *   "elementary": false,
         *   "middleSchool": false,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "courseType": "String",
         *   "defaultStaffID": 1,
         *   "departmentID": 1,
         *   "description": "String",
         *   "stateID": "String",
         *   "maxSize": 1
         * }
         */
        "text/json": components["schemas"]["CoursesVmIn"];
        /**
         * @example {
         *   "levelID": 1,
         *   "legacyCourseID": "String",
         *   "title": "String",
         *   "abbreviation": "String",
         *   "activity": false,
         *   "attendance": false,
         *   "homeRoom": false,
         *   "schoolCode": "String",
         *   "department": "String",
         *   "active": false,
         *   "elective": false,
         *   "hs": false,
         *   "preSchool": false,
         *   "elementary": false,
         *   "middleSchool": false,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "courseType": "String",
         *   "defaultStaffID": 1,
         *   "departmentID": 1,
         *   "description": "String",
         *   "stateID": "String",
         *   "maxSize": 1
         * }
         */
        "application/*+json": components["schemas"]["CoursesVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<CoursesVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["CoursesVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates a Course.
   * @description Updates a Course.
   */
  Courses_UpdateACourse: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The course identifier. */
        courseId: number;
      };
    };
    /** @description The patch document. */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["Operation3Array"];
      };
    };
    responses: {
      /** @description Task<ActionResult<CoursesVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["CoursesVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Lists all the enrollments.
   * @description Lists all the enrollments.
   */
  Enrollments_GetEnrollments: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<EnrollmentVm>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfClassEnrollmentVm"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates an enrollment.
   * @description Creates an enrollment.
   */
  Enrollments_CreateAnEnrollment: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The enrollment. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "altYearId": 1,
         *   "classId": 1,
         *   "enrolled": false,
         *   "enrolled1": false,
         *   "enrolled2": false,
         *   "enrolled3": false,
         *   "enrolled4": false,
         *   "enrolled5": false,
         *   "enrolled6": false,
         *   "gradeLevel": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "studentId": 1
         * }
         */
        "application/json-patch+json": components["schemas"]["ClassEnrollmentVm"];
        /**
         * @example {
         *   "altYearId": 1,
         *   "classId": 1,
         *   "enrolled": false,
         *   "enrolled1": false,
         *   "enrolled2": false,
         *   "enrolled3": false,
         *   "enrolled4": false,
         *   "enrolled5": false,
         *   "enrolled6": false,
         *   "gradeLevel": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "studentId": 1
         * }
         */
        "application/json": components["schemas"]["ClassEnrollmentVm"];
        /**
         * @example {
         *   "altYearId": 1,
         *   "classId": 1,
         *   "enrolled": false,
         *   "enrolled1": false,
         *   "enrolled2": false,
         *   "enrolled3": false,
         *   "enrolled4": false,
         *   "enrolled5": false,
         *   "enrolled6": false,
         *   "gradeLevel": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "studentId": 1
         * }
         */
        "text/json": components["schemas"]["ClassEnrollmentVm"];
        /**
         * @example {
         *   "altYearId": 1,
         *   "classId": 1,
         *   "enrolled": false,
         *   "enrolled1": false,
         *   "enrolled2": false,
         *   "enrolled3": false,
         *   "enrolled4": false,
         *   "enrolled5": false,
         *   "enrolled6": false,
         *   "gradeLevel": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "studentId": 1
         * }
         */
        "application/*+json": components["schemas"]["ClassEnrollmentVm"];
      };
    };
    responses: {
      /** @description Task<ActionResult<EnrollmentVm>>. */
      200: {
        content: {
          "application/json": components["schemas"]["ClassEnrollmentVm"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets an enrollment.
   * @description Gets an enrollment.
   */
  Enrollments_GetAnEnrollment: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The student identifier. */
        studentId: number;
        /** @description Format - int32. The class identifier. */
        classId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<EnrollmentVm>>. */
      200: {
        content: {
          "application/json": components["schemas"]["ClassEnrollmentVm"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces an enrollment.
   * @description Replaces an enrollment.
   */
  Enrollments_ReplaceAnEnrollment: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The student identifier. */
        studentId: number;
        /** @description Format - int32. The class identifier. */
        classId: number;
      };
    };
    /** @description The enrollment. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "altYearId": 1,
         *   "classId": 1,
         *   "enrolled": false,
         *   "enrolled1": false,
         *   "enrolled2": false,
         *   "enrolled3": false,
         *   "enrolled4": false,
         *   "enrolled5": false,
         *   "enrolled6": false,
         *   "gradeLevel": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "studentId": 1
         * }
         */
        "application/json-patch+json": components["schemas"]["ClassEnrollmentVm"];
        /**
         * @example {
         *   "altYearId": 1,
         *   "classId": 1,
         *   "enrolled": false,
         *   "enrolled1": false,
         *   "enrolled2": false,
         *   "enrolled3": false,
         *   "enrolled4": false,
         *   "enrolled5": false,
         *   "enrolled6": false,
         *   "gradeLevel": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "studentId": 1
         * }
         */
        "application/json": components["schemas"]["ClassEnrollmentVm"];
        /**
         * @example {
         *   "altYearId": 1,
         *   "classId": 1,
         *   "enrolled": false,
         *   "enrolled1": false,
         *   "enrolled2": false,
         *   "enrolled3": false,
         *   "enrolled4": false,
         *   "enrolled5": false,
         *   "enrolled6": false,
         *   "gradeLevel": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "studentId": 1
         * }
         */
        "text/json": components["schemas"]["ClassEnrollmentVm"];
        /**
         * @example {
         *   "altYearId": 1,
         *   "classId": 1,
         *   "enrolled": false,
         *   "enrolled1": false,
         *   "enrolled2": false,
         *   "enrolled3": false,
         *   "enrolled4": false,
         *   "enrolled5": false,
         *   "enrolled6": false,
         *   "gradeLevel": "String",
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "studentId": 1
         * }
         */
        "application/*+json": components["schemas"]["ClassEnrollmentVm"];
      };
    };
    responses: {
      /** @description Task<ActionResult<EnrollmentVm>>. */
      200: {
        content: {
          "application/json": components["schemas"]["ClassEnrollmentVm"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates an enrollment.
   * @description Updates an enrollment.
   */
  Enrollments_UpdateAnEnrollment: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The student identifier. */
        studentId: number;
        /** @description Format - int32. The class identifier. */
        classId: number;
      };
    };
    /** @description The patch document. */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["Operation3Array"];
      };
    };
    responses: {
      /** @description Task<ActionResult<EnrollmentVm>>. */
      200: {
        content: {
          "application/json": components["schemas"]["ClassEnrollmentVm"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * List all the school configs.
   * @description List all the school configs.
   */
  SchoolConfigurations_GetSchoolConfigs: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<SchoolConfigVmOut>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfSchoolConfigVmOut"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a school configuration.
   * @description Gets a school configuration.
   */
  SchoolConfigurations_GetASchoolConfig: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The school identifier. */
        schoolId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<SchoolConfigVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["SchoolConfigVmOut"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces a school configuration.
   * @description Replaces a school configuration.
   */
  SchoolConfigurations_ReplaceASchoolConfig: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The school identifier. */
        schoolId: number;
      };
    };
    /** @description The vm. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "fax": "String",
         *   "phone": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["SchoolConfigVmIn"];
        /**
         * @example {
         *   "fax": "String",
         *   "phone": "String"
         * }
         */
        "application/json": components["schemas"]["SchoolConfigVmIn"];
        /**
         * @example {
         *   "fax": "String",
         *   "phone": "String"
         * }
         */
        "text/json": components["schemas"]["SchoolConfigVmIn"];
        /**
         * @example {
         *   "fax": "String",
         *   "phone": "String"
         * }
         */
        "application/*+json": components["schemas"]["SchoolConfigVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<SchoolConfigVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["SchoolConfigVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates a school configuration.
   * @description Updates a school configuration.
   */
  SchoolConfigurations_UpdateASchoolConfig: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The school identifier. */
        schoolId: number;
      };
    };
    /** @description The patch document. */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["Operation3Array"];
      };
    };
    responses: {
      /** @description Task<ActionResult<SchoolConfigVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["SchoolConfigVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets the school terms.
   * @description Gets the school terms.
   */
  SchoolTerms_GetSchoolTerms: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The school identifier. */
        schoolId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<SchoolTermsVmOut>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfSchoolTermsVmOut"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a school term.
   * @description Gets a school term.
   */
  SchoolTerms_GetASchoolTerm: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The school term identifier. */
        schoolTermId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<SchoolTermsVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["SchoolTermsVmOut"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces the school term.
   * @description Replaces the school term.
   */
  SchoolTerms_ReplaceSchoolTerm: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The school term identifier. */
        schoolTermId: number;
      };
    };
    /** @description The updated term. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "termID": 1,
         *   "yearID": 1,
         *   "name": "String",
         *   "firstDay": "2020-01-01",
         *   "lastDay": "2020-01-01",
         *   "schoolCode": "String",
         *   "semesterID": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "application/json-patch+json": components["schemas"]["SchoolTermsVmIn"];
        /**
         * @example {
         *   "termID": 1,
         *   "yearID": 1,
         *   "name": "String",
         *   "firstDay": "2020-01-01",
         *   "lastDay": "2020-01-01",
         *   "schoolCode": "String",
         *   "semesterID": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "application/json": components["schemas"]["SchoolTermsVmIn"];
        /**
         * @example {
         *   "termID": 1,
         *   "yearID": 1,
         *   "name": "String",
         *   "firstDay": "2020-01-01",
         *   "lastDay": "2020-01-01",
         *   "schoolCode": "String",
         *   "semesterID": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "text/json": components["schemas"]["SchoolTermsVmIn"];
        /**
         * @example {
         *   "termID": 1,
         *   "yearID": 1,
         *   "name": "String",
         *   "firstDay": "2020-01-01",
         *   "lastDay": "2020-01-01",
         *   "schoolCode": "String",
         *   "semesterID": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "application/*+json": components["schemas"]["SchoolTermsVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<SchoolTermsVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["SchoolTermsVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates the school term.
   * @description Updates the school term.
   */
  SchoolTerms_UpdateSchoolTerm: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The school term identifier. */
        schoolTermId: number;
      };
    };
    /** @description The patch document. */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["Operation3Array"];
      };
    };
    responses: {
      /** @description Task<ActionResult<SchoolTermsVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["SchoolTermsVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates the school term.
   * @description Creates the school term.
   */
  SchoolTerms_CreateSchoolTerm: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The school terms. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "termID": 1,
         *   "yearID": 1,
         *   "name": "String",
         *   "firstDay": "2020-01-01",
         *   "lastDay": "2020-01-01",
         *   "schoolCode": "String",
         *   "semesterID": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "application/json-patch+json": components["schemas"]["SchoolTermsVmIn"];
        /**
         * @example {
         *   "termID": 1,
         *   "yearID": 1,
         *   "name": "String",
         *   "firstDay": "2020-01-01",
         *   "lastDay": "2020-01-01",
         *   "schoolCode": "String",
         *   "semesterID": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "application/json": components["schemas"]["SchoolTermsVmIn"];
        /**
         * @example {
         *   "termID": 1,
         *   "yearID": 1,
         *   "name": "String",
         *   "firstDay": "2020-01-01",
         *   "lastDay": "2020-01-01",
         *   "schoolCode": "String",
         *   "semesterID": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "text/json": components["schemas"]["SchoolTermsVmIn"];
        /**
         * @example {
         *   "termID": 1,
         *   "yearID": 1,
         *   "name": "String",
         *   "firstDay": "2020-01-01",
         *   "lastDay": "2020-01-01",
         *   "schoolCode": "String",
         *   "semesterID": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "application/*+json": components["schemas"]["SchoolTermsVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<SchoolTermsVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["SchoolTermsVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Lists all staff.
   * @description Lists all staff.
   */
  Staff_GetStaff: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<StaffVmOut>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfStaffVmOut"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates a staff member.
   * @description Creates a staff member.
   */
  Staff_CreateAStaffMember: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The staff member. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "active": false,
         *   "administrator": false,
         *   "blockSurvey": false,
         *   "districtUser": false,
         *   "districtWideUser": false,
         *   "dualEnrolledUser": false,
         *   "elementary": false,
         *   "faculty": false,
         *   "fullTime": false,
         *   "highSchool": false,
         *   "middleSchool": false,
         *   "preschool": false,
         *   "staffDirectoryBlock": false,
         *   "substitute": false,
         *   "unsubscribeRenWebEmail": false,
         *   "endDate": "2020-01-01",
         *   "startDate": "2020-01-01",
         *   "fte": 1,
         *   "financialFamilyId": 1,
         *   "pda": 1,
         *   "roomId": 1,
         *   "schools": [],
         *   "department": "String",
         *   "firstName": "String",
         *   "lastName": "String",
         *   "legacyStaffId": "String",
         *   "middleName": "String",
         *   "parentAlertPin": "String",
         *   "spouse": "String",
         *   "teacherSite": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["StaffVmIn"];
        /**
         * @example {
         *   "active": false,
         *   "administrator": false,
         *   "blockSurvey": false,
         *   "districtUser": false,
         *   "districtWideUser": false,
         *   "dualEnrolledUser": false,
         *   "elementary": false,
         *   "faculty": false,
         *   "fullTime": false,
         *   "highSchool": false,
         *   "middleSchool": false,
         *   "preschool": false,
         *   "staffDirectoryBlock": false,
         *   "substitute": false,
         *   "unsubscribeRenWebEmail": false,
         *   "endDate": "2020-01-01",
         *   "startDate": "2020-01-01",
         *   "fte": 1,
         *   "financialFamilyId": 1,
         *   "pda": 1,
         *   "roomId": 1,
         *   "schools": [],
         *   "department": "String",
         *   "firstName": "String",
         *   "lastName": "String",
         *   "legacyStaffId": "String",
         *   "middleName": "String",
         *   "parentAlertPin": "String",
         *   "spouse": "String",
         *   "teacherSite": "String"
         * }
         */
        "application/json": components["schemas"]["StaffVmIn"];
        /**
         * @example {
         *   "active": false,
         *   "administrator": false,
         *   "blockSurvey": false,
         *   "districtUser": false,
         *   "districtWideUser": false,
         *   "dualEnrolledUser": false,
         *   "elementary": false,
         *   "faculty": false,
         *   "fullTime": false,
         *   "highSchool": false,
         *   "middleSchool": false,
         *   "preschool": false,
         *   "staffDirectoryBlock": false,
         *   "substitute": false,
         *   "unsubscribeRenWebEmail": false,
         *   "endDate": "2020-01-01",
         *   "startDate": "2020-01-01",
         *   "fte": 1,
         *   "financialFamilyId": 1,
         *   "pda": 1,
         *   "roomId": 1,
         *   "schools": [],
         *   "department": "String",
         *   "firstName": "String",
         *   "lastName": "String",
         *   "legacyStaffId": "String",
         *   "middleName": "String",
         *   "parentAlertPin": "String",
         *   "spouse": "String",
         *   "teacherSite": "String"
         * }
         */
        "text/json": components["schemas"]["StaffVmIn"];
        /**
         * @example {
         *   "active": false,
         *   "administrator": false,
         *   "blockSurvey": false,
         *   "districtUser": false,
         *   "districtWideUser": false,
         *   "dualEnrolledUser": false,
         *   "elementary": false,
         *   "faculty": false,
         *   "fullTime": false,
         *   "highSchool": false,
         *   "middleSchool": false,
         *   "preschool": false,
         *   "staffDirectoryBlock": false,
         *   "substitute": false,
         *   "unsubscribeRenWebEmail": false,
         *   "endDate": "2020-01-01",
         *   "startDate": "2020-01-01",
         *   "fte": 1,
         *   "financialFamilyId": 1,
         *   "pda": 1,
         *   "roomId": 1,
         *   "schools": [],
         *   "department": "String",
         *   "firstName": "String",
         *   "lastName": "String",
         *   "legacyStaffId": "String",
         *   "middleName": "String",
         *   "parentAlertPin": "String",
         *   "spouse": "String",
         *   "teacherSite": "String"
         * }
         */
        "application/*+json": components["schemas"]["StaffVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<StaffVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["StaffVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a staff member.
   * @description Gets a staff member.
   */
  Staff_GetAStaffMember: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The staff identifier. */
        staffId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<StaffVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["StaffVmOut"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces a staff member.
   * @description Replaces a staff member.
   */
  Staff_ReplaceAStaffMember: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The staff identifier. */
        staffId: number;
      };
    };
    /** @description The staff member. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "active": false,
         *   "administrator": false,
         *   "blockSurvey": false,
         *   "districtUser": false,
         *   "districtWideUser": false,
         *   "dualEnrolledUser": false,
         *   "elementary": false,
         *   "faculty": false,
         *   "fullTime": false,
         *   "highSchool": false,
         *   "middleSchool": false,
         *   "preschool": false,
         *   "staffDirectoryBlock": false,
         *   "substitute": false,
         *   "unsubscribeRenWebEmail": false,
         *   "endDate": "2020-01-01",
         *   "startDate": "2020-01-01",
         *   "fte": 1,
         *   "financialFamilyId": 1,
         *   "pda": 1,
         *   "roomId": 1,
         *   "schools": [],
         *   "department": "String",
         *   "firstName": "String",
         *   "lastName": "String",
         *   "legacyStaffId": "String",
         *   "middleName": "String",
         *   "parentAlertPin": "String",
         *   "spouse": "String",
         *   "teacherSite": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["StaffVmIn"];
        /**
         * @example {
         *   "active": false,
         *   "administrator": false,
         *   "blockSurvey": false,
         *   "districtUser": false,
         *   "districtWideUser": false,
         *   "dualEnrolledUser": false,
         *   "elementary": false,
         *   "faculty": false,
         *   "fullTime": false,
         *   "highSchool": false,
         *   "middleSchool": false,
         *   "preschool": false,
         *   "staffDirectoryBlock": false,
         *   "substitute": false,
         *   "unsubscribeRenWebEmail": false,
         *   "endDate": "2020-01-01",
         *   "startDate": "2020-01-01",
         *   "fte": 1,
         *   "financialFamilyId": 1,
         *   "pda": 1,
         *   "roomId": 1,
         *   "schools": [],
         *   "department": "String",
         *   "firstName": "String",
         *   "lastName": "String",
         *   "legacyStaffId": "String",
         *   "middleName": "String",
         *   "parentAlertPin": "String",
         *   "spouse": "String",
         *   "teacherSite": "String"
         * }
         */
        "application/json": components["schemas"]["StaffVmIn"];
        /**
         * @example {
         *   "active": false,
         *   "administrator": false,
         *   "blockSurvey": false,
         *   "districtUser": false,
         *   "districtWideUser": false,
         *   "dualEnrolledUser": false,
         *   "elementary": false,
         *   "faculty": false,
         *   "fullTime": false,
         *   "highSchool": false,
         *   "middleSchool": false,
         *   "preschool": false,
         *   "staffDirectoryBlock": false,
         *   "substitute": false,
         *   "unsubscribeRenWebEmail": false,
         *   "endDate": "2020-01-01",
         *   "startDate": "2020-01-01",
         *   "fte": 1,
         *   "financialFamilyId": 1,
         *   "pda": 1,
         *   "roomId": 1,
         *   "schools": [],
         *   "department": "String",
         *   "firstName": "String",
         *   "lastName": "String",
         *   "legacyStaffId": "String",
         *   "middleName": "String",
         *   "parentAlertPin": "String",
         *   "spouse": "String",
         *   "teacherSite": "String"
         * }
         */
        "text/json": components["schemas"]["StaffVmIn"];
        /**
         * @example {
         *   "active": false,
         *   "administrator": false,
         *   "blockSurvey": false,
         *   "districtUser": false,
         *   "districtWideUser": false,
         *   "dualEnrolledUser": false,
         *   "elementary": false,
         *   "faculty": false,
         *   "fullTime": false,
         *   "highSchool": false,
         *   "middleSchool": false,
         *   "preschool": false,
         *   "staffDirectoryBlock": false,
         *   "substitute": false,
         *   "unsubscribeRenWebEmail": false,
         *   "endDate": "2020-01-01",
         *   "startDate": "2020-01-01",
         *   "fte": 1,
         *   "financialFamilyId": 1,
         *   "pda": 1,
         *   "roomId": 1,
         *   "schools": [],
         *   "department": "String",
         *   "firstName": "String",
         *   "lastName": "String",
         *   "legacyStaffId": "String",
         *   "middleName": "String",
         *   "parentAlertPin": "String",
         *   "spouse": "String",
         *   "teacherSite": "String"
         * }
         */
        "application/*+json": components["schemas"]["StaffVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<StaffVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["StaffVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates a staff member.
   * @description Updates a staff member.
   */
  Staff_UpdateAStaffMember: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The staff identifier. */
        staffId: number;
      };
    };
    /** @description The patch document. */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["OperationArray"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["OperationArray"];
      };
    };
    responses: {
      /** @description Task<ActionResult<StaffVmOut>>. */
      200: {
        content: {
          "application/json": components["schemas"]["StaffVmOut"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of Assignments by Class. Support filter/sort by yearId, yearName, firstDay, lastDay.
   * @description Gets a list of Assignments by Class. Support filter/sort by yearId, yearName, firstDay, lastDay.
   */
  Assignment_GetAssignmentByClassV1: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The Class Id for the assignments you are getting. */
        classId: number;
        /** @description Format - int32. */
        termId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfAssignmentModel"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets Assignment by id
   * @description Gets Assignment by id
   */
  Assignment_GetAssignmentByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The assignment id */
        sisAssignmentId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AssignmentModel"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Patches an assignment by id
   * @description Patches an assignment by id
   */
  Assignment_PatchAssignment: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The assignment id */
        sisAssignmentId: number;
      };
    };
    /** @description Operations to patch the assignment */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["Operation2Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["Operation2Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["Operation2Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["Operation2Array"];
      };
    };
    responses: {
      /** @description The patched assignment */
      200: {
        content: {
          "application/json": components["schemas"]["AssignmentModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of Categories by Class. Support filter/sort by yearId, yearName, firstDay, lastDay.
   * @description Gets a list of Categories by Class. Support filter/sort by yearId, yearName, firstDay, lastDay.
   */
  Categories_GetCategoriesByClassV1: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The Class Id for the categories you are getting. */
        classId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfAssignmentCategoryModel"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets Category by id
   * @description Gets Category by id
   */
  Categories_GetCategoryByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The category id */
        sisCategoryId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AssignmentCategoryModel"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Patches an assignment category by id
   * @description Patches an assignment category by id
   */
  Categories_PatchCategory: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The assignment category id */
        sisCategoryId: number;
      };
    };
    /** @description Operations to patch the assignment category */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["Operation2Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["Operation2Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["Operation2Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["Operation2Array"];
      };
    };
    responses: {
      /** @description The patched assignment category */
      200: {
        content: {
          "application/json": components["schemas"]["AssignmentCategoryModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of Grades by Class. Support filter/sort by yearId, yearName, firstDay, lastDay.
   * @description Gets a list of Grades by Class. Support filter/sort by yearId, yearName, firstDay, lastDay.
   */
  Grades_GetGradesByClassV1: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The Class Id for the grades you are getting. */
        classId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfAssignmentGradesModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets Grades by id
   * @description Gets Grades by id
   */
  Grades_GetGradesByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The grade id */
        sisGradeId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AssignmentGradesModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse2"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Patches an assignment grade by id
   * @description Patches an assignment grade by id
   */
  Grades_PatchGrade: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The assignment grade id */
        sisGradeId: number;
      };
    };
    /** @description Operations to patch the assignment grade */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["Operation2Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["Operation2Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["Operation2Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["Operation2Array"];
      };
    };
    responses: {
      /** @description The patched assignment grade */
      200: {
        content: {
          "application/json": components["schemas"]["AssignmentGradesModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse2"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse2"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * List all classes.
   * @description List all classes.
   */
  ClassesNew_GetAllClassesV2: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<ClassVmOutV2>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfClassVmOutV2"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates a class.
   * @description Creates a class.
   */
  ClassesNew_CreateAClassV2: {
    /** @description The vm. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "aideId": 1,
         *   "closed": false,
         *   "color": "String",
         *   "colorText": "String",
         *   "courseID": 1,
         *   "googleCourseId": "String",
         *   "legacyClassId": "String",
         *   "linkedClassId": 1,
         *   "maleFemale": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "name": "String",
         *   "pattern": 1,
         *   "requiredRoom": 1,
         *   "section": "String",
         *   "staffId": 1,
         *   "term1": false,
         *   "term2": false,
         *   "term3": false,
         *   "term4": false,
         *   "term5": false,
         *   "term6": false,
         *   "yearId": 1,
         *   "secondaryStaffId": 0
         * }
         */
        "application/json-patch+json": components["schemas"]["ClassVmInV2"];
        /**
         * @example {
         *   "aideId": 1,
         *   "closed": false,
         *   "color": "String",
         *   "colorText": "String",
         *   "courseID": 1,
         *   "googleCourseId": "String",
         *   "legacyClassId": "String",
         *   "linkedClassId": 1,
         *   "maleFemale": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "name": "String",
         *   "pattern": 1,
         *   "requiredRoom": 1,
         *   "section": "String",
         *   "staffId": 1,
         *   "term1": false,
         *   "term2": false,
         *   "term3": false,
         *   "term4": false,
         *   "term5": false,
         *   "term6": false,
         *   "yearId": 1,
         *   "secondaryStaffId": 0
         * }
         */
        "application/json": components["schemas"]["ClassVmInV2"];
        /**
         * @example {
         *   "aideId": 1,
         *   "closed": false,
         *   "color": "String",
         *   "colorText": "String",
         *   "courseID": 1,
         *   "googleCourseId": "String",
         *   "legacyClassId": "String",
         *   "linkedClassId": 1,
         *   "maleFemale": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "name": "String",
         *   "pattern": 1,
         *   "requiredRoom": 1,
         *   "section": "String",
         *   "staffId": 1,
         *   "term1": false,
         *   "term2": false,
         *   "term3": false,
         *   "term4": false,
         *   "term5": false,
         *   "term6": false,
         *   "yearId": 1,
         *   "secondaryStaffId": 0
         * }
         */
        "text/json": components["schemas"]["ClassVmInV2"];
        /**
         * @example {
         *   "aideId": 1,
         *   "closed": false,
         *   "color": "String",
         *   "colorText": "String",
         *   "courseID": 1,
         *   "googleCourseId": "String",
         *   "legacyClassId": "String",
         *   "linkedClassId": 1,
         *   "maleFemale": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "name": "String",
         *   "pattern": 1,
         *   "requiredRoom": 1,
         *   "section": "String",
         *   "staffId": 1,
         *   "term1": false,
         *   "term2": false,
         *   "term3": false,
         *   "term4": false,
         *   "term5": false,
         *   "term6": false,
         *   "yearId": 1,
         *   "secondaryStaffId": 0
         * }
         */
        "application/*+json": components["schemas"]["ClassVmInV2"];
      };
    };
    responses: {
      /** @description Task<ActionResult<ClassVmOutV2>>. */
      200: {
        content: {
          "application/json": components["schemas"]["ClassVmOutV2"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a class.
   * @description Gets a class.
   */
  ClassesNew_GetAClassV2: {
    parameters: {
      path: {
        /** @description Format - int32. The class identifier. */
        classId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<ClassVmOutV2>>. */
      200: {
        content: {
          "application/json": components["schemas"]["ClassVmOutV2"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces a class.
   * @description Replaces a class.
   */
  ClassesNew_ReplaceAClassV2: {
    parameters: {
      path: {
        /** @description Format - int32. The class identifier. */
        classId: number;
      };
    };
    /** @description The vm. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "aideId": 1,
         *   "closed": false,
         *   "color": "String",
         *   "colorText": "String",
         *   "courseID": 1,
         *   "googleCourseId": "String",
         *   "legacyClassId": "String",
         *   "linkedClassId": 1,
         *   "maleFemale": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "name": "String",
         *   "pattern": 1,
         *   "requiredRoom": 1,
         *   "section": "String",
         *   "staffId": 1,
         *   "term1": false,
         *   "term2": false,
         *   "term3": false,
         *   "term4": false,
         *   "term5": false,
         *   "term6": false,
         *   "yearId": 1,
         *   "secondaryStaffId": 0
         * }
         */
        "application/json-patch+json": components["schemas"]["ClassVmInV2"];
        /**
         * @example {
         *   "aideId": 1,
         *   "closed": false,
         *   "color": "String",
         *   "colorText": "String",
         *   "courseID": 1,
         *   "googleCourseId": "String",
         *   "legacyClassId": "String",
         *   "linkedClassId": 1,
         *   "maleFemale": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "name": "String",
         *   "pattern": 1,
         *   "requiredRoom": 1,
         *   "section": "String",
         *   "staffId": 1,
         *   "term1": false,
         *   "term2": false,
         *   "term3": false,
         *   "term4": false,
         *   "term5": false,
         *   "term6": false,
         *   "yearId": 1,
         *   "secondaryStaffId": 0
         * }
         */
        "application/json": components["schemas"]["ClassVmInV2"];
        /**
         * @example {
         *   "aideId": 1,
         *   "closed": false,
         *   "color": "String",
         *   "colorText": "String",
         *   "courseID": 1,
         *   "googleCourseId": "String",
         *   "legacyClassId": "String",
         *   "linkedClassId": 1,
         *   "maleFemale": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "name": "String",
         *   "pattern": 1,
         *   "requiredRoom": 1,
         *   "section": "String",
         *   "staffId": 1,
         *   "term1": false,
         *   "term2": false,
         *   "term3": false,
         *   "term4": false,
         *   "term5": false,
         *   "term6": false,
         *   "yearId": 1,
         *   "secondaryStaffId": 0
         * }
         */
        "text/json": components["schemas"]["ClassVmInV2"];
        /**
         * @example {
         *   "aideId": 1,
         *   "closed": false,
         *   "color": "String",
         *   "colorText": "String",
         *   "courseID": 1,
         *   "googleCourseId": "String",
         *   "legacyClassId": "String",
         *   "linkedClassId": 1,
         *   "maleFemale": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "name": "String",
         *   "pattern": 1,
         *   "requiredRoom": 1,
         *   "section": "String",
         *   "staffId": 1,
         *   "term1": false,
         *   "term2": false,
         *   "term3": false,
         *   "term4": false,
         *   "term5": false,
         *   "term6": false,
         *   "yearId": 1,
         *   "secondaryStaffId": 0
         * }
         */
        "application/*+json": components["schemas"]["ClassVmInV2"];
      };
    };
    responses: {
      /** @description Task<ActionResult<ClassVmOutV2>>. */
      200: {
        content: {
          "application/json": components["schemas"]["ClassVmOutV2"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates a class.
   * @description Updates a class.
   */
  ClassesNew_UpdateAClassV2: {
    parameters: {
      path: {
        /** @description Format - int32. The class identifier. */
        classId: number;
      };
    };
    /** @description The patch document. */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["Operation3Array"];
      };
    };
    responses: {
      /** @description Task<ActionResult<ClassVmOutV2>>. */
      200: {
        content: {
          "application/json": components["schemas"]["ClassVmOutV2"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Lists the classes by year.
   * @description Lists the classes by year.
   */
  ClassesNew_GetClassesByYearV2: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
      };
      path: {
        /** @description Format - int32. The year identifier. */
        yearId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<ClassVmOutV2>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfClassVmOutV2"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Lists the classes by student.
   * @description Lists the classes by student.
   */
  ClassesNew_GetClassesByStudentV2: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
      };
      path: {
        /** @description Format - int32. The student identifier. */
        studentId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<ClassVmOutV2>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfClassVmOutV2"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets the school terms.
   * @description Gets the school terms.
   */
  SchoolTermsNew_GetSchoolTermsV2: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
      };
      path: {
        /** @description Format - int32. The school identifier. */
        schoolId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<SchoolTermsVmOutV2>>>. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfSchoolTermsVmOutV2"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a school term.
   * @description Gets a school term.
   */
  SchoolTermsNew_GetASchoolTermV2: {
    parameters: {
      path: {
        /** @description Format - int32. The school term identifier. */
        schoolTermId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<SchoolTermsVmOutV2>>. */
      200: {
        content: {
          "application/json": components["schemas"]["SchoolTermsVmOutV2"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Replaces the school term.
   * @description Replaces the school term.
   */
  SchoolTermsNew_ReplaceSchoolTermV2: {
    parameters: {
      path: {
        /** @description Format - int32. The school term identifier. */
        schoolTermId: number;
      };
    };
    /** @description The updated term. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "termID": 1,
         *   "yearID": 1,
         *   "name": "String",
         *   "firstDay": "2020-01-01",
         *   "lastDay": "2020-01-01",
         *   "schoolCode": "String",
         *   "semesterID": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "application/json-patch+json": components["schemas"]["SchoolTermsVmIn"];
        /**
         * @example {
         *   "termID": 1,
         *   "yearID": 1,
         *   "name": "String",
         *   "firstDay": "2020-01-01",
         *   "lastDay": "2020-01-01",
         *   "schoolCode": "String",
         *   "semesterID": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "application/json": components["schemas"]["SchoolTermsVmIn"];
        /**
         * @example {
         *   "termID": 1,
         *   "yearID": 1,
         *   "name": "String",
         *   "firstDay": "2020-01-01",
         *   "lastDay": "2020-01-01",
         *   "schoolCode": "String",
         *   "semesterID": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "text/json": components["schemas"]["SchoolTermsVmIn"];
        /**
         * @example {
         *   "termID": 1,
         *   "yearID": 1,
         *   "name": "String",
         *   "firstDay": "2020-01-01",
         *   "lastDay": "2020-01-01",
         *   "schoolCode": "String",
         *   "semesterID": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "application/*+json": components["schemas"]["SchoolTermsVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<SchoolTermsVmOutV2>>. */
      200: {
        content: {
          "application/json": components["schemas"]["SchoolTermsVmOutV2"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates the school term.
   * @description Updates the school term.
   */
  SchoolTermsNew_UpdateSchoolTermV2: {
    parameters: {
      path: {
        /** @description Format - int32. The school term identifier. */
        schoolTermId: number;
      };
    };
    /** @description The patch document. */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["Operation3Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["Operation3Array"];
      };
    };
    responses: {
      /** @description Task<ActionResult<SchoolTermsVmOutV2>>. */
      200: {
        content: {
          "application/json": components["schemas"]["SchoolTermsVmOutV2"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates the school term.
   * @description Creates the school term.
   */
  SchoolTermsNew_CreateSchoolTermV2: {
    /** @description The school terms. */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "termID": 1,
         *   "yearID": 1,
         *   "name": "String",
         *   "firstDay": "2020-01-01",
         *   "lastDay": "2020-01-01",
         *   "schoolCode": "String",
         *   "semesterID": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "application/json-patch+json": components["schemas"]["SchoolTermsVmIn"];
        /**
         * @example {
         *   "termID": 1,
         *   "yearID": 1,
         *   "name": "String",
         *   "firstDay": "2020-01-01",
         *   "lastDay": "2020-01-01",
         *   "schoolCode": "String",
         *   "semesterID": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "application/json": components["schemas"]["SchoolTermsVmIn"];
        /**
         * @example {
         *   "termID": 1,
         *   "yearID": 1,
         *   "name": "String",
         *   "firstDay": "2020-01-01",
         *   "lastDay": "2020-01-01",
         *   "schoolCode": "String",
         *   "semesterID": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "text/json": components["schemas"]["SchoolTermsVmIn"];
        /**
         * @example {
         *   "termID": 1,
         *   "yearID": 1,
         *   "name": "String",
         *   "firstDay": "2020-01-01",
         *   "lastDay": "2020-01-01",
         *   "schoolCode": "String",
         *   "semesterID": {},
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01"
         * }
         */
        "application/*+json": components["schemas"]["SchoolTermsVmIn"];
      };
    };
    responses: {
      /** @description Task<ActionResult<SchoolTermsVmOutV2>>. */
      200: {
        content: {
          "application/json": components["schemas"]["SchoolTermsVmOutV2"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      422: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates an assignment
   * @description Creates an assignment
   */
  Assignment_CreateAssignment: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The assignment to create */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "classCategoryId": 1,
         *   "classId": 1,
         *   "classAssignmentId": 1,
         *   "title": "String",
         *   "description": "String",
         *   "dateAssigned": "2020-01-01",
         *   "dateDue": "2020-01-01",
         *   "assignmentNumber": 1,
         *   "maxPoints": 1,
         *   "weight": 1,
         *   "extraCreditType": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "publish": false,
         *   "calculate": false,
         *   "markedAsTest": false,
         *   "isLmsAssignment": false,
         *   "lmsItemId": 1,
         *   "lmsItemTypeId": 1,
         *   "descriptionHtml": "String",
         *   "dateAssignedUtc": "2020-01-01",
         *   "dateDueUtc": "2020-01-01",
         *   "systemOfRecord": "String",
         *   "googleAssignmentId": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["AssignmentModelIn"];
        /**
         * @example {
         *   "classCategoryId": 1,
         *   "classId": 1,
         *   "classAssignmentId": 1,
         *   "title": "String",
         *   "description": "String",
         *   "dateAssigned": "2020-01-01",
         *   "dateDue": "2020-01-01",
         *   "assignmentNumber": 1,
         *   "maxPoints": 1,
         *   "weight": 1,
         *   "extraCreditType": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "publish": false,
         *   "calculate": false,
         *   "markedAsTest": false,
         *   "isLmsAssignment": false,
         *   "lmsItemId": 1,
         *   "lmsItemTypeId": 1,
         *   "descriptionHtml": "String",
         *   "dateAssignedUtc": "2020-01-01",
         *   "dateDueUtc": "2020-01-01",
         *   "systemOfRecord": "String",
         *   "googleAssignmentId": "String"
         * }
         */
        "application/json": components["schemas"]["AssignmentModelIn"];
        /**
         * @example {
         *   "classCategoryId": 1,
         *   "classId": 1,
         *   "classAssignmentId": 1,
         *   "title": "String",
         *   "description": "String",
         *   "dateAssigned": "2020-01-01",
         *   "dateDue": "2020-01-01",
         *   "assignmentNumber": 1,
         *   "maxPoints": 1,
         *   "weight": 1,
         *   "extraCreditType": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "publish": false,
         *   "calculate": false,
         *   "markedAsTest": false,
         *   "isLmsAssignment": false,
         *   "lmsItemId": 1,
         *   "lmsItemTypeId": 1,
         *   "descriptionHtml": "String",
         *   "dateAssignedUtc": "2020-01-01",
         *   "dateDueUtc": "2020-01-01",
         *   "systemOfRecord": "String",
         *   "googleAssignmentId": "String"
         * }
         */
        "text/json": components["schemas"]["AssignmentModelIn"];
        /**
         * @example {
         *   "classCategoryId": 1,
         *   "classId": 1,
         *   "classAssignmentId": 1,
         *   "title": "String",
         *   "description": "String",
         *   "dateAssigned": "2020-01-01",
         *   "dateDue": "2020-01-01",
         *   "assignmentNumber": 1,
         *   "maxPoints": 1,
         *   "weight": 1,
         *   "extraCreditType": 1,
         *   "modifiedBy": 1,
         *   "modifiedDate": "2020-01-01",
         *   "publish": false,
         *   "calculate": false,
         *   "markedAsTest": false,
         *   "isLmsAssignment": false,
         *   "lmsItemId": 1,
         *   "lmsItemTypeId": 1,
         *   "descriptionHtml": "String",
         *   "dateAssignedUtc": "2020-01-01",
         *   "dateDueUtc": "2020-01-01",
         *   "systemOfRecord": "String",
         *   "googleAssignmentId": "String"
         * }
         */
        "application/*+json": components["schemas"]["AssignmentModelIn"];
      };
    };
    responses: {
      /** @description The created assignment */
      201: {
        content: {
          "application/json": components["schemas"]["AssignmentModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates an assignment category
   * @description Creates an assignment category
   */
  Categories_CreateCategory: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The assignment category to create */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "classCategoryId": 1,
         *   "weight": 1,
         *   "classId": 1,
         *   "title": "String",
         *   "description": "String",
         *   "meetsInTerm1": false,
         *   "meetsInTerm2": false,
         *   "meetsInTerm3": false,
         *   "meetsInTerm4": false,
         *   "meetsInTerm5": false,
         *   "meetsInTerm6": false,
         *   "drop": 1
         * }
         */
        "application/json-patch+json": components["schemas"]["AssignmentCategoryModelIn"];
        /**
         * @example {
         *   "classCategoryId": 1,
         *   "weight": 1,
         *   "classId": 1,
         *   "title": "String",
         *   "description": "String",
         *   "meetsInTerm1": false,
         *   "meetsInTerm2": false,
         *   "meetsInTerm3": false,
         *   "meetsInTerm4": false,
         *   "meetsInTerm5": false,
         *   "meetsInTerm6": false,
         *   "drop": 1
         * }
         */
        "application/json": components["schemas"]["AssignmentCategoryModelIn"];
        /**
         * @example {
         *   "classCategoryId": 1,
         *   "weight": 1,
         *   "classId": 1,
         *   "title": "String",
         *   "description": "String",
         *   "meetsInTerm1": false,
         *   "meetsInTerm2": false,
         *   "meetsInTerm3": false,
         *   "meetsInTerm4": false,
         *   "meetsInTerm5": false,
         *   "meetsInTerm6": false,
         *   "drop": 1
         * }
         */
        "text/json": components["schemas"]["AssignmentCategoryModelIn"];
        /**
         * @example {
         *   "classCategoryId": 1,
         *   "weight": 1,
         *   "classId": 1,
         *   "title": "String",
         *   "description": "String",
         *   "meetsInTerm1": false,
         *   "meetsInTerm2": false,
         *   "meetsInTerm3": false,
         *   "meetsInTerm4": false,
         *   "meetsInTerm5": false,
         *   "meetsInTerm6": false,
         *   "drop": 1
         * }
         */
        "application/*+json": components["schemas"]["AssignmentCategoryModelIn"];
      };
    };
    responses: {
      /** @description The created assignment category */
      201: {
        content: {
          "application/json": components["schemas"]["AssignmentCategoryModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets a list of Class Assignment Grade Code Translations by Class. Support filter/sort by letterCode, percent, statusCode.
   * @description Gets a list of Class Assignment Grade Code Translations by Class. Support filter/sort by letterCode, percent, statusCode.
   */
  CodeTranslation_GetCodeTranslationsByClassId: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The Class Id for the translations you are getting. */
        classId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfClassAssignmentGradeCodeTranslationModel"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets Class Assignment Grade Code Translation by id
   * @description Gets Class Assignment Grade Code Translation by id
   */
  CodeTranslation_GetCodeTranslationByIdV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The translations id */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ClassAssignmentGradeCodeTranslationModel"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse2"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Patches a class assignment grade code translation by id
   * @description Patches a class assignment grade code translation by id
   */
  CodeTranslation_PatchCodeTranslation: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The translation id */
        id: number;
      };
    };
    /** @description Operations to patch the translation */
    requestBody?: {
      content: {
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json-patch+json": components["schemas"]["Operation2Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/json": components["schemas"]["Operation2Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "text/json": components["schemas"]["Operation2Array"];
        /**
         * @example [
         *   {
         *     "path": "String",
         *     "op": "String",
         *     "from": "String",
         *     "value": {}
         *   }
         * ]
         */
        "application/*+json": components["schemas"]["Operation2Array"];
      };
    };
    responses: {
      /** @description The patched translation */
      200: {
        content: {
          "application/json": components["schemas"]["ClassAssignmentGradeCodeTranslationModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse2"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse2"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates a class assignment grade code translation.
   * @description Creates a class assignment grade code translation.
   */
  CodeTranslation_CreateCodeTranslation: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The translation to create */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "classId": 1,
         *   "letterCode": "String",
         *   "percent": 1,
         *   "statusCode": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["ClassAssignmentGradeCodeTranslationModelIn"];
        /**
         * @example {
         *   "classId": 1,
         *   "letterCode": "String",
         *   "percent": 1,
         *   "statusCode": "String"
         * }
         */
        "application/json": components["schemas"]["ClassAssignmentGradeCodeTranslationModelIn"];
        /**
         * @example {
         *   "classId": 1,
         *   "letterCode": "String",
         *   "percent": 1,
         *   "statusCode": "String"
         * }
         */
        "text/json": components["schemas"]["ClassAssignmentGradeCodeTranslationModelIn"];
        /**
         * @example {
         *   "classId": 1,
         *   "letterCode": "String",
         *   "percent": 1,
         *   "statusCode": "String"
         * }
         */
        "application/*+json": components["schemas"]["ClassAssignmentGradeCodeTranslationModelIn"];
      };
    };
    responses: {
      /** @description The created assignment */
      201: {
        content: {
          "application/json": components["schemas"]["ClassAssignmentGradeCodeTranslationModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse2"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates an assignment grade
   * @description Creates an assignment grade
   */
  Grades_CreateGrade: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
    };
    /** @description The assignment grade to create */
    requestBody?: {
      content: {
        /**
         * @example {
         *   "sisAssignmentId": 1,
         *   "studentId": 1,
         *   "maxPoints": 1,
         *   "receivedPoints": 1,
         *   "curvePoints": 1,
         *   "penaltyPoints": 1,
         *   "bonusPoints": 1,
         *   "notes": "String",
         *   "weight": 1,
         *   "status": "String",
         *   "emailSent": false,
         *   "displayGrade": "String"
         * }
         */
        "application/json-patch+json": components["schemas"]["AssignmentGradesModelIn"];
        /**
         * @example {
         *   "sisAssignmentId": 1,
         *   "studentId": 1,
         *   "maxPoints": 1,
         *   "receivedPoints": 1,
         *   "curvePoints": 1,
         *   "penaltyPoints": 1,
         *   "bonusPoints": 1,
         *   "notes": "String",
         *   "weight": 1,
         *   "status": "String",
         *   "emailSent": false,
         *   "displayGrade": "String"
         * }
         */
        "application/json": components["schemas"]["AssignmentGradesModelIn"];
        /**
         * @example {
         *   "sisAssignmentId": 1,
         *   "studentId": 1,
         *   "maxPoints": 1,
         *   "receivedPoints": 1,
         *   "curvePoints": 1,
         *   "penaltyPoints": 1,
         *   "bonusPoints": 1,
         *   "notes": "String",
         *   "weight": 1,
         *   "status": "String",
         *   "emailSent": false,
         *   "displayGrade": "String"
         * }
         */
        "text/json": components["schemas"]["AssignmentGradesModelIn"];
        /**
         * @example {
         *   "sisAssignmentId": 1,
         *   "studentId": 1,
         *   "maxPoints": 1,
         *   "receivedPoints": 1,
         *   "curvePoints": 1,
         *   "penaltyPoints": 1,
         *   "bonusPoints": 1,
         *   "notes": "String",
         *   "weight": 1,
         *   "status": "String",
         *   "emailSent": false,
         *   "displayGrade": "String"
         * }
         */
        "application/*+json": components["schemas"]["AssignmentGradesModelIn"];
      };
    };
    responses: {
      /** @description The created assignment grade */
      201: {
        content: {
          "application/json": components["schemas"]["AssignmentGradesModel"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse2"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Get a person's picture
   * @description Get a person's picture
   */
  People_GetProfilePicture: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        personId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProfileImage"];
        };
      };
      204: {
        content: {
          "application/json": unknown;
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Gets an inquiry form by request ID.
   * @description Gets an inquiry form by request ID.
   */
  InquiryForm_GetInquiryFormByRequestIdV1: {
    parameters: {
      query?: {
        /** @description Include Student Data in form. */
        includeStudentData?: boolean;
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. The inquiry form's request ID */
        requestId: number;
      };
    };
    responses: {
      /** @description Task<ActionResult<InquiryFormModel>>. */
      200: {
        content: {
          "application/json": components["schemas"]["InquiryFormModel"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Creates an inquiry form.
   * @description Creates an inquiry form.
   */
  InquiryForm_CreateInquiryFormV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        memberId: number;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example {
         *   "standardAnswers": [],
         *   "customAnswers": []
         * }
         */
        "application/json-patch+json": components["schemas"]["InquiryFormEditModel"];
        /**
         * @example {
         *   "standardAnswers": [],
         *   "customAnswers": []
         * }
         */
        "application/json": components["schemas"]["InquiryFormEditModel"];
        /**
         * @example {
         *   "standardAnswers": [],
         *   "customAnswers": []
         * }
         */
        "text/json": components["schemas"]["InquiryFormEditModel"];
        /**
         * @example {
         *   "standardAnswers": [],
         *   "customAnswers": []
         * }
         */
        "application/*+json": components["schemas"]["InquiryFormEditModel"];
      };
    };
    responses: {
      /** @description Task<ActionResult<InquiryFormModel>>. */
      200: {
        content: {
          "application/json": components["schemas"]["CreateInquiryFormCommandOut"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Updates an inquiry form.
   * @description Updates an inquiry form.
   */
  InquiryForm_UpdateInquiryFormV1: {
    parameters: {
      query?: {
        "api-version"?: string;
      };
      path: {
        /** @description Format - int32. */
        studentId: number;
      };
    };
    requestBody?: {
      content: {
        /**
         * @example {
         *   "standardAnswers": [],
         *   "customAnswers": []
         * }
         */
        "application/json-patch+json": components["schemas"]["InquiryFormEditModel"];
        /**
         * @example {
         *   "standardAnswers": [],
         *   "customAnswers": []
         * }
         */
        "application/json": components["schemas"]["InquiryFormEditModel"];
        /**
         * @example {
         *   "standardAnswers": [],
         *   "customAnswers": []
         * }
         */
        "text/json": components["schemas"]["InquiryFormEditModel"];
        /**
         * @example {
         *   "standardAnswers": [],
         *   "customAnswers": []
         * }
         */
        "application/*+json": components["schemas"]["InquiryFormEditModel"];
      };
    };
    responses: {
      /** @description Task<ActionResult<InquiryFormModel>>. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  /**
   * Lists all inquiry forms.
   * @description Lists all inquiry forms.
   */
  InquiryForm_GetInquiryFormsV1: {
    parameters: {
      query?: {
        Filters?: string;
        Sorts?: string;
        /** @description Format - int32. */
        Page?: number;
        /** @description Format - int32. */
        PageSize?: number;
        "api-version"?: string;
      };
    };
    responses: {
      /** @description Task<ActionResult<PagedResult<InquiryFormModel>><. */
      200: {
        content: {
          "application/json": components["schemas"]["PagedResultOfInquiryFormModel"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
}
